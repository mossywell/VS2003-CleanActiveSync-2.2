<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System.Xml</name>
  </assembly>
  <members>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>
        <para>Reads data from any data store using a cursor model.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>
        <para> Creates a new <see langword="XPathNavigator" /> positioned
   at the same node as this <see langword="XPathNavigator" />
   
   .</para>
      </summary>
      <returns>
        <para>A new <see langword="XPathNavigator" /> object positioned at the same node
   as the original <see langword="XPathNavigator" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>
        <para> Gets the value of the attribute with the
      specified <see cref="P:System.Xml.XPath.XPathNavigator.LocalName" /> and <see cref="P:System.Xml.XPath.XPathNavigator.NamespaceURI" /> .</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute; String.Empty if a 
      matching attribute is not found or if the navigator is not positioned on an element node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>
        <para> Moves to the attribute with matching <see cref="P:System.Xml.XPath.XPathNavigator.LocalName" /> and <see cref="P:System.Xml.XPath.XPathNavigator.NamespaceURI" />
.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute. If this is <see langword="null" />, an empty namespace is assumed. </param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
   otherwise, <see langword="false" />. If <see langword="false" />, the position
   of the navigator does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>
        <para> Moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the first attribute; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>
        <para> Moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>
        <para> Returns the value of the namespace node
      corresponding to the specified local name.</para>
      </summary>
      <param name="name">The local name of the namespace node.</param>
      <returns>
        <para>The value of the namespace node; String.Empty if a 
      matching namespace node is not found or if the
      navigator is not positioned on an element node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>
        <para> Moves the
   <see langword="XPathNavigator" /> to the namespace
      node with the specified local name.</para>
      </summary>
      <param name="name">The local name of the namespace node.</param>
      <returns>
        <para>
          <see langword="true" /> if the move was
   successful; <see langword="false" /> if a matching namespace node was not found or
   if the navigator is not positioned on an element node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>
        <para>Moves the <see langword="XPathNavigator" /> to first namespace node of the current element.</para>
        <note type="note">
   The <see langword="XPathNavigator" /> class returns namespace nodes in reverse document order. Therefore, <see langword="MoveToFirstNamespace " />essentially moves to the last namespace node, currently in scope.
</note>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the
   first namespace node; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>
        <para> Moves the
   <see langword="XPathNavigator" />
   to the next namespace node.</para>
        <note type="note">
   The <see langword="XPathNavigator" />
   class returns namespace nodes in reverse document order.
</note>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the
   next namespace node; otherwise <see langword="false" />. If <see langword="false" />, the position of
   the navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>
        <para>Moves the <see langword="XPathNavigator" /> to the first namespace node matching the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</para>
        <para>
          <see langword="Note[note]" /> The <see langword="XPathNavigator" /> class returns namespace nodes in reverse document order. Therefore, <see langword="MoveToFirstNamespace " />essentially moves to the last namespace node, currently in scope.</para>
      </summary>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope.</param>
      <returns>
        <para>
          <see langword="true" /> if the navigator is successful moving to the first namespace node; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>
        <para>Moves the <see langword="XPathNavigator" /> to the next namespace node matching
   the <see cref="T:System.Xml.XPath.XPathNamespaceScope" />
   specified. </para>
        <note type="note">
   The <see langword="XPathNavigator" /> class returns namespace nodes in reverse document order.
</note>
      </summary>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope.</param>
      <returns>
        <para>
          <see langword="true" /> if the navigator is successful moving to the next
   namespace node; otherwise <see langword="false" />. If <see langword="false" />, the
   position of the navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>
        <para> Moves to the
      next sibling of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the next sibling node;
<see langword="false" /> if there are no more siblings or if the 
   navigator is currently positioned on an attribute node. If
<see langword="false" /> 
, the position of the navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>
        <para> Moves to the
      previous sibling of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the previous sibling node;
<see langword="false" /> if there is no 
   previous sibling or if the navigator is currently positioned on an attribute node. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>
        <para> Moves to the
      first sibling of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the first sibling node;
<see langword="false" /> if there is no 
   first sibling or if the navigator is currently positioned on an attribute node. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>
        <para> Moves to the
      first child of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a first child node; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>
        <para> Moves to
      the parent of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a parent node; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>
        <para> Moves to the root node
      to which the current node belongs.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Moves to the same
      position as the specified <see langword="XPathNavigator" />
      .</para>
      </summary>
      <param name="other">The <see langword="XPathNavigator" /> positioned on the node that you want to move to.</param>
      <returns>
        <para>
          <see langword="true " />if successful; otherwise <see langword="false" />. If <see langword="false" /> , the position of the
   navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>
        <para> Moves to the
      node that has an attribute of type ID whose
      value matches the specified string.</para>
      </summary>
      <param name="id">A string representing the ID value of the node to which you want to move. This argument does not need to be atomized.</param>
      <returns>
        <para>
          <see langword="true " />if the move
   was successful; otherwise <see langword="false" />. If
<see langword="false" /> , the position of the navigator is unchanged.</para>
        <note type="note">
   If the navigator is implemented over
   an <see cref="T:System.Xml.XmlDataDocument" />, this method always returns <see langword="false" />
   and the position of the navigator is not changed.
</note>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Determines whether
      the current <see langword="XPathNavigator" /> is at the same position as the
      specified <see langword="XPathNavigator" />
      .</para>
      </summary>
      <param name="other">The <see langword="XPathNavigator" /> that you want to compare against.</param>
      <returns>
        <para>
          <see langword="true" /> if the two navigators have the
   same position; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>
        <para> Compiles a string representing an XPath expression and returns
      an <see cref="T:System.Xml.XPath.XPathExpression" />
      .</para>
      </summary>
      <param name="xpath">A string representing an XPath expression.</param>
      <returns>
        <para>An <see langword="XPathExpression" /> object representing
   the XPath expression.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="xpath" /> parameter contains an invalid XPath expression.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>
        <para>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression" /> and returns the typed result (number, Boolean,
   string, or node set). Use the <see cref="T:System.Xml.XPath.XPathNodeIterator" /> to iterate over a set of
   nodes.</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> that can be evaluated.</param>
      <returns>
        <para>The result of the expression (number, Boolean, string, 
      or node set). This maps to <see cref="T:System.Double" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <see langword="XPathExpression" /> contains an error.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>
        <para>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression" /> using the supplied context and returns the
   typed result (number, Boolean, string, or node set).</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> that can be evaluated.</param>
      <param name=" context">An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected node set that the evaluation is to be performed on.</param>
      <returns>
        <para>The result of the expression (number, Boolean, string, 
      or node set). This maps to <see cref="T:System.Double" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <see langword="XPathExpression" /> contains an error.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>
        <para>Evaluates the string representing an XPath expression and
      returns the typed result (number, Boolean, string, or node set). Use
      the <see cref="T:System.Xml.XPath.XPathNodeIterator" />
      to iterate over a set of nodes.</para>
      </summary>
      <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
      <returns>
        <para>The result of the expression (number, Boolean, string, 
      or node set). This maps to <see cref="T:System.Double" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The XPath expression contains an error.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>
        <para>Determines whether the current node matches the
      specified <see cref="T:System.Xml.XPath.XPathExpression" />
      .</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> encapsulating a compiled XSLT pattern.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   current node matches the <see langword="XPathExpression" />
   ; otherwise,
<see langword="false" />
.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="expr" /> cannot be evaluated.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>
        <para>Determines whether the current node matches the
      specified XSLT pattern.</para>
      </summary>
      <param name="xpath">A string representing an XSLT pattern.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   current node matches the XSLT pattern; otherwise,
<see langword="false" />
.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="xpath" /> cannot be evaluated.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>
        <para>Selects a node set using the specified <see cref="T:System.Xml.XPath.XPathExpression" />
.</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the
   selected node set.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="expr" /> contains an error or its return type is not a node set.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>
        <para>Selects a node set using the specified XPath expression.</para>
      </summary>
      <param name="xpath">A string representing an XPath expression.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the
   selected node set.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="xpath" /> contains an error or its return type is not a node set.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>
        <para> Selects all the child nodes of the current node
      with the matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</para>
      </summary>
      <param name="type">The <see langword="XPathNodeType" /> of the child nodes.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>
        <para>Selects all the child element nodes of the current node
      with the supplied local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the child nodes.</param>
      <param name=" namespaceURI">The namespace URI of the child nodes.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
        <para> Selects all the descendant nodes of the current
      node with the matching <see cref="T:System.Xml.XPath.XPathNodeType" /> .</para>
      </summary>
      <param name="type">The <see langword="XPathNodeType" /> of the descendant nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>
        <para>Selects all the descendant element nodes of the current
      node with the supplied local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the descendant nodes.</param>
      <param name=" namespaceURI">The namespace URI of the descendant nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
        <para>Selects all the ancestor element nodes of the current
      node with the matching <see cref="T:System.Xml.XPath.XPathNodeType" /> .</para>
      </summary>
      <param name="type">The <see langword="XPathNodeType" /> of the ancestor nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the 
   selected nodes. The returned nodes are in reverse document order.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>
        <para>Selects all the ancestor element nodes of the current
      node with the supplied local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the ancestor nodes.</param>
      <param name=" namespaceURI">The namespace URI of the ancestor nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the 
   selected nodes. The returned nodes are in reverse document order.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Compares the position of the current navigator with the
      position of the specified <see langword="XPathNavigator" /> .</para>
      </summary>
      <param name="nav">The <see langword="XPathNavigator" /> to compare against. If this value is <see langword="null" />, XmlNodeOrder.Unknown is returned.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeOrder" /> value representing the comparative position of the
   two navigators. The following table describes the <see langword="XmlNodeOrder" />
   enumeration.</para>
        <list type="table">
          <listheader>
            <term>XmlNodeOrder</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Before</term>
            <description>
              <para> The current node of this navigator is before the current node
            of the supplied navigator.</para>
            </description>
          </item>
          <item>
            <term> After</term>
            <description>
              <para> The current node of this navigator is after the current node of
               the supplied navigator.</para>
            </description>
          </item>
          <item>
            <term> Same</term>
            <description>
              <para> The two navigators are positioned
                  on the same node.</para>
            </description>
          </item>
          <item>
            <term> Unknown</term>
            <description>
              <para>The node positions cannot be determined in document order, relative to
                     each other. This could occur if the two nodes reside in different
                     trees.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para>Determines whether the specified
 <see langword="XPathNavigator" /> is a descendant of the current
 <see langword="XPathNavigator" />.</para>
      </summary>
      <param name="nav">The <see langword="XPathNavigator" /> that you want to compare against. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="nav" />
is a descendant of the current navigator; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>
        <para>Gets the text value of the current node. This
      method is equivalent to returning the <see cref="P:System.Xml.XPath.XPathNavigator.Value" /> property.</para>
      </summary>
      <returns>
        <para>The content returned depends on the <see cref="P:System.Xml.XPath.XPathNavigator.NodeType" /> of the node. </para>
        <list type="table">
          <listheader>
            <term>Node Type</term>
            <description>Value</description>
          </listheader>
          <item>
            <term> Attribute</term>
            <description>The value of the attribute.</description>
          </item>
          <item>
            <term> Element</term>
            <description>The <see cref="P:System.Xml.XmlNode.InnerText" /> of the element.</description>
          </item>
          <item>
            <term> Comment</term>
            <description>The content of the comment.</description>
          </item>
          <item>
            <term> ProcessingInstruction</term>
            <description>The entire content excluding the target.</description>
          </item>
          <item>
            <term> Text</term>
            <description>
              <para>The content of the text node.</para>
            </description>
          </item>
          <item>
            <term> Whitespace</term>
            <description>The white space between mark-up.</description>
          </item>
          <item>
            <term> SignificantWhitespace</term>
            <description>The white space between markup in a mixed content 
      model or white space within an xml:space= 'preserve' scope.</description>
          </item>
          <item>
            <term> Root</term>
            <description>The <see cref="P:System.Xml.XmlNode.InnerText" /> of the root 
   node.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>
        <para> Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>
        <para> Gets the name of the current node without the namespace prefix.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>
        <para> Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>
        <para> Gets the qualified name of
      the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>
        <para> Gets the prefix associated with
      the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Value">
      <summary>
        <para> Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>
        <para> Gets the base URI for the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>
        <para> Gets the
   <see langword="xml:lang" /> scope for the
      current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>
        <para> Gets a value indicating whether
      the current
      node is an empty element (for example, &lt;MyElement/&gt;).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>
        <para> Gets
      the <see cref="T:System.Xml.XmlNameTable" />
      associated with this implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>
        <para> Gets a
      value indicating whether the element node has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>
        <para> Gets a value indicating whether
      the current node has child nodes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>
        <para>Enables a class to return an <see cref="T:System.Xml.XmlNode" /> from the
   current context or position.</para>
      </summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>
        <para>Returns the <see cref="T:System.Xml.XmlNode" /> for the current position.</para>
      </summary>
      <returns>
        <para>The <see langword="XmlNode" /> for the
   current position.</para>
      </returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>
        <para> Provides an iterator over a set of selected nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>
        <para>When overridden in a derived class, creates a new
   <see langword="XPathNodeIterator" />.</para>
      </summary>
      <returns>
        <para>A new
   <see langword="XPathNodeIterator" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>
        <para>When overridden in a derived class, moves
      the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next node in the selected set.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
<see langword="XPathNavigator" /> moved to the next node; 
<see langword="false" /> if there are no more selected nodes.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>
        <para>When overridden in a derived class, returns the
      navigator for this <see langword="XPathNodeIterator" /> positioned on the current
      node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>
        <para>When overridden in a derived class, gets the index of the current position in the selected
      set of nodes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>
        <para>Gets the index of the last node in the selected set of nodes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>
        <para>Specifies how entities are handled.</para>
      </summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>
        <para> Expands all entities. This is the default.
      </para>
        <para> Entity reference nodes (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> equals 
   XmlNodeType.EntityReference) are not returned. The entity text is
   expanded in place of the entity references.
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>
        <para>Expands character entities and returns general entities
      as nodes (<see cref="P:System.Xml.XmlValidatingReader.NodeType" />equals XmlNodeType.EntityReference, <see cref="P:System.Xml.XmlValidatingReader.Name" /> equals the name of the entity, and <see cref="P:System.Xml.XmlValidatingReader.HasValue" />
      equals <see langword="false" />
      ).</para>
        <para>You must call <see cref="M:System.Xml.XmlReader.ResolveEntity" /> to see what the general entities expand to. This
   enables you to optimize entity handling by only expanding the entity the
   first time it is used.</para>
        <para>When set to ExpandCharEntities, a reader call to the <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)" />
method expands all entities
(both general and character entities).</para>
      </summary>
    </member>
    <member name="T:System.Xml.Query.IXmlExpressionRewriter">
      <summary>
            Rewrite an XmlExpression.
            </summary>
    </member>
    <member name="M:System.Xml.Query.IXmlExpressionRewriter.Rewrite(System.Xml.Query.XmlExpression)">
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>
        <para>Provides an interface to enable a class to return line and position information.</para>
      </summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>
   Gets a value indicating whether the class can return
   line information.
</summary>
      <returns>
        <see langword="true" /> if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, <see langword="false" />.
</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>
        <para>Gets the current line number.</para>
      </summary>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>
        <para>Gets the current line position.</para>
      </summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>
        <para>Implements a single-threaded <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>
        <para> Table of atomized string objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, gets the atomized
      string containing the
      same characters as the specified range of characters in the given array.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The character array containing the name to look up.</param>
      <param name="offset">The zero-based index into the array specifying the first character of the name.</param>
      <param name="length">The number of characters in the name.</param>
      <returns>
        <para> The atomized string or <see langword="null" /> if the
   string has not already been atomized. If <paramref name="length" /> is zero,
   String.Empty is returned.</para>
      </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <para>0 &gt; <paramref name="offset" /></para>
        <para>-or-</para>
        <para>
          <paramref name="offset" /> &gt;= <paramref name="array" />.Length</para>
        <para>-or-</para>
        <para>
          <paramref name="length" /> &gt; <paramref name="array" />.Length</para>
        <para>The above conditions do not cause an exception to be thrown if <paramref name="length" />=0.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>
        <para>When overridden in a derived class, gets the atomized
      string containing the same
      value as the specified string.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The name to look up.</param>
      <returns>
        <para>The atomized string or <see langword="null" /> if the
   string has not already been atomized.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, atomizes the
      specified string and adds it to the <see langword="XmlNameTable" />.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The character array containing the name to add.</param>
      <param name="offset">Zero based index into the array specifying the first character of the name.</param>
      <param name="length">The number of characters in the name.</param>
      <returns>
        <para>The new atomized string or the existing one if it
      already exists. If length is zero, String.Empty is returned.</para>
      </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <para>0 &gt; <paramref name="offset" /></para>
        <para>-or-</para>
        <para>
          <paramref name="offset" /> &gt;= <paramref name="array" />.Length</para>
        <para>-or-</para>
        <para>
          <paramref name="length" /> &gt; <paramref name="array" />.Length</para>
        <para>The above conditions do not cause an exception to be thrown if <paramref name="length" />=0.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>
        <para>When overridden in a derived class, atomizes the
      specified string and adds it to the <see langword="XmlNameTable" /> .</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The name to add.</param>
      <returns>
        <para>The new atomized string or the existing one if it already
      exists.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="NameTable" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>
        <para> Atomizes the specified string and adds it to the
   <see langword="NameTable" />
   .</para>
        <para> For more information on atomized strings, see <see cref="T:System.Xml.NameTable" />
.</para>
      </summary>
      <param name="key">The string to add.</param>
      <returns>
        <para>The atomized string or the existing string if it already
      exists in the <see langword="NameTable" /> .</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Atomizes the specified string and adds it to the
   <see langword="NameTable" />
   .</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.NameTable" />.</para>
      </summary>
      <param name="key">The character array containing the string to add.</param>
      <param name="start">The zero-based index into the array specifying the first character of the string.</param>
      <param name="len">The number of characters in the string.</param>
      <returns>
        <para>The atomized string or the existing string if one already
      exists in the <see langword="NameTable" />
      . If <paramref name="len" /> is zero, String.Empty is returned.</para>
      </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <para>0 &gt; <paramref name=" start" /></para>
        <para>-or-</para>
        <para>
          <paramref name="start" /> &gt;= <paramref name="key" />.Length </para>
        <para>-or-</para>
        <para>
          <paramref name="len" /> &gt;= <paramref name="key" />.Length</para>
        <para>The above conditions do not cause an exception to be thrown if <paramref name="len" />=0. </para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>
        <para> Gets the atomized string with the specified
      value.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.NameTable" />
.</para>
      </summary>
      <param name="">The name to find.</param>
      <returns>
        <para>The atomized string object or
   <see langword="null" /> if the string has not already been atomized.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Gets the atomized string
      containing the same characters as the specified range of characters in the given
      array.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.NameTable" />.</para>
      </summary>
      <param name="key">The character array containing the name to find.</param>
      <param name="start">The zero-based index into the array specifying the first character of the name.</param>
      <param name="len">The number of characters in the name.</param>
      <returns>
        <para>The atomized string or <see langword="null" /> if the
   string has not already been atomized. If <paramref name="len" /> is zero,
   String.Empty is returned.</para>
      </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <para>0 &gt; <paramref name="start" /></para>
        <para>-or-</para>
        <para>
          <paramref name="start" /> &gt;= <paramref name="key" />.Length </para>
        <para>-or-</para>
        <para>
          <paramref name="len" /> &gt;= <paramref name="key" />.Length</para>
        <para>The above conditions do not cause an exception to be thrown if <paramref name="len" />=0. </para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.</exception>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>
        <para>Specifies the state of the reader.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>
        <para>The <see langword="Read" /> method has not been called.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>
        <para>The <see langword="Read" /> method 
 has been called. Additional methods may be called on the reader.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>
    An error occurred that prevents the
    read operation from continuing.
 </summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>
        <para>The end of the file has been reached
      successfully.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>
        <para>The <see cref="M:System.Xml.XmlReader.Close" /> method has been called.</para>
      </summary>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>
        <para>Specifies the type of validation to perform.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>
        <para>Creates an XML 1.0 compliant non-validating parser. 
      Default attributes are reported and general entities can be resolved by calling
   <see cref="M:System.Xml.XmlValidatingReader.ResolveEntity" />
   . The DOCTYPE is not used
   for validation purposes.</para>
        <para> No validation
   errors are thrown.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>
        <see cref="T:System.Xml.XmlValidatingReader" />validates if DTD or 
   schema information is found.
</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>
        <para>Validates according to the DTD.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>
        <para> Validate according to XDR schemas; including inline
 schemas. XDR schemas are recognized using the <see langword="x-schema" />
 namespace prefix
 or the <see cref="P:System.Xml.XmlValidatingReader.Schemas" />
 property.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>
        <para> Validate according to XSD schemas; including inline
 schemas. XSD schemas are associated with namespace URIs either by using the
 <see langword="schemaLocation" />
 attribute or the provided <see cref="P:System.Xml.XmlValidatingReader.Schemas" />
 property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>
        <para> Specifies how white space is handled.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>
        <para>Return <see langword="Whitespace" /> and 
<see langword="SignificantWhitespace" /> 
nodes. This is the default.</para>
      </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>
        <para> Return <see langword="SignificantWhitespace" /> nodes only.
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>
        <para>Return no <see langword="Whitespace" /> and no 
<see langword="SignificantWhitespace" /> 
nodes.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlParamDirection.In">
      <summary>
            In parameter only.
            </summary>
    </member>
    <member name="F:System.Xml.XmlParamDirection.Out">
      <summary>
            Out parameter only.
            </summary>
    </member>
    <member name="F:System.Xml.XmlParamDirection.InOut">
      <summary>
            In/Out parameter. Supplied parameter is modified.
            </summary>
    </member>
    <member name="T:System.Xml.XmlArgumentList">
      <summary>
            This class is a container of a variable number of arguments. The arguments can either be parameters 
            (which are qualified with a Name and optionally a Namespace URI) pair or an object with methods that 
            can be called on it that is optionally qualified with a Namespace URI.
            BUGBUG: Exception classes are not implemented yet.
            </summary>
    </member>
    <member name="M:System.Xml.XmlArgumentList.GetParam(System.String,System.String)">
      <summary>
            Returns the parameter associated with the given namespace qualified name.
            </summary>
      <param name="name">The name of the parameter. The name is not checked to be a valid localname.</param>
      <param name="namespaceURI">The namespace URI that completes the globally unique name.</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.GetParam(System.String)">
      <summary>
            Returns the parameter associated with the given none namespace qualified name.
            </summary>
      <param name="name">The name of the parameter. The name is not checked to be a valid localname.</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>
            Adds a new object to the list and associate it with the given namespace.
            </summary>
      <param name="namespaceURI">The namespace URI that identifies this object.</param>
      <param name="value">The object itself.</param>
    </member>
    <member name="M:System.Xml.XmlArgumentList.GetExtensionObject(System.String)">
      <summary>
            Returns the object associated with the given namespaceURI.
            </summary>
      <param name="namespaceURI">The namespace URI that identifies this object.</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.RemoveExtensionObject(System.String)">
      <summary>
            Removes the object associate it with the given namespace qualified name.
            </summary>
      <param name="namespaceURI">The namespace URI that identifies this object.</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.AddParam(System.String,System.Object)">
      <summary>
            Adds a new parameter to the list and associate it with the given name with default direction "InOut". 
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="parameter">The parameter value or object itself.</param>
    </member>
    <member name="M:System.Xml.XmlArgumentList.AddParam(System.String,System.Object,System.Xml.XmlParamDirection)">
      <summary>
            Adds a new parameter to the list and associate it with the given name with default direction "InOut". 
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="parameter">The parameter value or object itself.</param>
      <param name="direction">The direction of the paremeter.</param>
    </member>
    <member name="M:System.Xml.XmlArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>
            Add a new parameter to the list and associate it with the given namespace qualified name with default direction "InOut".
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="namespaceURI">The namespace URI that completes the globally unique name.</param>
      <param name="parameter">The parameter value or object itself.</param>
    </member>
    <member name="M:System.Xml.XmlArgumentList.AddParam(System.String,System.String,System.Object,System.Xml.XmlParamDirection)">
      <summary>
            Add a new parameter to the list and associate it with the given namespace qualified name with input direction.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="namespaceURI">The namespace URI that completes the globally unique name.</param>
      <param name="parameter">The parameter value or object itself.</param>
      <param name="direction">The direction of the paremeter.</param>
    </member>
    <member name="M:System.Xml.XmlArgumentList.RemoveParam(System.String,System.String)">
      <summary>
            Removes the parameter associated with the given namespace qualified name.
            </summary>
      <param name="name">The name of the parameter. The name is not checked to be a valid localname</param>
      <param name="namespaceURI">The namespace URI that completes the globally unique name.</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.RemoveParam(System.String)">
      <summary>
            Removes the parameter associated with the given name.
            </summary>
      <param name="name">The name of the parameter. The name is not checked to be a valid localname</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.Clear">
      <summary>
            Removes all arguments from the list.
            </summary>
    </member>
    <member name="M:System.Xml.XmlArgumentList.GetEnumerator">
      <summary>
            Returns an enumerator for iterating over all the names defined in the collection. The iterator returns the XmlQualifiedName objects.
            </summary>
      <returns>The list of XmlQualifiedName objects.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.GetParam(System.Xml.XmlQualifiedName)">
      <summary>
            Returns the parameter associated with the given qualified name.
            </summary>
      <param name="qName">The unique qName of the parameter.</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="M:System.Xml.XmlArgumentList.AddParam(System.Xml.XmlParam)">
      <summary>
            Adds a new parameter to the list and associate it with the given qualified name. 
            </summary>
      <param name="qName">The unique qName of the parameter.</param>
      <param name="parameter">The parameter structure.</param>
    </member>
    <member name="M:System.Xml.XmlArgumentList.RemoveParam(System.Xml.XmlQualifiedName)">
      <summary>
            Removes the parameter associated with the given namespace qualified name.
            </summary>
      <param name="qName">The unique qName of the parameter.</param>
      <returns>Null if not found.</returns>
    </member>
    <member name="P:System.Xml.XmlArgumentList.Count">
      <summary>
            Finds the number of objects in the collection.
            </summary>
      <returns>true if access to the Collection is synchronized (thread-safe) otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlArgumentList.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
      <returns>The number of objects in the Collection.</returns>
    </member>
    <member name="P:System.Xml.XmlArgumentList.SyncRoot">
      <summary>
            Gets an object that can be used to synchronized access to the collection.
            </summary>
      <returns>An object that can be used to synchronized access to the collection.</returns>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>
        <para> Represents an attribute. Valid and default values for the attribute are defined in a DTD or schema.
      </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>
        <para> Represents a single node in the XML document.
      </para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>
        <para>Provides an accessor to the <see cref="T:System.Xml.XPath.XPathNavigator" />.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>
        <para>Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> for this
<see langword="IXPathNavigable" /> interface.</para>
      </summary>
      <returns>
        <para>An <see langword="XPathNavigator" />
object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for navigating this object.</para>
      </summary>
      <returns>
        <para>An <see langword="XPathNavigator" />
object. The <see langword="XPathNavigator" /> is positioned on the node from
which the method was called. It is not positioned on the root of the
document.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>
        <para>Selects the first <see langword="XmlNode" /> that matches the
   XPath expression.</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <returns>
        <para>The first <see langword="XmlNode" /> that matches the
   XPath query or <see langword="null" /> if no matching node is found.</para>
      </returns>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>
        <para>Selects the first <see langword="XmlNode" /> that matches the XPath
   expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager" />
   .</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <param name=" nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression.</param>
      <returns>
        <para>The first <see langword="XmlNode" />
that matches the XPath query or <see langword="null" /> if no matching node is
found.</para>
      </returns>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the <see langword="XmlNamespaceManager" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>
        <para>Selects a list of nodes matching the XPath
      expression.</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes
   matching the XPath query.</para>
      </returns>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>
        <para>Selects a list of nodes matching the XPath expression.
      Any prefixes found in the XPath expression are resolved using the supplied
   <see cref="T:System.Xml.XmlNamespaceManager" /> .</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <param name=" nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath
   query.</para>
      </returns>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the <see langword="XmlNamespaceManager" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
        <para>Inserts the specified node immediately before the specified reference node.</para>
      </summary>
      <param name="newChild">The <see langword="XmlNode" /> to insert.</param>
      <param name="refChild">The <see langword="XmlNode" /> that is the reference node. The <paramref name="newChild" /> is placed before this node.</param>
      <returns>
        <para>The node being inserted.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.</para>
        <para>The <paramref name="newChild" /> is an ancestor of this node.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The <paramref name="newChild" /> was created from a different document than the one that created this node.</para>
        <para>The <paramref name="refChild" /> is not a child of this node.</para>
        <para>This node is read-only.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
        <para>Inserts the specified node immediately after the specified reference node.</para>
      </summary>
      <param name="newChild">The <see langword="XmlNode" /> to insert.</param>
      <param name="refChild">The <see langword="XmlNode" /> that is the reference node. The <paramref name="newNode" /> is placed after the <paramref name="refNode" /> .</param>
      <returns>
        <para>The node being inserted.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.</para>
        <para>The <paramref name="newChild" /> is an ancestor of this node.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The <paramref name="newChild" /> was created from a different document than the one that created this node.</para>
        <para>The <paramref name="refChild" /> is not a child of this node.</para>
        <para>This node is read-only.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
        <para>Replaces the child node <paramref name="oldChild" />
with <paramref name="newChild" /> node.</para>
      </summary>
      <param name="newChild">The new node to put in the child list.</param>
      <param name="oldChild">The node being replaced in the list.</param>
      <returns>
        <para>The node replaced.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.</para>
        <para>The <paramref name="newChild" /> is an ancestor of this node.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The <paramref name="newChild" /> was created from a different document than the one that created this node.</para>
        <para>This node is read-only.</para>
        <para>The <paramref name="oldChild" /> is not a child of this node.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>
        <para>Removes specified child node.</para>
      </summary>
      <param name="oldChild">The node being removed.</param>
      <returns>
        <para>The node removed.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="oldChild" /> is not a child of this node. Or this node is read-only.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>
        <para>Adds the specified node to the beginning of the list of child nodes for
      this node.</para>
      </summary>
      <param name="newChild">The node to add. If it is an <see cref="T:System.Xml.XmlDocumentFragment" /> , the entire contents of the document fragment are moved into the child list of this node.</param>
      <returns>
        <para>The node added.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.</para>
        <para>The <paramref name="newChild" /> is an ancestor of this node.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The <paramref name="newChild" /> was created from a different document than the one that created this node.</para>
        <para> This node is read-only.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>
        <para>Adds the specified node to the end of the list of child nodes, of
      this node.</para>
      </summary>
      <param name="newChild">The node to add. If it is a <see cref="T:System.Xml.XmlDocumentFragment" /> , the entire contents of the document fragment are moved into the child list of this node.</param>
      <returns>
        <para>The node added.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.</para>
        <para>The <paramref name="newChild" /> is an ancestor of this node.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The <paramref name="newChild" /> was created from a different document than the one that created this node.</para>
        <para>This node is read-only.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, creates a duplicate of the node.</para>
      </summary>
      <param name="deep">
        <see langword="true" />to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">Calling this method on a node type that cannot be cloned.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>
        <para> Puts all XmlText nodes in the full depth of the sub-tree underneath
      this XmlNode into a "normal" form where only markup
      (that is, tags, comments, processing instructions, CDATA sections,
      and entity references) separates XmlText nodes, that is, there
      are no adjacent XmlText nodes.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>
        <para> Test if the DOM implementation implements a specific feature.
      </para>
      </summary>
      <param name="feature">The package name of the feature to test. This name is not case-sensitive. </param>
      <param name="version"> This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
      <returns>
        <para>
          <see langword="true" /> if the feature is implemented in the specified version;
   otherwise, <see langword="false" />.
   The following table describes the combinations that
   return <see langword="true" />.
   </para>
        <list type="table">
          <listheader>
            <term> Feature</term>
            <description> Version</description>
          </listheader>
          <item>
            <term> XML</term>
            <description> 1.0</description>
          </item>
          <item>
            <term> XML</term>
            <description>2.0</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>
        <para> Provides support for the for each style iteration over
      the nodes in the <see langword="XmlNode" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>When overridden in a derived class, saves the current node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>When overridden in a derived class, saves all the child nodes of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>
        <para>Removes all the child nodes and/or attributes
      of the current node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>
        <para>Looks up the closest xmlns declaration for the given
      prefix that is in scope for the current node and returns
      the namespace URI in the declaration.</para>
      </summary>
      <param name="prefix">Prefix whose namespace URI you want to find.</param>
      <returns>
        <para>The namespace URI of the specified prefix.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>
        <para>Looks up the closest xmlns declaration for the given namespace
      URI that is in scope for the current node and returns
      the prefix defined in that declaration.</para>
      </summary>
      <param name="namespaceURI">Namespace URI whose prefix you want to find.</param>
      <returns>
        <para>The prefix for the specified namespace URI.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>
        <para>When overridden in a derived class, gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">Setting the value of a node that is read-only.</exception>
      <exception cref="T:System.InvalidOperationException">Setting the value of a node that is not supposed to have a value (for example, an Element node).</exception>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>
        <para>When overridden in a derived class, gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>
        <para>Gets the parent of this node (for nodes that can have
      parents).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>
        <para>Gets all the child nodes of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>
        <para>Gets
      the node immediately preceding this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>
        <para>Gets
      the node immediately following this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>
        <para>Gets an <see cref="T:System.Xml.XmlAttributeCollection" />
containing the attributes
of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>
        <para>Gets the first child of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>
        <para>Gets the last child of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>
        <para>Gets a value indicating whether this node has any child nodes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>
        <para>Gets the namespace URI of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>
        <para>Gets or sets the namespace prefix of this node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">This node is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <para>The specified prefix contains an illegal character.</para>
        <para>The specified prefix is malformed.</para>
        <para>The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".</para>
        <para>This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".</para>
        <para> This node is an attribute and the qualifiedName of this node is "xmlns". </para>
      </exception>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>
        <para> When overridden in a derived class, gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the node is read-only.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>
        <para>Gets or sets the concatenated values of the node and all
      its child nodes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>
        <para>Gets the markup representing
      this node and all its child nodes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>
        <para>Gets or sets the markup representing
      only the child nodes of this node.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">Setting this property on a node that cannot have child nodes.</exception>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed.</exception>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>
        <para> Gets the first child element with the specified
   <see cref="P:System.Xml.XmlNode.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the element to retrieve.</param>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>
        <para> Gets the first child element with the
      specified <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
      .</para>
      </summary>
      <param name="localname">The local name of the element.</param>
      <param name=" ns">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself </param>
      <returns>
        <para>The duplicate node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>
        <para>Gets the parent of this node. For
   <see langword="XmlAttribute" /> nodes, this property always returns 
   <see langword="null" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>
        <para>Gets the namespace URI of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>
        <para>Gets or sets the namespace prefix of this node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">This node is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <para> The specified prefix contains an illegal character.</para>
        <para>The specified prefix is malformed.</para>
        <para>The namespaceURI of this node is <see langword="null" /> .</para>
        <para>The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".</para>
        <para>This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".</para>
        <para>This node is an attribute and the qualifiedName of this node is "xmlns" [Namespaces]. </para>
      </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">The node is read-only and a set operation is called.</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>
        <para>Gets or sets the concatenated values of the node and all
      its children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>
        <para>Gets a value indicating whether the attribute value was
      explicitly set.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlElement" /> to which the attribute
   belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>
        <para> Gets or sets the markup representing
      the children of this node.</para>
      </summary>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed.</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>
        <para>Gets the base URI of the node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>
        <para> Represents a collection of attributes that can be accessed by name or
      index.
      </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>
        <para> Represents a
      collection of nodes that can be accessed by name or index.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>
        <para>Retrieves an <see cref="T:System.Xml.XmlNode" />
specified by name.</para>
      </summary>
      <param name="name">The qualified name of the node to retrieve. It is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node.</param>
      <returns>
        <para>An <see langword="XmlNode" /> with 
   the specified name or <see langword="null" /> if a matching node is
   not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property</para>
      </summary>
      <param name="node">An <see langword="XmlNode" /> to store in the <see langword="XmlNamedNodeMap" /> . If a node with that name is already present in the map, it is replaced by the new one.</param>
      <returns>
        <para>If the <paramref name="node" /> replaces an
   existing node with the same name, the old node is returned;
   otherwise, <see langword="null" />
   is returned.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="node " />was created from a different <see cref="T:System.Xml.XmlDocument" /> than the one that created the <see langword="XmlNamedNodeMap" />; or the <see langword="XmlNamedNodeMap" /> is read-only.</exception>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>
        <para>Removes the node from the
   <see langword="XmlNamedNodeMap" /> .</para>
      </summary>
      <param name="name">The qualified name of the node to remove. The name is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node.</param>
      <returns>
        <para>The <see langword="XmlNode" /> removed from this
<see langword="XmlNamedNodeMap" /> or <see langword="null" /> if a 
   matching node was
   not found. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>
        <para>Retrieves the node at the specified index in the
   <see langword="XmlNamedNodeMap" />
   .</para>
      </summary>
      <param name="index">The index position of the node to retrieve from the <see langword="XmlNamedNodeMap" /> . The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1.</param>
      <returns>
        <para>The <see cref="T:System.Xml.XmlNode" /> at the specified index. If <paramref name="index" /> is less than 0 or
   greater than or equal to the <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
   property, <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>
        <para>Retrieves a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="localName">The local name of the node to retrieve.</param>
      <param name=" namespaceURI">The namespace URI of the node to retrieve.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNode" /> with 
   the matching local name and namespace URI or <see langword="null" /> if a
   matching node was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>
        <para> Removes a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" />
and <see cref="P:System.Xml.XmlNode.NamespaceURI" /> .</para>
      </summary>
      <param name="localName">The local name of the node to remove.</param>
      <param name=" namespaceURI">The namespace URI of the node to remove.</param>
      <returns>
        <para>The <see cref="T:System.Xml.XmlNode" /> removed or
<see langword="null" /> if a matching node was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>
        <para>Provides support for the "foreach" style iteration over 
      the collection of nodes in the <see langword="XmlNamedNodeMap" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>
        <para>Gets the number of nodes in the
   <see langword="XmlNamedNodeMap" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>
        <para>Adds a <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property</para>
      </summary>
      <param name="node">An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection.</param>
      <returns>
        <para>If the <paramref name="node" /> replaces an 
   existing node with the same name, the old node is returned; otherwise, the added
   node
   is returned.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="node" /> was created from a different <see cref="T:System.Xml.XmlDocument" /> than the one that created this collection.</para>
        <para>This <see langword="XmlAttributeCollection" /> is read-only.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is an <see cref="T:System.Xml.XmlAttribute" /> that is already an attribute of another <see cref="T:System.Xml.XmlElement" /> object. To re-use attributes in other elements, you must clone the <see langword="XmlAttribute" /> objects you want to re-use.</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute as the first node in the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <returns>
        <para>The <see langword="XmlAttribute" />
added to the collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute as the last node in the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to
   append to the collection.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> was created from a document different from the one that created this collection.</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute immediately before the specified reference attribute.</para>
      </summary>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed before the <paramref name="refNode" /> .</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to insert into the
   collection.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="newNode" /> was created from a document different from the one that created this collection. Or the<paramref name=" refNode " />is not a member of this collection.</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute immediately after the specified reference attribute.</para>
      </summary>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed after the <paramref name="refNode" /> .</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to
   insert into the collection.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="newNode" /> was created from a document different from the one that created this collection. Or the<paramref name=" refNode " />is not a member of this collection.</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>
        <para> Removes the specified attribute from the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to remove.</param>
      <returns>
        <para>The node removed
      or <see langword="null" /> if it is not found in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the attribute corresponding to the specified index from the collection.</para>
      </summary>
      <param name="i">The index of the node to remove. The first node has index 0.</param>
      <returns>
        <para>Returns <see langword="null" /> if
   there is no attribute at the specified index.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>
        <para>Removes all attributes from the collection.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>
        <para> Copies all the <see cref="T:System.Xml.XmlAttribute" /> objects from
   this collection into the given array.</para>
      </summary>
      <param name="array">The array that is the destination of the objects copied from this collection.</param>
      <param name=" index">The index in <paramref name="array" /> where copying begins. </param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>
        <para>Gets the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>
        <para>Gets the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>
        <para>Gets the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>
        <para>Represents a CDATA section.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>
   Provides text manipulation methods that are used by
   several classes.
</summary>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>
        <para>Gets the node immediately preceding or following this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>
        <para>Gets the node immediately preceding this
      node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>
        <para>Gets the node immediately following this
      node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>
        <para> Retrieves a substring, of the full string, from the specified range.
      </para>
      </summary>
      <param name="offset">The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data. </param>
      <param name=" count">The number of characters to retrieve. </param>
      <returns>
   The substring corresponding to the
   specified range.
</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>
        <para> Appends the specified string to the end of the character
      data of the node.
      </para>
      </summary>
      <param name="strData">The string to insert into the existing string. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>
        <para> Insert the specified string at the specified character offset.
      </para>
      </summary>
      <param name="offset">The position within the string to insert the supplied string data. </param>
      <param name="strData">The string data that is to be inserted into the existing string. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>
        <para>Remove a range of characters from the node.</para>
      </summary>
      <param name="offset">The position within the string to start deleting. </param>
      <param name=" count">The number of characters to delete. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>
        <para>Replace the specified number of characters starting at the specified offset with the
      specified string.</para>
      </summary>
      <param name="offset">The position within the string to start replacing. </param>
      <param name=" count">The number of characters to replace. </param>
      <param name="strData">The new data that replaces the old string data. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">Node is read-only.</exception>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>
        <para> Gets or sets the concatenated values of the node and all the children
      of the node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>
        <para> Contains the data of the node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>
        <para>Gets the length of the data, in characters.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content .</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>
        <para>Represents an ordered collection of nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>
        <para>Retrieves a node at the given index.</para>
      </summary>
      <param name="index">Zero-based index into the list of nodes.</param>
      <returns>
        <para>The <see cref="T:System.Xml.XmlNode" /> in the collection. If <paramref name="index" /> is greater
   than or equal to the number of nodes in the list, this returns
<see langword="null" />
.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>
        <para>Provides a simple "foreach" style iteration over the 
      collection of nodes in the <see langword="XmlNodeList" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>
        <para>Gets the number of nodes in the 
   <see langword="XmlNodeList" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>
        <para>Retrieves a node at the given index.</para>
      </summary>
      <param name="i">Zero-based index into the list of nodes.</param>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>
        <para> Represents the content of an XML comment.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> . Because comment 
      nodes do not have children this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>
        <para>Encodes and decodes XML names and provides methods for
      converting between common language runtime types and XML Schema definition
      language (XSD) types. When converting data types the values returned are locale independent.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>
        <para> Converts the
      name to a valid XML name.</para>
      </summary>
      <param name="name">A name to be translated.</param>
      <returns>
        <para>Returns the name with any invalid characters replaced by
      an escape string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>
        <para> Verifies the
      name is valid according to the XML specification.</para>
      </summary>
      <param name="name">The name to be encoded.</param>
      <returns>
        <para>The encoded name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>
        <para> Converts the name to a valid XML local name.</para>
      </summary>
      <param name="name">The name to be encoded.</param>
      <returns>
        <para>The encoded name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>
        <para> Decodes a name. This method does the reverse of
      the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> methods.</para>
      </summary>
      <param name="name">The name to be transformed.</param>
      <returns>
        <para>The decoded name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>
        <para> Verifies that the name is a valid name according
      to the W3C Extended Markup Language recommendation.</para>
      </summary>
      <param name="name">The name to verify.</param>
      <returns>
        <para>The name, if it is a valid XML name.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid XML name.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>
        <para>Verifies that the name is a valid NCName according to
      the W3C Extended Markup Language recommendation.</para>
      </summary>
      <param name="name">The name to verify.</param>
      <returns>
        <para>The name, if it is a valid NCName.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" /> or String.Empty.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid NCName.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>
        <para>Converts the <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the <see langword="Boolean" />,
   that is, "true" or "false".</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>
        <para>Converts the <see cref="T:System.Char" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the <see langword="Char" /> 
.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>
        <para>Converts the <see cref="T:System.Decimal" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the 
   <see langword="Decimal" /> 
   .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>
        <para>Converts the <see cref="T:System.SByte" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="SByte" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>
        <para>Converts the <see cref="T:System.Int16" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Int16" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>
        <para>Converts the <see cref="T:System.Int32" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
      <see langword="Int32" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>
        <para>Converts the <see cref="T:System.Int64" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Int64" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>
        <para>Converts the <see cref="T:System.Byte" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Byte" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>
        <para>Converts the <see cref="T:System.UInt16" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="UInt16" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>
        <para>Converts the <see cref="T:System.UInt32" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="UInt32" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>
        <para>Converts the <see cref="T:System.UInt64" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
   A string representation of the
<see langword="UInt64" />.
</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>
        <para>Converts the <see cref="T:System.Single" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Single" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>
        <para>Converts the <see cref="T:System.Double" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Double" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>
        <para>Converts the <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="TimeSpan" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>
        <para>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
      <see langword="DateTime" /> in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>
        <para>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <param name=" format">The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
      <returns>
        <para>A string representation of the
   <see langword="DateTime" /> in the specified format.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>
        <para>Converts the <see cref="T:System.Guid" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
      <see langword="Guid" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Boolean" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Boolean" /> value,
   that is,
<see langword="true" /> or <see langword="false" />.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a <see langword="Boolean" /> value.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Char" /> equivalent.</para>
      </summary>
      <param name="s">The string containing a single character to convert.</param>
      <returns>
        <para>A <see langword="Char" /> 
representing the single character.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter contains more than one character.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Decimal" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Decimal" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" qualify="true" /> or greater than <see cref="F:System.Decimal.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.SByte" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="SByte" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" qualify="true" /> or greater than <see cref="F:System.SByte.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int16" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="Int16" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" qualify="true" /> or greater than <see cref="F:System.Int16.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int32" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="Int32" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" qualify="true" /> or greater than <see cref="F:System.Int32.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int64" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="Int64" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" qualify="true" /> or greater than <see cref="F:System.Int64.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Byte" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Byte" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" qualify="true" /> or greater than <see cref="F:System.Byte.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt16" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="UInt16" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" qualify="true" /> or greater than <see cref="F:System.UInt16.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt32" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="UInt32" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" qualify="true" /> or greater than <see cref="F:System.UInt32.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt64" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="UInt64" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt64.MinValue" qualify="true" /> or greater than <see cref="F:System.UInt64.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Single" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Single" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" qualify="true" /> or greater than <see cref="F:System.Single.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Double" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Double" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" qualify="true" /> or greater than <see cref="F:System.Double.MaxValue" qualify="true" />.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="TimeSpan" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in correct format to represent a <see langword="TimeSpan" /> value.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="DateTime" />
equivalent of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string or is not in the correct format.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <param name=" format">The format structure to apply to the converted <see langword="DateTime" />. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format.</param>
      <returns>
        <para>A <see langword="DateTime" /> equivalent
   of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <para>
          <paramref name="s" /> or <paramref name="format" /> is String.Empty</para>
        <para>-or-</para>
        <para>
          <paramref name="s" /> does not contain a data and time that corresponds to <paramref name="format" />.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <param name=" formats">An array containing the format structures to apply to the converted <see langword="DateTime" /> . Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets.</param>
      <returns>
        <para>A <see langword="DateTime" /> equivalent
   of the string.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s " />is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <para>
          <paramref name="s" /> or an element of <paramref name="formats" /> is String.Empty</para>
        <para>-or-</para>
        <para>
          <paramref name="s " />does not contain a date and time that corresponds to any of the elements of <paramref name="formats" />.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Guid" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Guid" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>
        <para>Represents the XML declaration node: &lt;?xml version='1.0' ...?&gt;. </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. Because <see langword="XmlDeclaration" /> nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para> Saves the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>Because <see langword="XmlDeclaration" /> nodes 
   do not have children, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>
        <para> Gets the
      XML version of the document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>
        <para>Gets or sets the encoding level of the XML
      document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>
        <para>Gets or sets the value of the standalone attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>
        <para>Gets or sets the value of the
 <see langword="XmlDeclaration" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>
        <para> Gets or sets the concatenated values of the
 <see langword="XmlDeclaration" />
 .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>
        <para> Represents an XML
      document.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlDocument" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="XmlDocument" /> class with the specified <see cref="T:System.Xml.XmlNameTable" /> 
   .</para>
      </summary>
      <param name="nt">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>
        <para>Initializes a new instance of the <see langword="XmlDocument" /> class with the 
   specified <see cref="T:System.Xml.XmlImplementation" /> .</para>
      </summary>
      <param name="imp">The <see langword="XmlImplementation" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" />to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned <see langword="XmlDocument" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlDocument.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute. If the name contains a colon, the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the first colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name following the first colon. The <see cref="P:System.Xml.XmlNode.NamespaceURI" /> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case <see langword="NamespaceURI" /> has a value of http://www.w3.org/2000/xmlns/ . </param>
      <returns>
        <para>The new <see langword="XmlAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlCDataSection" /> containing the specified data.</para>
      </summary>
      <param name="data">The content of the new <see langword="XmlCDataSection" /> .</param>
      <returns>
        <para>The new <see langword="XmlCDataSection" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlComment" /> containing the specified data.</para>
      </summary>
      <param name="data">The content of the new <see langword="XmlComment" /> .</param>
      <returns>
        <para>The new <see langword="XmlComment" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Returns a new <see cref="T:System.Xml.XmlDocumentType" /> object.</para>
      </summary>
      <param name="name">Name of the document type.</param>
      <param name="publicId">The public identifier of the document type or <see langword="null" /> .</param>
      <param name="systemId">The system identifier of the document type or <see langword="null" /> .</param>
      <param name="internalSubset">The DTD internal subset of the document type or <see langword="null" /> .</param>
      <returns>
        <para>The new <see langword="XmlDocumentType" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlDocumentFragment" /> .</para>
      </summary>
      <returns>
        <para>The new <see langword="XmlDocumentFragment" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>
        <para>Creates an element with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'.</param>
      <returns>
        <para>The new <see langword="XmlElement" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</para>
      </summary>
      <param name="name">The name of the entity reference.</param>
      <returns>
        <para>The new <see langword="XmlEntityReference" /> .</para>
      </returns>
      <exception cref="T:System.ArgumentException">The name is invalid (for example, names starting with'#' are invalid.)</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlProcessingInstruction" /> with the specified
   name and data.</para>
      </summary>
      <param name="target">The name of the processing instruction.</param>
      <param name="data">The data for the processing instruction.</param>
      <returns>
        <para>The new <see langword="XmlProcessingInstruction" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlDeclaration" /> node with the specified values. </para>
      </summary>
      <param name="version">The version must be "1.0".</param>
      <param name=" encoding">
        <para>The value of the encoding attribute. This is the encoding that is used when you save the <see cref="T:System.Xml.XmlDocument" /> to a file or a stream; therefore, it must be set to a string supported by the <see cref="T:System.Text.Encoding" /> class, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> fails. If this is <see langword="null" /> or String.Empty, the <see langword="Save" /> method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used. </para>
        <para>
          <SpecialLocalizableItem kind="UIElement">Note: </SpecialLocalizableItem> If the <see langword="XmlDocument" /> is saved to either a <see cref="T:System.IO.TextWriter" /> or an <see cref="T:System.Xml.XmlTextWriter" />, this encoding value is discarded. Instead, the encoding of the <see langword="TextWriter" /> or the <see langword="XmlTextWriter" /> is used. This ensures that the XML written out can be read back using the correct encoding.</para>
      </param>
      <param name=" standalone">The value must be either "yes" or "no". If this is <see langword="null" /> or String.Empty, the <see langword="Save" /> method does not write a standalone attribute on the XML declaration.</param>
      <returns>
        <para>The new <see langword="XmlDeclaration" /> node.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The values of <paramref name="version" /> or <paramref name="standalone" /> are something other than the ones specified above.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlText" /> with the specified text.</para>
      </summary>
      <param name="text">The text for the Text node.</param>
      <returns>
        <para>The new <see langword="XmlText" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlSignificantWhitespace" /> node.</para>
      </summary>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9;</param>
      <returns>
        <para>A new <see langword="XmlSignificantWhitespace" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>
        <para> Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> object
   for navigating this document.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> you want the navigator initially positioned on.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlWhitespace" /> node.</para>
      </summary>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9;</param>
      <returns>
        <para>A new <see langword="XmlWhitespace" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />
   .</para>
      </summary>
      <param name="name">The qualified name to match. It is matched against the <see langword="Name" /> property of the matching node. The special value "*" matches all tags.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified qualified
   name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
   .</para>
      </summary>
      <param name="qualifiedName">The qualified name of the attribute. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon.</param>
      <param name="namespaceURI">The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/ .</param>
      <returns>
        <para>The new <see langword="XmlAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlElement" /> with the qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="qualifiedName">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <returns>
        <para>The new <see langword="XmlElement" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlDocument.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
   .</para>
      </summary>
      <param name="localName">The LocalName to match. The special value "*" matches all tags.</param>
      <param name="namespaceURI">NamespaceURI to match.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlElement" /> with the
   specified ID.</para>
      </summary>
      <param name="elementId">The attribute ID to match.</param>
      <returns>
        <para>The <see langword="XmlElement" /> with
   the matching ID or <see langword="null" /> if no matching element is found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>
        <para>Imports a node from another document to the current document.</para>
      </summary>
      <param name="node">The node being imported.</param>
      <param name="deep">
        <see langword="true" />to perform a deep clone; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>The imported <see cref="T:System.Xml.XmlNode" /> .</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">Calling this method on a node type which cannot be imported.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlNode.Prefix" />,
<see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="prefix">The prefix of the attribute (if any). String.Empty and <see langword="null" /> are equivalent.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute (if any). String.Empty and <see langword="null" /> are equivalent. If <paramref name="prefix" /> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown.</param>
      <returns>
        <para>The new <see langword="XmlAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Creates a default attribute with the specified prefix,
      local name and namespace URI.</para>
      </summary>
      <param name="prefix">The prefix of the attribute (if any).</param>
      <param name=" localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute (if any).</param>
      <returns>
        <para>The new <see cref="T:System.Xml.XmlAttribute" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>
        <para>Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />,
<see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="prefix">The prefix of the new element (if any). String.Empty and <see langword="null" /> are equivalent.</param>
      <param name=" localName">The local name of the new element.</param>
      <param name=" namespaceURI">The namespace URI of the new element (if any). String.Empty and <see langword="null" /> are equivalent.</param>
      <returns>
        <para> The new <see cref="T:System.Xml.XmlElement" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />,
<see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" /> .</para>
      </summary>
      <param name="type">The <see langword="XmlNodeType" /> of the new node.</param>
      <param name=" prefix">The prefix of the new node.</param>
      <param name=" name">The local name of the new node.</param>
      <param name=" namespaceURI">The namespace URI of the new node.</param>
      <returns>
        <para>The new <see langword="XmlNode" /> .</para>
      </returns>
      <exception cref="T:System.ArgumentException">The name was not provided and the <see langword="XmlNodeType" /> requires a name.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified node type, <see cref="P:System.Xml.XmlDocument.Name" />,
   and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
   .</para>
      </summary>
      <param name="nodeTypeString">String version of the <see cref="T:System.Xml.XmlNodeType" /> of the new node. This parameter must be one of the values listed in the table below.</param>
      <param name=" name">The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components.</param>
      <param name=" namespaceURI">The namespace URI of the new node.</param>
      <returns>
        <para>The new <see langword="XmlNode" /> .</para>
      </returns>
      <exception cref="T:System.ArgumentException">The name was not provided and the <see langword="XmlNodeType" /> requires a name; or <paramref name="nodeTypeString" /> is not one of the strings listed below.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />,
<see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="type">The <see langword="XmlNodeType" /> of the new node.</param>
      <param name=" name">The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components.</param>
      <param name=" namespaceURI">The namespace URI of the new node.</param>
      <returns>
        <para>The new <see langword="XmlNode" /> .</para>
      </returns>
      <exception cref="T:System.ArgumentException">The name was not provided and the <see langword="XmlNodeType" /> requires a name.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlNode" /> object based on the information in
   the <see cref="T:System.Xml.XmlReader" /> .
   The reader must be positioned on a node or attribute.</para>
      </summary>
      <param name="reader">The XML source</param>
      <returns>
        <para>The new <see langword="XmlNode" /> or <see langword="null" /> if no more nodes exist.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity).</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>
        <para>Loads the XML document from the specified URL.</para>
      </summary>
      <param name="filename">URL for the file containing the XML document to load.</param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>
        <para>Loads the XML document from the specified stream.</para>
      </summary>
      <param name="inStream">The stream containing the XML document to load.</param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>
        <para>Loads the XML document from the specified <see cref="T:System.IO.TextReader" /> .</para>
      </summary>
      <param name="txtReader">The <see langword="TextReader" /> used to feed the XML data into the document.</param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>
        <para>Loads the XML document from the specified <see cref="T:System.Xml.XmlReader" /> .</para>
      </summary>
      <param name="reader">The <see langword="XmlReader" /> used to feed the XML data into the document.</param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>
        <para>Loads the XML document from the specified string.</para>
      </summary>
      <param name="xml">String containing the XML document to load.</param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>
        <para>Saves the XML document to the specified file.</para>
      </summary>
      <param name="filename">The location of the file where you want to save the document.</param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>
        <para>Saves the XML document to the specified stream.</para>
      </summary>
      <param name="outStream">The stream to which you want to save.</param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>
        <para>Saves the XML document to the specified <see cref="T:System.IO.TextWriter" /> .</para>
      </summary>
      <param name="writer">The <see langword="TextWriter" /> to which you want to save.</param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the XML document to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the <see langword="XmlDocument" /> node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the
   <see langword="XmlDocument" /> node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="xw">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>
        <para> Gets the type of the current node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>
        <para>Gets the node containing the DOCTYPE declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>
        <para> Gets the <see cref="T:System.Xml.XmlImplementation" /> object for the current document.
   </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>
        <para> Gets the qualified name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>
        <para> Gets the local name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>
        <para>Gets the root <see cref="T:System.Xml.XmlElement" /> for the document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which the current node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>
        <para>Sets the <see cref="T:System.Xml.XmlResolver" /> to use for resolving external
   resources.</para>
      </summary>
      <exception cref="T:System.Xml.XmlException">This property is set to <see langword="null" /> and an external DTD or entity is encountered.</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
   implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>
        <para>Gets or sets a value indicating whether to preserve white space.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the current node is read-only.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>
        <para>Gets or sets the markup representing the children
      of the current node.</para>
      </summary>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed.</exception>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>
        <para>Occurs when a node belonging to this document is
      about to be inserted into another node.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>
        <para>Occurs when a node belonging to this
      document has been inserted into another node.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>
        <para> Occurs when a node belonging to this document
      is about to be removed from the document.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>
        <para>Occurs when a node belonging to this
      document has been removed from its parent.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>
        <para> Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node
   belonging to this document is about to be changed.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>
        <para>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node
   belonging to this document has been changed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>
        <para> Represents a lightweight object that is useful for tree insert
      operations.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
      <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>
        <para> Gets the local name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>
        <para>Gets the parent of this node (for nodes that can have
      parents).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>
        <para> Gets or sets the markup representing
      the children of this node.</para>
      </summary>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed.</exception>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>
        <para> Represents the document type declaration.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" />. For <see langword="XmlDocumentType" /> nodes, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>
        <para> Gets the local name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>
        <para>Gets the collection of <see cref="T:System.Xml.XmlEntity" /> nodes declared in the document type declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>
        <para>Gets the collection of <see cref="T:System.Xml.XmlNotation" /> nodes present in the document type declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>
        <para>
       Gets
       the value of the public identifier on the DOCTYPE declaration.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>
        <para>
       Gets the value of
       the system identifier on the DOCTYPE declaration.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>
        <para> Gets the value of the DTD internal subset
 on the DOCTYPE
 declaration.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>
        <para> Represents a writer that provides a fast, non-cached, forward-only way
      of generating streams or files containing XML data that conforms to the
      W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML
      recommendations.
      </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>
        <para> Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>
        <para> When overridden in a derived class, writes the XML declaration with the version "1.0".</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>
        <para> When overridden in a derived class, writes the XML declaration with the version "1.0" and the
      standalone attribute.</para>
      </summary>
      <param name="standalone">If <see langword="true" />, it writes "standalone=yes"; if <see langword="false" />, it writes "standalone=no".</param>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>
        <para>When overridden in a derived class, closes any open elements or attributes and
      puts the writer back in the Start state.</para>
      </summary>
      <exception cref="T:System.ArgumentException">The XML document is invalid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes the DOCTYPE declaration with the specified name
      and optional attributes.</para>
      </summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
      <param name="sysid">If pubid is <see langword="null" /> and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
      <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element).</exception>
      <exception cref="T:System.ArgumentException">The value for <paramref name="name " /> would result in invalid XML.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes the specified start tag and associates it with the
      given namespace.</para>
      </summary>
      <param name="localName">
        <para> The local name of the element.</para>
      </param>
      <param name="ns">
        <para> The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</para>
      </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes the specified start tag and
      associates it with the given namespace and prefix.</para>
      </summary>
      <param name="prefix">The namespace prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="ns">The namespace URI to associate with the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a start tag with the specified local name.</para>
      </summary>
      <param name="localName">The local name of the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>
        <para>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">This results in an invalid XML document.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>
        <para>When overridden in a derived class, closes one element and pops the
      corresponding namespace scope.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and
      value.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI to associate with the attribute.</param>
      <param name=" value">The value of the attribute.</param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed.</exception>
      <exception cref="T:System.ArgumentException">The <see langword="xml:space" /> or <see langword="xml:lang" /> attribute value is invalid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the attribute with the specified local name and value.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" value">The value of the attribute.</param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed.</exception>
      <exception cref="T:System.ArgumentException">The <see langword="xml:space" /> or <see langword="xml:lang" /> attribute value is invalid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the attribute with the specified prefix, local
      name, namespace URI, and value.</para>
      </summary>
      <param name="prefix">The namespace prefix of the attribute.</param>
      <param name=" localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI of the attribute.</param>
      <param name=" value">The value of the attribute.</param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed.</exception>
      <exception cref="T:System.ArgumentException">The <see langword="xml:space" /> or <see langword="xml:lang" /> attribute value is invalid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes the start of an attribute.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes the start of an attribute.</para>
      </summary>
      <param name="prefix">The namespace prefix of the attribute.</param>
      <param name=" localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI for the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>
        <para>When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
call.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing
      the specified text.</para>
      </summary>
      <param name="text">The text to place inside the CDATA block.</param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing
      the specified text.</para>
      </summary>
      <param name="text">Text to place inside the comment.</param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a processing instruction with a space between
      the name and text as follows: &lt;?name text?&gt;.</para>
      </summary>
      <param name="name">The name of the processing instruction.</param>
      <param name=" text">The text to include in the processing instruction.</param>
      <exception cref="T:System.ArgumentException">
        <para> The text would result in a non-well formed XML document.</para>
        <para>
          <paramref name="name" /> is either <see langword="null" /> or String.Empty.</para>
        <para>This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> has already been called. </para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out an entity 
      reference as <see langword="&amp;name;" /> .</para>
      </summary>
      <param name="name">The name of the entity reference.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is either <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>
        <para>When overridden in a derived class, forces the
      generation of a character entity for the specified Unicode character value.</para>
      </summary>
      <param name="ch">The Unicode character for which to generate a character entity.</param>
      <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, <see langword="0xd800" /> - <see langword="0xdfff" />. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the given white space.</para>
      </summary>
      <param name="ws">The string of white space characters.</param>
      <exception cref="T:System.ArgumentException">The string contains non-white space characters.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>
        <para> When overridden in a derived class, writes the given text content.</para>
      </summary>
      <param name="text">The text to write.</param>
      <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
        <para>When overridden in a derived class, generates and writes the surrogate character entity
      for the surrogate character pair.</para>
      </summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name=" highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
      <exception cref="T:System.Exception">An invalid surrogate character pair was passed.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, writes text one buffer at a time.</para>
      </summary>
      <param name=" buffer">Character array containing the text to write.</param>
      <param name="index">The position in the buffer indicating the start of the text to write.</param>
      <param name="count">The number of characters to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, writes raw markup manually from a character buffer.
      </para>
      </summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>
        <para>When overridden in a derived class, writes raw markup manually from a string.</para>
      </summary>
      <param name="data">String containing the text to write.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, encodes the specified binary bytes as base64 and writes out
      the resulting text.</para>
      </summary>
      <param name="buffer">Byte array to encode.</param>
      <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
      <param name="count">The number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, encodes the specified binary bytes as binhex and writes out
      the resulting text.
      </para>
      </summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>
        <para>When overridden in a derived class, closes this stream and the underlying stream.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">A call is made to write more output after <see langword="Close" /> has been called or the result of this call is an invalid XML document.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>
        <para>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the
 underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>
        <para> When overridden in a derived class, returns the closest prefix defined in the
      current namespace scope for the namespace URI.</para>
      </summary>
      <param name="ns">The namespace URI whose prefix you want to find.</param>
      <returns>
        <para>The matching prefix or <see langword="null" /> if no matching namespace URI is found in the current scope.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> is either <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to
 the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
      </summary>
      <param name="name">The name to write.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name " />is not a valid NmToken; or <paramref name="name" /> is either <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to
 the W3C XML 1.0 recommendation
 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
      </summary>
      <param name="name">The name to write.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="name " />is not a valid XML name; or <paramref name="name" /> is either <see langword="null" /> or String.Empty.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix
 that is in scope for the given namespace.</para>
      </summary>
      <param name="localName">The local name to write.</param>
      <param name=" ns">The namespace URI for the name.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="localName" /> is either <see langword="null" /> or String.Empty.</para>
        <para>
          <paramref name="localName" /> is not a valid name.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <para> When overridden in a derived class, writes out all the attributes found at the
      current position in the <see cref="T:System.Xml.XmlReader" />
      .</para>
      </summary>
      <param name="reader">The <see langword="XmlReader" /> from which to copy the attributes.</param>
      <param name="defattr">
        <see langword="true" /> to copy the default attributes from the <see langword="XmlReader" /> ; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException"> The reader is not positioned on an element, attribute or XmlDeclaration node.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, copies everything from the reader to the writer and
      moves the reader to the start of the next
      sibling.</para>
      </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="defattr">
        <see langword="true" /> to copy the default attributes from the <see langword="XmlReader" /> ; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes an element with the specified local name and value.</para>
      </summary>
      <param name="localName">The local name of the element.</param>
      <param name=" value">The value of the element.</param>
      <exception cref="T:System.InvalidOperationException">This results in an invalid XML document.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes an element with the specified local name, namespace URI, and value.</para>
      </summary>
      <param name="localName">The local name of the element.</param>
      <param name="ns">The namespace URI to associate with the element.</param>
      <param name=" value">The value of the element.</param>
      <exception cref="T:System.InvalidOperationException">This results in an invalid XML document.</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>
        <para>When overridden in a derived class, gets the state of the writer.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>
        <para> When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.
   </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>
        <para> When overridden in a derived class, gets the current xml:lang scope.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <para>Creates an instance of the <see langword="XmlTextWriter" /> class using the specified stream and
   encoding.</para>
      </summary>
      <param name="w">The stream to which you want to write.</param>
      <param name=" encoding">The encoding to generate. If encoding is <see langword="null" /> it writes out the stream as UTF-8 and omits the encoding attribute from the ProcessingInstruction.</param>
      <exception cref="T:System.ArgumentException">The encoding is not supported or the stream cannot be written to.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>
        <para>Creates an instance of the <see cref="T:System.Xml.XmlTextWriter" /> class using the specified file.</para>
      </summary>
      <param name="filename">The filename to write to. If the file exists, it will truncate it and overwrite it with the new content.</param>
      <param name=" encoding">The encoding to generate. If encoding is <see langword="null" /> it writes the file out as UTF-8, and omits the encoding attribute from the ProcessingInstruction.</param>
      <exception cref="T:System.ArgumentException">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
      <exception cref="T:System.ArgumentNullException">The filename is <see langword="null" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found.</exception>
      <exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
        <para> Creates an instance of the <see langword="XmlTextWriter" />
class using the specified <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="w">The <see langword="TextWriter" /> to write to. It is assumed that the <see langword="TextWriter" /> is already set to the correct encoding. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>
        <para> Writes the XML declaration with the
      version "1.0".</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>
        <para> Writes the XML declaration with the
      version "1.0" and the standalone attribute.</para>
      </summary>
      <param name="standalone">If <see langword="true" />, it writes "standalone=yes"; if <see langword="false" />, it writes "standalone=no".</param>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>
        <para>Closes any open elements or attributes and puts the
      writer back in the Start state.</para>
      </summary>
      <exception cref="T:System.ArgumentException">The XML document is invalid.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
        <para> Writes the DOCTYPE declaration with the specified name
      and optional attributes.</para>
      </summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
      <param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
      <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element).</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="name" /> is <see langword="null" /> or String.Empty</para>
        <para>-or-</para>
        <para>the value for <paramref name="name" /> would result in invalid XML.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
        <para> Writes the specified start tag and associates it with the given namespace
      and prefix.</para>
      </summary>
      <param name=" prefix">The namespace prefix of the element.</param>
      <param name="localName">
        <para> The local name of the element.</para>
      </param>
      <param name="ns">
        <para>The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer will automatically write that prefix also.</para>
      </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>
        <para>Closes one element and pops the corresponding namespace scope.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>
        <para>Closes one element and pops the corresponding namespace scope.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Writes the start of an attribute.</para>
      </summary>
      <param name=" prefix">Namespace prefix of the attribute.</param>
      <param name="localName">LocalName of the attribute.</param>
      <param name=" ns">NamespaceURI of the attribute</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is either <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>
        <para>Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" />
call.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>
        <para>Writes out a &lt;![CDATA[...]]&gt; block containing
      the specified text.</para>
      </summary>
      <param name="text">Text to place inside the CDATA block.</param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>
        <para>Writes out a comment &lt;!--...--&gt; containing
      the specified text.</para>
      </summary>
      <param name="text">Text to place inside the comment.</param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
        <para>Writes out a processing instruction with a space between
      the name and text as follows: &lt;?name text?&gt;.</para>
      </summary>
      <param name="name">Name of the processing instruction.</param>
      <param name=" text">Text to include in the processing instruction.</param>
      <exception cref="T:System.ArgumentException">
        <para> The text would result in a non-well formed XML document.</para>
        <para>
          <paramref name="name" /> is either <see langword="null" /> or String.Empty.</para>
        <para>This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> has already been called. </para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>
        <para>Writes out an entity reference as 
   <see langword="&amp;name;" /> .</para>
      </summary>
      <param name="name">Name of the entity reference.</param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document or <paramref name="name" /> is either <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>
        <para>Forces the
      generation of a character entity for the specified Unicode character value.</para>
      </summary>
      <param name="ch">Unicode character for which to generate a character entity.</param>
      <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, <see langword="0xd800" /> - <see langword="0xdfff" />; or the text would result in a non-well formed XML document.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>
        <para>Writes out the given white space.</para>
      </summary>
      <param name="ws">The string of white space characters.</param>
      <exception cref="T:System.ArgumentException">The string contains non-white space characters.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>
        <para> Writes the given text content.</para>
      </summary>
      <param name="text">Text to write.</param>
      <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
        <para> Generates and writes the surrogate character entity
      for the surrogate character pair.</para>
      </summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name=" highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
      <exception cref="T:System.Exception">An invalid surrogate character pair was passed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Writes text one buffer at a time.
      </para>
      </summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position in the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Writes raw markup manually from a character buffer.
      </para>
      </summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>
        <para>Writes raw markup manually from a string.</para>
      </summary>
      <param name="data">String containing the text to write.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Encodes the specified binary bytes as base64 and writes out
      the resulting text.</para>
      </summary>
      <param name="buffer">Byte array to encode.</param>
      <param name="index">The position within the buffer indicating the start of the bytes to write.</param>
      <param name="count">The number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Encodes the specified binary bytes as binhex and writes out
      the resulting text.
      </para>
      </summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>
        <para>Closes this stream and the underlying stream.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">A call is made to write more output after <see langword="Close" /> has been called or the result of this call is an invalid XML document.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>
        <para>Flushes whatever is in the buffer to the underlying streams and also flushes the
 underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>
        <para>Writes out the specified name, ensuring it is a valid 
 name according to the W3C XML 1.0 recommendation(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name
 ).</para>
      </summary>
      <param name="name">Name to write.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="name " />is not a valid XML name; or <paramref name="name" /> is either <see langword="null" /> or String.Empty.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
        <para> Writes out the namespace-qualified name. This method looks up the prefix
 that is in scope for the given namespace.</para>
      </summary>
      <param name="localName">The local name to write.</param>
      <param name=" ns">The namespace URI to associate with the name.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="localName" /> is either <see langword="null" /> or String.Empty.</para>
        <para>
          <paramref name="localName" /> is not a valid name according to the W3C Namespaces spec.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>
        <para> Returns the closest prefix defined in the
      current namespace scope for the namespace URI.</para>
      </summary>
      <param name="ns">Namespace URI whose prefix you want to find.</param>
      <returns>
        <para>The matching prefix. Or <see langword="null" /> if no matching namespace URI is found in the current scope.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns " />is either <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>
        <para>Writes out the specified name, ensuring it is a valid NmToken according
 to the W3C XML 1.0 recommendation(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
      </summary>
      <param name="name">Name to write.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name " />is not a valid NmToken; or <paramref name="name" /> is either <see langword="null" /> or String.Empty.</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>
        <para>Gets the underlying stream object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>
        <para>Gets
      or sets a value indicating whether to do namespace support.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">You can only change this property when in the WriteState.Start state.</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>
        <para> Indicates how the output
      is formatted.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>
        <para>Gets or sets how many IndentChars to write for each level
      in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to
   <see langword="Formatting.Indented" />
   .</para>
      </summary>
      <exception cref="T:System.ArgumentException">Setting this property to a negative value.</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>
        <para>Gets or sets which character to use for indenting
      when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to Formatting.Indented.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>
        <para>Gets or sets which character to use to quote attribute
      values.</para>
      </summary>
      <exception cref="T:System.ArgumentException">Setting this property to something other than either a single or double quote.</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>
        <para>Gets the state of the writer.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>
        <para> Gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.
   </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>
        <para> Gets the current xml:lang scope.
      </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>
        <para> Represents an element.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself (and its attributes if the node is an <see langword="XmlElement" /> ).</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>
        <para>Returns the value for the attribute with the specified name.</para>
      </summary>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node. </param>
      <returns>
        <para>The value of the specified attribute. An empty string is 
      returned if a matching attribute is not found or if the attribute does not have a specified or default value.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>
        <para>Sets the value of the attribute
      with the specified name.</para>
      </summary>
      <param name="name">The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components.</param>
      <param name=" value">The value to set for the attribute.</param>
      <exception cref="T:System.Xml.XmlException">The specified name contains an invalid character.</exception>
      <exception cref="T:System.ArgumentException">The node is read-only.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>
        <para>Removes an attribute by name.</para>
      </summary>
      <param name="name">The name of the attribute to remove.This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node.</param>
      <exception cref="T:System.ArgumentException">The node is read-only.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>
        <para>Returns the <see langword="XmlAttribute" /> with the specified name.</para>
      </summary>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node.</param>
      <returns>
        <para>The specified <see langword="XmlAttribute" /> or
<see langword="null" /> if a matching attribute was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>
        <para>Adds the specified <see cref="T:System.Xml.XmlAttribute" /> .</para>
      </summary>
      <param name="newAttr">The <see langword="XmlAttribute" /> node to add to the attribute collection for this element.</param>
      <returns>
        <para>If the attribute replaces an existing attribute with the 
      same name, the old <see langword="XmlAttribute" />
      is returned; otherwise,
   <see langword="null" />
   is
   returned.</para>
      </returns>
      <exception cref="T:System.ArgumentException">The <paramref name="newAttr" /> was created from a different document than the one that created this node. Or this node is read-only.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="newAttr" /> is already an attribute of another <see langword="XmlElement" /> object. You must explicitly clone <see langword="XmlAttribute" /> nodes to re-use them in other <see langword="XmlElement" /> objects.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>
        <para>Removes the specified <see cref="T:System.Xml.XmlAttribute" /> .</para>
      </summary>
      <param name="oldAttr">The <see langword="XmlAttribute" /> node to remove. If the removed attribute has a default value, it is immediately replaced.</param>
      <returns>
        <para>The removed <see langword="XmlAttribute" /> or 
<see langword="null" /> if <paramref name="oldAttr" /> is not an attribute node of the 
<see langword="XmlElement" /> .</para>
      </returns>
      <exception cref="T:System.ArgumentException">This node is read-only.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlElement.Name" />
   .</para>
      </summary>
      <param name="name">The name tag to match. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node. The asterik (*) is a special value that matches all tags.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>
        <para>Returns the value for the attribute with the
      specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute to retrieve.</param>
      <param name="namespaceURI">The namespace URI of the attribute to retrieve.</param>
      <returns>
        <para>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Sets the value of the attribute with the
      specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <param name="value">The value to set for the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>
        <para>Removes an attribute with the specified local name and namespace URI.</para>
        <note type="note">
      If the removed attribute has a
      default value, it is immediately replaced.
   </note>
      </summary>
      <param name="localName">The local name of the attribute to remove.</param>
      <param name="namespaceURI">The namespace URI of the attribute to remove.</param>
      <exception cref="T:System.ArgumentException">The node is read-only.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>
        <para>Returns the <see cref="T:System.Xml.XmlAttribute" /> with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The specified <see langword="XmlAttribute" /> or
<see langword="null" /> if a matching attribute was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>
        <para>Adds the specified <see cref="T:System.Xml.XmlAttribute" /> .</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to add.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>
        <para>Removes the <see cref="T:System.Xml.XmlAttribute" />specified by the local name and namespace URI.</para>
        <note type="note">
   If the removed attribute has a
   default value, it is immediately replaced.
</note>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The removed <see langword="XmlAttribute" /> or
<see langword="null" /> if the <see langword="XmlElement" /> does not have a 
   matching attribute node.</para>
      </returns>
      <exception cref="T:System.ArgumentException">This node is read-only.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlElement.LocalName" /> and <see cref="P:System.Xml.XmlElement.NamespaceURI" />
   .</para>
      </summary>
      <param name="localName">The local name to match. The asterik (*) is a special value that matches all tags.</param>
      <param name="namespaceURI">The namespace URI to match.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>
        <para>Determines whether the current node has an attribute with the specified
      name.</para>
      </summary>
      <param name="name">The name of the attribute to find. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node.</param>
      <returns>
        <para>
          <see langword="true" /> if the current node has the specified attribute;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>
        <para>Determines whether the current node has an attribute
      with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute to find.</param>
      <param name="namespaceURI">The namespace URI of the attribute to find.</param>
      <returns>
        <para>
          <see langword="true" /> if the current node has the specified attribute;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the current node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>
        <para> Removes the attribute node with the specified index from the element. </para>
        <note type="note">
      If the removed attribute has a
      default value, it is immediately replaced.
      
   </note>
      </summary>
      <param name="i">The index of the node to remove. The first node has index 0.</param>
      <returns>
        <para>The attribute node removed or
   <see langword="null " />if there is no node at the given index.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>
        <para>Removes all specified attributes from the element. Default attributes are not removed.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>
        <para>Removes all specified attributes and children of the current node. Default
      attributes are not removed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>
        <para> Gets the local name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>
        <para>Gets the namespace URI of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>
        <para>Gets or sets the namespace prefix of this node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">This node is read-only</exception>
      <exception cref="T:System.Xml.XmlException">
        <para>The specified prefix contains an illegal character.</para>
        <para>The specified prefix is malformed.</para>
        <para>The namespaceURI of this node is <see langword="null" /> .</para>
        <para>The specified prefix is "xml" and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace .</para>
      </exception>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>
        <para> Gets or sets the tag format of the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>
        <para>Gets an <see cref="T:System.Xml.XmlAttributeCollection" /> containing the list of attributes for this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>
        <para>Gets a <see langword="boolean" /> value indicating whether the current node
   has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>
        <para>Gets or sets the markup representing just
      the children of this node.</para>
      </summary>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed.</exception>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>
        <para>Gets or sets the concatenated values of the
      node and all its children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>
   Gets the <see cref="T:System.Xml.XmlNode" /> immediately following this element.
</summary>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>
        <para> Represents an entity declaration: &lt;!ENTITY ... &gt;.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node. Entity nodes 
      cannot be cloned. Calling this method on an <see langword="XmlEntity" /> object throws an exception.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <exception cref="T:System.InvalidOperationException">Calling this method.</exception>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
For <see langword="XmlEntity" /> nodes, this
method has no effect.
</summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>For <see langword="XmlEntity" /> nodes, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>
        <para>Gets the name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>
        <para> Gets the name of the node without the namespace prefix.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>
        <para>Gets the concatenated values of the entity node and all
      its children.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property.</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>
        <para>Gets the type of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>
        <para>Gets
      the value of the public identifier on the entity declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>
        <para>Gets the value of
      the system identifier on the entity declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>
        <para>Gets
      the name of the optional NDATA attribute on the
      entity declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>
        <para>Gets the markup representing this node and all its
      children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>
        <para> Gets the markup representing the children of
      this node.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property.</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>
        <para> Represents an entity reference node.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For <see langword="XmlEntityReference" /> nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>
        <para>Gets the name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">Node is read-only.</exception>
      <exception cref="T:System.InvalidOperationException"> Setting the property.</exception>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>
        <para>Gets the type of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>
        <para> Specifies the type of node change. </para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>
        <para> A node is being inserted in the tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>
        <para> A node is being removed from the tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>
        <para> A node value is being changed.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>
    Returns detailed information about the last exception.
 </summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="XmlException" /> class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XmlException" />. </param>
      <param name=" context">The <see langword="StreamingContext" /> object containing the context information.</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
   Streams all the <see langword="XmlException" /> properties
   into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.
</summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>
   Initializes a new instance of the
<see langword="XmlException" /> class.
</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>
   Initializes a new instance of the
<see langword="XmlException" /> class with a specified error message.
</summary>
      <param name="message">The error description.</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see langword="XmlException" /> class.</para>
      </summary>
      <param name="message">The description of the error condition.</param>
      <param name=" innerException">The <see cref="T:System.Exception" /> that threw the <see langword="XmlException" />, if any. This value can be <see langword="null" />.</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlException" /> class with the specified message, inner exception, line 
      number, and line position.</para>
      </summary>
      <param name="message">The error description.</param>
      <param name=" innerException">The exception that is the cause of the current exception. This value can be <see langword="null" />.</param>
      <param name=" lineNumber">The line number indicating where the error occurred.</param>
      <param name=" linePosition">The line position indicating where the error occurred.</param>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>
        <para>Gets a message describing the current exception.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>
    Gets the line number indicating where the
    error occurred.
 </summary>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>
    Gets the line position indicating where the
    error occurred.
 </summary>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>
        <para>Defines the context for a set of <see cref="T:System.Xml.XmlDocument" />
objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>
        <para>
       Initializes a new instance of the XmlImplementation class.
    </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>
        <para> Tests if the DOM implementation implements a specific feature.
 </para>
      </summary>
      <param name="strFeature">The package name of the feature to test. This name is not case-sensitive. </param>
      <param name=" strVersion">This is the version number of the package name to test. If the version is not specified (<see langword="null" />), supporting any version of the feature causes the method to return <see langword="true" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if the feature is implemented in the specified version;
 otherwise, <see langword="false" />.
 </para>
        <para> The following table shows the combinations that cause 
<see langword="HasFeature" /> to return <see langword="true" /> .
 </para>
        <list type="table">
          <listheader>
            <term> strFeature</term>
            <description> strVersion</description>
          </listheader>
          <item>
            <term> XML</term>
            <description> 1.0</description>
          </item>
          <item>
            <term> XML</term>
            <description> 2.0</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>
        <para>Creates a new <see cref="T:System.Xml.XmlDocument" /> .</para>
      </summary>
      <returns>
        <para>The new <see langword="XmlDocument" /> object.</para>
      </returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>
        <para>Resolves, adds and removes namespaces to a collection and
      provides scope management for these namespaces. This class is used by
      the <see cref="T:System.Xml.Xsl.XsltContext" />
      and <see cref="T:System.Xml.XmlReader" /> classes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String,System.Boolean)">
    </member>
    <member name="P:System.Xml.IXmlNamespaceResolver.NameTable">
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlNamespaceManager" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />
   .</para>
      </summary>
      <param name="nameTable">The <see langword="XmlNameTable" /> to use.</param>
      <exception cref="T:System.NullReferenceException">
        <see langword="null" /> is passed to the constructor</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>
        <para>Pushes a namespace scope onto the stack.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>
        <para>Pops a namespace scope off the stack.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are
   namespace scopes left on the stack; <see langword="false" /> if there are no more
   namespaces to pop.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>
        <para>Adds the given namespace to the collection.</para>
      </summary>
      <param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</param>
      <param name=" uri">The namespace to add.</param>
      <exception cref="T:System.ArgumentException">The value for <paramref name="prefix" /> is "xml" or "xmlns".</exception>
      <exception cref="T:System.ArgumentNullException">The value for <paramref name="prefix" /> or <paramref name="uri" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String,System.Boolean)">
      <summary>
        <para>Adds the given namespace to the collection.</para>
      </summary>
      <param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</param>
      <param name=" uri">The namespace to add.</param>
      <exception cref="T:System.ArgumentException">The value for <paramref name="prefix" /> is "xml" or "xmlns".</exception>
      <exception cref="T:System.ArgumentNullException">The value for <paramref name="prefix" /> or <paramref name="uri" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>
        <para>Removes the given namespace for the given
      prefix.</para>
      </summary>
      <param name="prefix">The prefix for the namespace</param>
      <param name=" uri"> The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="prefix" /> or <paramref name="uri" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String,System.Boolean)">
      <summary>
        <para>Removes the given namespace for the given
      prefix.</para>
      </summary>
      <param name="prefix">The prefix for the namespace</param>
      <param name=" uri"> The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="prefix" /> or <paramref name="uri" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>
        <para>Provides support for the "foreach" style iteration over 
      the collection of namespaces in the <see langword="XmlNamespaceManager" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>
        <para>Gets the namespace URI for the specified
      prefix.</para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.</param>
      <returns>
        <para>Returns the namespace URI for <paramref name="prefix" /> or <see langword="null" /> if there is no mapped namespace. The returned
   string is atomized. </para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String,System.Boolean)">
      <summary>
        <para>Gets the namespace URI for the specified
      prefix.</para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.</param>
      <returns>
        <para>Returns the namespace URI for <paramref name="prefix" /> or <see langword="null" /> if there is no mapped namespace. The returned
   string is atomized. </para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>
        <para>Finds the prefix declared for the given
      namespace URI.</para>
      </summary>
      <param name="uri">The namespace to resolve for the prefix.</param>
      <returns>
        <para>The matching prefix. If there is no mapped prefix,
      the method returns String.Empty. If a null value is supplied then
   <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String,System.Boolean)">
      <summary>
        <para>Finds the prefix declared for the given
      namespace URI.</para>
      </summary>
      <param name="uri">The namespace to resolve for the prefix.</param>
      <returns>
        <para>The matching prefix. If there is no mapped prefix,
      the method returns String.Empty. If a null value is supplied then
   <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>
        <para>Gets a value indicating whether the supplied prefix has
      a namespace defined for the current pushed scope.</para>
      </summary>
      <param name="prefix">The prefix of the namespace you want to find.</param>
      <returns>
        <para>
          <see langword="true" /> if there is a
   namespace defined; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String,System.Boolean)">
      <summary>
        <para>Gets a value indicating whether the supplied prefix has
      a namespace defined for the current pushed scope.</para>
      </summary>
      <param name="prefix">The prefix of the namespace you want to find.</param>
      <returns>
        <para>
          <see langword="true" /> if there is a
   namespace defined; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>
        <para> Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>
        <para>Gets the namespace URI for the default
      namespace.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>
        <para>Gets a value indicating what type of node
      change event is occurring.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>
   Gets the <see cref="T:System.Xml.XmlNode" /> that is
   being added, removed or changed.
</summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>
   Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" />
   before the operation began.
</summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>
        <para>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" /> after the operation completes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>
        <para>Represents the method that handles
 <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> containing the event data.</param>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>
        <para>Describes the document order of a node compared to a
      second node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>
        <para> The current node of this navigator is before the
      current node of the supplied navigator.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>
        <para> The current node of this navigator is after the
      current node of the supplied navigator.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>
        <para> The two
      navigators are positioned on the same node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>
        <para> The node positions
 cannot be determined in document order, relative to each other. This could occur if the
 two nodes reside in different trees.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>
        <para>Represents a reader that provides fast, non-cached
      forward only access to XML data in an <see cref="T:System.Xml.XmlNode" /><see langword="." /></para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>
        <para> Represents a reader that provides fast, non-cached, forward-only access
      to XML data.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified
   <see cref="P:System.Xml.XmlReader.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute is 
      not found, <see langword="null" />
      is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the
      specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> .</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute is 
      not found, <see langword="null" />
      is returned. This method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute. This method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>
        <para>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />,
 the reader's position does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" />
and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> .</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" ns">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the reader's position does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>When overridden in a derived class, moves to the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>
        <para>When overridden in a derived class, moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an 
 attribute exists (the reader moves to the first attribute); otherwise,
<see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>
        <para>When overridden in a derived class, moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>
        <para>When overridden in a derived class, moves to the element that contains the current attribute node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader 
 is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not
 positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>
        <para>When overridden in a derived class, reads the next
      node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read. </para>
      </returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>
        <para> When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to 
<see langword="Closed" />
.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>
        <para> Skips the children of the current node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>
        <para>When overridden in a derived class, reads the contents of an element or text node as a string.</para>
      </summary>
      <returns>
        <para>The contents of the element or text node. This can be an empty string if
      the reader is positioned on something other than an element or text node, or
      if there is no more text content to return in the current context.</para>
        <note type="note">
      The text node can be either an
      element or an attribute text node.
      
   </note>
      </returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>
        <para> Checks whether the current node is a content (non-white
      space text, <see langword="CDATA" />, <see langword="Element" />,
   <see langword="EndElement" />, <see langword="EntityReference" />, or
   <see langword="EndEntity" /> )
      node. If the node is not a content node, the reader skips ahead to the
      next content node or end of file. It skips over nodes of the following type:
   <see langword="ProcessingInstruction" />, <see langword="DocumentType" />,
   <see langword="Comment" />, <see langword="Whitespace" />, or
   <see langword="SignificantWhitespace" />.</para>
      </summary>
      <returns>
        <para> The <see cref="P:System.Xml.XmlReader.NodeType" /><see langword=" " />of the current
   node found by the method or <see langword="XmlNodeType.None" />
   if the reader has reached the end of the input stream.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML encountered in the input stream.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>
        <para>Checks that the current node is an element and advances the reader to the next
       node.</para>
      </summary>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> returns <see langword="false" /> .</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>
        <para>Checks that the current content node is an element with
 the given <see cref="P:System.Xml.XmlReader.Name" /> and
 advances the reader to the next node.</para>
      </summary>
      <param name="name">The qualified name of the element.</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" />returns <see langword="false" /> or if the <see cref="P:System.Xml.XmlReader.Name" /> of the element does not match the given <paramref name="name" /> .</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>
        <para>Checks that the current content node is an element with
 the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />
 and advances the reader to the next node.</para>
      </summary>
      <param name="localname">The local name of the element.</param>
      <param name="ns"> The namespace URI of the element.</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" />returns <see langword="false" />, or the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found do not match the given arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>
        <para>Reads a text-only element.</para>
      </summary>
      <returns>
        <para> The text contained in the element that was read.
 An empty string if the element is empty
 (<c>&lt;item&gt;&lt;/item&gt;</c> or <c>&lt;item/&gt;</c>).</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The next content node is not a start tag; or the element found does not contain a simple text value.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>
        <para>Checks that the <see cref="P:System.Xml.XmlReader.Name" />
property of the element found
matches the given string before reading a text-only element.</para>
      </summary>
      <param name="name">The name to check.</param>
      <returns>
        <para>The text contained in the element that was read.
 An empty string if the element is empty
 (<c>&lt;item&gt;&lt;/item&gt;</c> or <c>&lt;item/&gt;</c>).</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element<see langword="Name" /> does not match the given argument; or if the element found does not contain a simple text value.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>
        <para>Checks that the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found
 matches the given strings before reading a text-only element.</para>
      </summary>
      <param name="localname">The local name to check.</param>
      <param name=" ns">The namespace URI to check.</param>
      <returns>
        <para>The text contained in the element that was read.
 An empty string if the element is empty
 (<c>&lt;item&gt;&lt;/item&gt;</c> or <c>&lt;item/&gt;</c>).</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element <see langword="LocalName" /> or <see langword="NamespaceURI" /> do not match the given arguments; or if the element found does not contain a simple text value.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>
        <para>Checks that the current content node is an end tag and advances the reader to
 the next node.</para>
      </summary>
      <exception cref="T:System.Xml.XmlException"> The current node is not an end tag or if incorrect XML is encountered in the input stream.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>
        <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current
   content node is a start tag or empty element tag.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if
<see langword="MoveToContent" /> finds a start tag or empty element
   tag; <see langword="false" /> if a node type other than
<see langword="XmlNodeType.Element" /> 
was found.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>
        <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is
   a start tag or empty element tag and if the
<see cref="P:System.Xml.XmlReader.Name" />
property of the element found matches the given argument.</para>
      </summary>
      <param name="name">The string matched against the <see langword="Name" /> property of the element found.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   resulting node is an element and the <see langword="Name " />
   property matches the specified
   string. <see langword="false" /> if a node type other than
<see langword="XmlNodeType.Element" /> 
was found or if the element <see langword="Name" /> property does not match the specified string.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>
        <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the
   current content node is a start tag or empty element tag and if
   the <see cref="P:System.Xml.XmlReader.LocalName" /> and
<see cref="P:System.Xml.XmlReader.NamespaceURI" />
properties of the element found match the given strings.</para>
      </summary>
      <param name="localname">The string to match against the <see langword="LocalName" /> property of the element found.</param>
      <param name="ns">The string to match against the <see langword="NamespaceURI" /> property of the element found. </param>
      <returns>
        <para>
          <see langword="true" /> if the
   resulting node is an element. <see langword="false" /> if a
   node type other than <see langword="XmlNodeType.Element" /> was found or if the
<see langword="LocalName" /> and <see langword="NamespaceURI " />properties of
   the element do not match the specified strings.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>
        <para>Gets a value indicating whether
 the string argument is a valid XML name.</para>
      </summary>
      <param name="str">The name to validate.</param>
      <returns>
        <para>
          <see langword="true" /> if the name 
 is valid; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>
        <para>Gets a value indicating whether or not the
      string argument is a valid XML name token.</para>
      </summary>
      <param name="str">The name token to validate.</param>
      <returns>
        <para>
          <see langword="true" /> if it is a
   valid name token; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>
        <para>When overridden in a derived class, reads all the content, including markup, as a string.</para>
      </summary>
      <returns>
        <para> All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
        <para>If the current node is neither an element nor attribute, an empty
      string is returned.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>
        <para>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</para>
      </summary>
      <returns>
        <para>If the reader is positioned on an element or an attribute node, this method
      returns all the XML content, including markup, of the current node and all its
      children; otherwise, it returns an empty string.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>
        <para> When overridden in a derived class, resolves a namespace prefix in the current element's scope.
 </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
 matching prefix is found.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>
        <para> When overridden in a derived class, resolves the entity
 reference for <see langword="EntityReference" /> nodes.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an <see langword="EntityReference" /> node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> returns <see langword="false" /> ).</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>
        <para>When overridden in a derived class, parses the attribute 
      value into one or more <see langword="Text" />, <see langword="EntityReference" />,
      or <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>
        <para>When overridden in a derived class, gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>
        <para> When overridden in a derived class, gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>
        <para> When overridden in a derived class, gets the local name of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>
        <para>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace
 specification) of the node on which the reader is positioned. </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>
        <para> When overridden in a derived class, gets the namespace prefix associated with the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether the current node can have a
   <see cref="P:System.Xml.XmlReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>
        <para>When overridden in a derived class, gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>
        <para> When overridden in a derived class, gets the depth of
 the current node in the XML document.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>
        <para> When overridden in a derived class, gets the base URI of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether the current node is an
      empty element (for example, <c>&lt;MyElement/&gt;</c>
   ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>
        <para> When overridden in a derived class, gets a value indicating whether the current node is an
 attribute that was generated from the default value defined
 in the DTD or schema.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>
        <para> When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute
 node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>
        <para>When overridden in a derived class, gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>
        <para>When overridden in a derived class, gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>
        <para> When overridden in a derived class, gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified
   <see cref="P:System.Xml.XmlReader.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the
      specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> .</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>
        <para>Gets a value indicating whether this reader can parse
      and resolve entities.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>
        <para> When overridden in a derived class, gets a
 value indicating whether the reader is positioned at the end of the
 stream.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>
        <para> When overridden in a derived class, gets the state of the reader.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>
        <para>Gets a value indicating whether the current node
      has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>
        <para>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>
        <para>Creates an instance of the <see langword="XmlNodeReader" /> class using the
   specified <see cref="T:System.Xml.XmlNode" />
   .</para>
      </summary>
      <param name="node">The <see langword="XmlNode" /> you want to read.</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null" />
      is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null" />
      is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="attributeIndex">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute.</para>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>
        <para>Moves to the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />,
 the reader's position does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>Moves to the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the reader's position does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>Moves to the attribute with the specified index.</para>
      </summary>
      <param name="attributeIndex">The index of the attribute.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>
        <para>Moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>
        <para>Moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>
        <para>Moves to the element that contains the current attribute node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>
        <para>Reads the next
 node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>
        <para> Changes the <see cref="P:System.Xml.XmlNodeReader.ReadState" /> to <see langword="Closed" />
.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>
        <para>Skips the children of the current node. </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>
        <para>Reads the contents of an element or text node as a string.</para>
      </summary>
      <returns>
        <para>The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if
      the reader is positioned on something other than an element or text node, or
      if there is no more text content to return in the current context.</para>
        <para>
          <see langword="Note:" /> The text node can be either an element or
   an attribute text node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>
        <para> Resolves a namespace prefix in the current element's scope.
 </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
 matching prefix is found.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>
        <para> Resolves the entity reference for 
   <see langword="EntityReference" /> nodes.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an <see langword="EntityReference" /> node.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>
        <para>Parses the attribute value into one or more 
   <see langword="Text" />, <see langword="EntityReference" />, or 
   <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>
        <para> Gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>
        <para> Gets the local name of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>
        <para>Gets the namespace URI (as defined in the W3C Namespace
 specification) of the node on which the reader is positioned. </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>
        <para> Gets the namespace prefix associated with the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>
        <para>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlNodeReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>
        <para>Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>
        <para> Gets the depth of
      the current node in the XML document.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>
        <para> Gets the base URI of the current node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>
        <para>Gets a value indicating whether this reader can parse
 and resolve entities.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>
        <para>Gets a value indicating whether the current node is an
      empty element (for example, <c>&lt;MyElement/&gt;</c>
   ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>
        <para> Gets a value indicating whether the current node is an
      attribute that was generated from the default value defined
      in the DTD or schema.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.QuoteChar">
      <summary>
        <para> Gets the quotation mark character used to enclose the value of an attribute
      node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>
        <para>Gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>
        <para>Gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>
        <para>Gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>
        <para>Gets a
       value indicating whether the reader is positioned at the end of the
       stream.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>
        <para> 
      Gets the state of the reader.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>
        <para>Gets a value indicating whether the current node
      has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Item(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />.</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Item(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Item(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>
    Specifies the type of node.
 </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>
        <para>This is returned by the <see cref="T:System.Xml.XmlReader" /> if a <see langword="Read" /> 
method has not been called.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>
        <para> An element.
      </para>
        <para> Example XML: <c>&lt;item&gt;</c></para>
An <see langword="Element" /> node can have the
following child node types: <see langword="Element" />, <see langword="Text" />,
<see langword="Comment" />, <see langword="ProcessingInstruction" />, 
<see langword="CDATA" />, and <see langword="EntityReference" />. It can be the 
child of the <see langword="Document" />, <see langword="DocumentFragment" />,
<see langword="EntityReference" />, and <see langword="Element" />
nodes.
</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>
        <para> An
 attribute.
 </para>
        <para> Example XML: <c>id='123'</c></para>
        <para> An <see langword="Attribute" /> node can have the
following child node types: <see langword="Text" /> and
<see langword="EntityReference" />. The <see langword="Attribute" /> node does not 
appear as the child node of any other node type. It is not considered a
child node of an <see langword="Element" />
.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>
        <para> The
      text content of a node.
      </para>
        <para> A <see langword="Text" /> node cannot have any child nodes. 
   It can appear as the child node of the <see langword="Attribute" />,
<see langword="DocumentFragment" />, <see langword="Element" />, and 
<see langword="EntityReference" /> 
nodes.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>
        <para>A CDATA 
      
      section.</para>
        <para>Example XML: <c>&lt;![CDATA[my 
      escaped text]]&gt;</c></para>
        <para> 
      CDATA sections are used to escape blocks of text that would otherwise
      be recognized as markup. A <see langword="CDATA" /> node cannot have any child
      nodes. It can appear as the child of the <see langword="DocumentFragment" />,
   <see langword="EntityReference" />, and <see langword="Element" /> nodes.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>
        <para>A reference to an entity.</para>
        <para>Example XML: <c>&amp;num;</c></para>
        <para> An <see langword="EntityReference" /> node can have the 
   following child node types: <see langword="Element" />,
<see langword="ProcessingInstruction" />, <see langword="Comment" />, 
<see langword="Text" />, <see langword="CDATA" />, and 
<see langword="EntityReference" />. It can appear as the child of the 
<see langword="Attribute" />, <see langword="DocumentFragment" />, 
<see langword="Element" />, and <see langword="EntityReference" /> 

nodes.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>
        <para>An entity declaration.</para>
        <para>Example XML: <c>&lt;!ENTITY ...&gt;</c></para>
        <para>An <see langword="Entity" /> node can have child nodes 
   that represent the expanded entity (for example, <see langword="Text" /> and
<see langword="EntityReference" /> nodes). It can appear as the child of the 
<see langword="DocumentType" /> 
node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>
        <para> A processing instruction.
      </para>
        <para> Example XML: <c>&lt;?pi test?&gt;</c></para>
        <para> A <see langword="ProcessingInstruction" /> node cannot have 
any child nodes. It can appear as the child of the <see langword="Document" />,
<see langword="DocumentFragment" />, <see langword="Element" />, and 
<see langword="EntityReference" /> 
nodes.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>
        <para> A comment.
      </para>
        <para> Example XML: <c>&lt;!-- my comment --&gt;</c></para>
        <para> A <see langword="Comment" /> node cannot have any child 
nodes. It can appear as the child of the <see langword="Document" />,
<see langword="DocumentFragment" />, <see langword="Element" />, and 
<see langword="EntityReference" /> 
nodes.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>
        <para> A document object that, as the root of the document tree, provides access
 to the entire XML document.
 </para>
        <para> A <see langword="Document" /> node 
 can have the following child node types:
<see langword="XmlDeclaration" /> 
, <see langword="Element" /> (maximum of one),
<see langword="ProcessingInstruction" />, <see langword="Comment" />, and 
<see langword="DocumentType" /> 
. It cannot
appear as the child of any node types.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>
        <para> The document type declaration, indicated by the following tag.
      </para>
        <para> Example XML: <c>&lt;!DOCTYPE ...&gt;</c></para>
        <para> A <see langword="DocumentType" /> node can have the 
following child node types: <see langword="Notation" /> and
<see langword="Entity" />. It can appear as the child of the 
<see langword="Document" /> 
node.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>
        <para> A document fragment.
      </para>
        <para> The <see langword="DocumentFragment" /> node associates a 
   node or subtree with a document without actually being contained within the
   document. A <see langword="DocumentFragment" /> node can have the following child
   node types: <see langword="Element" />, <see langword="ProcessingInstruction" />,
<see langword="Comment" />, <see langword="Text" />, <see langword="CDATA" />, and 
<see langword="EntityReference" /> 

. It
cannot appear as the child of any node types.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>
        <para> A notation in the document type declaration.
      </para>
        <para> Example XML: <c>&lt;!NOTATION ...&gt;</c></para>
        <para> A <see langword="Notation" /> node cannot have any child 
nodes. It can appear as the child of the <see langword="DocumentType" />
node.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>
        <para> White space between markup.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>
        <para> White space between markup in a mixed content model or white
      space within the <c>xml:space="preserve"</c> scope.
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>
        <para> An end element tag.</para>
        <para>Example XML: <c>&lt;/item&gt;</c></para>
        <para>Returned when <see cref="T:System.Xml.XmlReader" /> gets to the end of an element.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>
        <para>Returned when <see langword="XmlReader" /> gets to the end of the entity
   replacement as a result of a call to <see cref="M:System.Xml.XmlReader.ResolveEntity" />
   .</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>
        <para> The XML declaration.
 </para>
        <para> Example XML: <c>&lt;?xml version='1.0'?&gt;</c></para>
        <para> The <see langword="XmlDeclaration" /> 
node must be the first node in the document. It cannot have children. It is a
child of the <see langword="Document" />
node. It can have attributes that provide version
and encoding information.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>
        <para> Represents a notation declaration: &lt;!NOTATION ... &gt;.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node. Notation 
      nodes cannot be cloned. Calling this method on an
   <see langword="XmlNotation" /> object throws an exception.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <exception cref="T:System.InvalidOperationException">Calling this method.</exception>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>For <see langword="XmlNotation" />
nodes, this method has no
effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>For <see langword="XmlNotation " />nodes, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>
        <para> Gets the name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>
        <para> Gets the name of the current node without the namespace prefix.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>
        <para>Gets
      the value of the public identifier on the notation declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>
        <para>Gets the value of
      the system identifier on the notation declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>
        <para>Gets the markup representing this node and all its
      children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>
        <para> Gets the markup representing the children of
      this node.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property.</exception>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>
        <para> Resolves external XML resources
      named by a URI.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>
        <para>Resolves external XML resources named by a URI.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
        <para>When overridden in a derived class, maps a
      URI to an object containing the actual resource.</para>
      </summary>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /></param>
      <param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns System.IO.Stream objects.</param>
      <returns>
        <para>A <see langword="System.IO.Stream" /> object or <see langword="null" /> if a type other than stream is specified.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is neither <see langword="null" /> nor a <see langword="Stream" /> type.</exception>
      <exception cref="T:System.UriFormatException">
        <para>The specified URI is not an absolute URI.</para>
      </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection).</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>
        <para>When overridden in a derived class, resolves the absolute URI from the base and
      relative URIs.</para>
      </summary>
      <param name="baseUri">The base URI used to resolve the relative URI</param>
      <param name=" relativeUri">
        <para> The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Uri" /> representing the absolute URI or
<see langword="null" /> if the relative URI can not be resolved.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="baseUri" /> and <paramref name="relativeUri" /> are <see langword="null" /></para>
      </exception>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>
        <para> When overridden in a derived class, sets the credentials used to authenticate Web
      requests.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlResolver.NameTable">
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>
        <para> Creates a new instance of the 
   <see langword="XmlUrlResolver" /> class.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
        <para>Maps a
      URI to an object containing the actual resource.</para>
      </summary>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /></param>
      <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
      <param name="ofObjectToReturn">The type of object to return. The current implementation only returns <see langword="System.IO.Stream" /> objects.</param>
      <returns>
        <para>A <see langword="System.IO.Stream" /> object or <see langword="null" /> if a
   type other than stream is specified.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">
        <para>
          <paramref name="ofObjectToReturn" /> is neither <see langword="null" /> nor a <see langword="Stream" /> type.</para>
      </exception>
      <exception cref="T:System.UriFormatException">
        <para>The specified URI is not an absolute URI.</para>
      </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Exception">
        <para>There is a runtime error (for example, an interrupted server connection).</para>
      </exception>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>
        <para> Sets credentials used to authenticate Web
      requests.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>
        <para> Provides all the context information required 
      by <see cref="T:System.Xml.XmlTextReader" /> or <see cref="T:System.Xml.XmlValidatingReader" />
      to parse an XML fragment.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />,
   <see cref="T:System.Xml.XmlNamespaceManager" />, <see langword="xml:lang" />, and
   <see langword="xml:space" />
   values.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or <see langword="null" /> . </param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same <see langword="XmlNameTable" /> used to construct <paramref name="nsMgr" />.</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />,
   <see cref="T:System.Xml.XmlNamespaceManager" />, <see langword="xml:lang" />,
   <see langword="xml:space" /> , and encoding.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name=" nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or <see langword="null" /> .</param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
      <param name=" enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same <see langword="XmlNameTable" /> used to construct <paramref name="nsMgr" />.</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />,
   <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, <see langword="xml:lang" />,
   <see langword="xml:space" />
   , and document type values.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see<see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or <see langword="null" /> . </param>
      <param name="docTypeName">The name of the document type declaration.</param>
      <param name="pubId">The public identifier.</param>
      <param name="sysId">The system identifier.</param>
      <param name="internalSubset">The internal DTD subset.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded).</param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same <see langword="XmlNameTable" /> used to construct <paramref name="nsMgr" />.</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />,
   <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, <see langword="xml:lang" />,
   <see langword="xml:space" /> , encoding, and document type values.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name=" nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or <see langword="null" /> .</param>
      <param name=" docTypeName">The name of the document type declaration.</param>
      <param name=" pubId">The public identifier.</param>
      <param name="sysId">The system identifier.</param>
      <param name="internalSubset">The internal DTD subset.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded).</param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
      <param name=" enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same <see langword="XmlNameTable" /> used to construct <paramref name="nsMgr" />.</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> used to atomize strings. For more information 
   on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />
   .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.XmlNamespaceManager" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>
        <para>Gets or sets the name of the document type declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>
        <para>Gets or sets the public identifier.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>
        <para>Gets or sets the system identifier.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>
        <para>Gets or sets the base URI.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>
        <para>Gets or sets the internal DTD subset.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>
        <para>Gets or sets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>
        <para>Gets or sets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>
   Gets or sets the encoding type.
</summary>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>
        <para> Represents a processing instruction, which XML defines to keep
      processor-specific information in the text of the document.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The duplicate node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> . Because 
      ProcessingInstruction nodes do not have children, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">Node is read-only.</exception>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>
        <para> Gets the target of the processing instruction.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>
        <para> Gets or sets the content of the processing instruction,
 excluding the target.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>
        <para> Gets or sets the concatenated values of the node and
      all its children.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>
        <para>Represents an XML qualified name.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>
        <para>Provides an empty <see langword="XmlQualifiedName" />.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlQualifiedName" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see langword="XmlQualifiedName" /> class with the specified name.</para>
      </summary>
      <param name="name">The local name to use as the name of the <see langword="XmlQualifiedName" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlQualifiedName" /> class with the specified name and namespace.</para>
      </summary>
      <param name="name">The local name to use as the name of the <see langword="XmlQualifiedName" /> object. </param>
      <param name=" ns">The namespace for the <see langword="XmlQualifiedName" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>
        <para>Returns the hash code for the
 <see langword="XmlQualifiedName" /> .</para>
      </summary>
      <returns>
        <para>A hash code for this object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>
        <para>Returns the string value of the
 <see langword="XmlQualifiedName" />.</para>
      </summary>
      <returns>
        <para>The string value of the
 <see langword="XmlQualifiedName" /> in the format of 
 <see langword="namespace:localname" /> . If the 
 object does not have a namespace defined, this method returns just the local
 name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>
        <para>Checks if the specified
 <see langword="XmlQualifiedName" /> is the same instance object as this object.</para>
      </summary>
      <param name="other">The <see langword="XmlQualifiedName" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if the two are
 the same instance object; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
        <para>Compares two <see langword="XmlQualifiedName" /> objects.</para>
      </summary>
      <param name="a">An <see langword="XmlQualifiedName" /> to compare.</param>
      <param name=" b">An <see langword="XmlQualifiedName" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if the two
 objects have the same name and namespace values; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
        <para>Compares two <see langword="XmlQualifiedName" /> objects.</para>
      </summary>
      <param name="a">An <see langword="XmlQualifiedName" /> to compare.</param>
      <param name=" b">An <see langword="XmlQualifiedName" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if the name
 and namespace values for the two objects differ; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>
        <para>Returns the string value of the
 <see langword="XmlQualifiedName" />.</para>
      </summary>
      <param name="name">The name of the object.</param>
      <param name=" ns">The namespace of the object.</param>
      <returns>
        <para>The string value of the
 <see langword="XmlQualifiedName" /> in the format of 
 <see langword="namespace:localname" /> . If the
 object does not have a namespace defined, this method returns just the local
 name.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>
        <para> Gets a string representation of the namespace
      of the <see langword="XmlQualifiedName" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>
        <para> Gets a string representation of the qualified name
 of the <see langword="XmlQualifiedName" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>
   Gets a value indicating whether the
<see langword="XmlQualifedName" /> is empty.
</summary>
    </member>
    <member name="T:System.Xml.XmlQualifiedNameTable">
      <summary>
            Create a new XmlQualifiedName atomization table.
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedNameTable.#ctor(System.Xml.XmlNameTable)">
      <summary>
            Create a new XmlQualifiedName atomization table, where all name parts
            are atomized by the specified XmlNameTable.
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedNameTable.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the list of qnames in the table.
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedNameTable.Get(System.String,System.String)">
      <summary>
            If there is a XmlQualifiedName in this set that has the specified local name and namespace
            uri, then return it.  Otherwise, return null.  Do not assume that "name" and "ns" have been
            atomized by NameTable.
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedNameTable.AtomizedGet(System.String,System.String)">
      <summary>
            Same as Get, but assumes input arguments have already been atomized with respect to NameTable.
            This results in better lookup performance.
            If this method returns null, a side effect will be that this.key will be created.
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedNameTable.Add(System.String,System.String)">
      <summary>
            If there is a XmlQualifiedName in this set that has the specified local name and namespace
            uri, then return it.  Otherwise, create a new XmlQualifiedName.  Do not assume that "name"
            and "ns" have been atomized by NameTable.
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedNameTable.AtomizedAdd(System.String,System.String)">
      <summary>
            Same as Add, but assumes input arguments have already been atomized with respect to NameTable.
            This results in better lookup performance.
            </summary>
    </member>
    <member name="P:System.Xml.XmlQualifiedNameTable.NameTable">
      <summary>
            Get the name table in which all name parts (local names and namespace uri's) are atomized.
            </summary>
    </member>
    <member name="T:System.Xml.XmlQueryLanguage">
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>
        <para> Allows you to secure another implementation of <see cref="T:System.Xml.XmlResolver" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and URL
      provided.</para>
      </summary>
      <param name="resolver">The <see langword="XmlResolver" /> wrapped by the <see langword="XmlSecureResolver" />.</param>
      <param name=" securityUrl">The URL used to create the <see cref="T:System.Security.PermissionSet" qualify="true" /> that will be applied to the underlying <see langword="XmlResolver" />. The <see langword="XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" qualify="true" /> on the created <see langword="PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see langword="XmlResolver" />.</param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and
   <see cref="T:System.Security.Policy.Evidence" qualify="true" /> specified.</para>
      </summary>
      <param name="resolver">The <see langword="XmlResolver" /> wrapped by the <see langword="XmlSecureResolver" />.</param>
      <param name=" evidence">The <see langword="Evidence" /> used to create the <see cref="T:System.Security.PermissionSet" qualify="true" /> that will be applied to the underlying <see langword="XmlResolver" />. The <see langword="XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" qualify="true" /> on the created <see langword="PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see langword="XmlResolver" />.</param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)">
      <summary>
        <para>Initializes a new instance of the <see langword="XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and <see cref="T:System.Security.PermissionSet" qualify="true" /> specified.</para>
      </summary>
      <param name="resolver">The <see langword="XmlResolver" /> wrapped by the <see langword="XmlSecureResolver" />.</param>
      <param name=" permissionSet">The <see cref="T:System.Security.PermissionSet" qualify="true" /> to apply to the underlying <see langword="XmlResolver" />. The <see langword="XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" qualify="true" /> on the <see langword="PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see langword="XmlResolver" />.</param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
        <para>Securely maps a URI to an object containing the actual 
      resource. This method temporarily sets the <see cref="T:System.Security.PermissionSet" qualify="true" /> created in the constructor by calling <see cref="M:System.Security.PermissionSet.PermitOnly" qualify="true" /> before calling <see langword="GetEntity" /> on
      the underlying <see cref="T:System.Xml.XmlResolver" />
      to open the resource.</para>
      </summary>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />.</param>
      <param name=" role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
      <param name=" ofObjectToReturn">The type of object to return. The current version only returns <see cref="T:System.IO.Stream" /> objects.</param>
      <returns>
        <para>A <see langword="Stream" /> object 
   returned by calling <see langword="GetEntity" /> on the underlying
<see langword="XmlResolver" />. If a type other than stream is specified 
<see langword="null" /> is returned.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is neither <see langword="null" /> nor a <see langword="Stream" /> type.</exception>
      <exception cref="T:System.UriFormatException">
        <para>The specified URI is not an absolute URI.</para>
      </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection).</exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>
        <para>Resolves the absolute URI from the base and relative
      URIs by calling <see langword="ResolveUri" /> on the underlying <see cref="T:System.Xml.XmlResolver" /> .</para>
      </summary>
      <param name="baseUri">The base URI used to resolve the relative URI.</param>
      <param name=" relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.</param>
      <returns>
        <para>A <see cref="T:System.Uri" /> representing the absolute URI or
<see langword="null" /> if the relative URI 
   cannot be resolved (returned by calling <see langword="ResolveUri" /> on the
   underlying <see langword="XmlResolver" /> ).</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="baseUri" /> and <paramref name="relativeUri" /> are <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)">
      <summary>
        <para> Creates <see cref="T:System.Security.Policy.Evidence" qualify="true" /> using the supplied URL.</para>
      </summary>
      <param name="securityUrl">The URL used to create the <see langword="Evidence" /> object.</param>
      <returns>
        <para>The <see langword="Evidence" /> object 
   generated from the supplied URL as defined
   by the default policy.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>
        <para>Sets credentials used to authenticate Web requests.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>
        <para>Represents white space between markup in a mixed content
      mode or white space within an xml:space= 'preserve' scope. This is also referred
      to as significant white space.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">Setting <see langword="Value" /> to invalid white space characters.</exception>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>
        <para>Specifies the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>
        <para>No <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
        <para>The <see langword="xml:space" /> scope equals 
<see langword="default" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
        <para>The <see langword="xml:space" /> scope equals 
<see langword="preserve" /> .</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>
        <para> Represents the text content of an element or attribute.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>
        <para> Splits the node into two nodes at the specified offset, keeping
      both in the tree as siblings.
      </para>
      </summary>
      <param name="offset">The offset at which to split the node. </param>
      <returns>
   The new node.
</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> . 
   <see langword="XmlText" /> nodes do not have children, so this method has no 
      effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>
        <para> Represents a reader that provides
      fast, non-cached, forward-only
      access to XML data.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="XmlTextReader" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified stream.</para>
      </summary>
      <param name="input">The stream containing the XML data to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" />
   class with the specified URL and stream.</para>
      </summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</param>
      <param name=" input">The stream containing the XML data to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="input">The stream containing the XML data to read.</param>
      <param name="nt">The <see langword="XmlNameTable" /> to use.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />
   .</para>
      </summary>
      <param name=" url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to String.Empty.</param>
      <param name="input">The stream containing the XML data to read.</param>
      <param name=" nt">The <see langword="XmlNameTable" /> to use.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>
        <para> Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> .
      </para>
      </summary>
      <param name="input">The <see langword="TextReader" /> containing the XML data to read. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />
   .</para>
      </summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</param>
      <param name=" input">The <see langword="TextReader" /> containing the XML data to read.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>
        <para> Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and
   <see cref="T:System.Xml.XmlNameTable" />
   .
   </para>
      </summary>
      <param name="input">The <see langword="TextReader" /> containing the XML data to read. </param>
      <param name="nt">The <see langword="XmlNameTable" /> to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="nt" /> value is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and
   <see cref="T:System.Xml.XmlNameTable" />
   .</para>
      </summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to String.Empty.</param>
      <param name=" input">The <see langword="TextReader" /> containing the XML data to read.</param>
      <param name=" nt">The <see langword="XmlNameTable" /> to use.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="nt" /> value is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified stream,
   <see cref="T:System.Xml.XmlNodeType" />,
      and <see cref="T:System.Xml.XmlParserContext" />
      .</para>
      </summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse.</param>
      <param name=" fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment can contain. (See table below.)</param>
      <param name=" context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</para>
      </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not an Element, Attribute, or Document XmlNodeType.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified string,
   <see cref="T:System.Xml.XmlNodeType" />,
      and <see cref="T:System.Xml.XmlParserContext" />
      .</para>
      </summary>
      <param name="xmlFragment">The string containing the XML fragment to parse.</param>
      <param name=" fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain. (See table below.)</param>
      <param name=" context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</para>
      </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not an Element, Attribute, or Document XmlNodeType.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified file.
      </para>
      </summary>
      <param name="url">The URL for the file containing the XML data. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="url" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>
        <para> Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" /> .
      </para>
      </summary>
      <param name="url">The URL for the file containing the XML data to read. </param>
      <param name="nt">The <see langword="XmlNameTable" /> to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="nt" /> value is <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="url" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute.</para>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null" />
      is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="">The local name of the attribute.</param>
      <param name="">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null" />
      is returned. This method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>
        <para>Moves to the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />,
 the reader's position does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>Moves to the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the reader's position does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>Moves to the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>
        <para>Moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>
        <para>Moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>
        <para>Moves to the element that contains the current attribute node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>
        <para>Reads the next
      node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>
        <para> Changes the <see cref="P:System.Xml.XmlReader.ReadState" />
to Closed.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>
        <para> Resolves a namespace prefix in the current element's scope.
      </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
   matching prefix is found.
   </para>
      </returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to <see langword="true" /> and the <paramref name="prefix" /> value is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>
        <para>Parses the attribute value into one or more 
   <see langword="Text" />, <see langword="EntityReference" />, or 
   <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>
        <para> Resolves the entity reference for EntityReference nodes.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">Calling this method.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>
        <para> Gets the remainder of the buffered XML.</para>
      </summary>
      <returns>
   A <see cref="T:System.IO.TextReader" /> containing
   the remainder of the buffered XML.
</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reads the text contents of an element into a character
      buffer. This method is designed to read large streams of embedded text by
      calling it successively.</para>
      </summary>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written.</param>
      <param name=" index">The position within <paramref name="buffer" /> where the method can begin writing text contents.</param>
      <param name=" count">The number of characters to write into <paramref name="buffer" />.</param>
      <returns>
        <para>The number of characters read. This can be 0 if the reader is not positioned on an element or if there
      is no more text content to return in the current context.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="count " />is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" /> ).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> &lt; 0 or <paramref name="count" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Decodes Base64 and returns the decoded binary bytes.</para>
      </summary>
      <param name="array">The array of characters that serves as the buffer to which the text contents are written.</param>
      <param name="offset">
        <para>The zero-based index into the array specifying where the method can begin to write to the buffer.</para>
      </param>
      <param name="len">The number of bytes to write into the buffer.</param>
      <returns>
        <para>The number of bytes written to the buffer.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The Base64 sequence is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Decodes BinHex and returns the decoded binary
      bytes.</para>
      </summary>
      <param name="array">The byte array that serves as the buffer to which the decoded binary bytes are written.</param>
      <param name=" offset">The zero-based index into the array specifying where the method can begin to write to the buffer.</param>
      <param name=" len">The number of bytes to write into the buffer.</param>
      <returns>
        <para>The number of bytes written to your buffer.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The BinHex sequence is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>
        <para> Gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>
        <para>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>
        <para>Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>
        <para> Gets the depth of
 the current node in the XML document.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>
        <para> Gets the base URI of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>
        <para>Gets a value indicating whether the current node is an
      empty element (for example, <c>&lt;MyElement/&gt;</c>
   ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>
        <para> Gets a value indicating whether the current node is an
 attribute that was generated from the default value defined
 in the DTD or schema.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>
        <para>
       Gets the quotation mark character used to enclose the value of an attribute
       node.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>
        <para>Gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>
        <para>Gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>
        <para> When overridden in a derived class, gets the state of the reader.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>
        <para> When overridden in a derived class, gets a
 value indicating whether the reader is positioned at the end of the
 stream.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>
        <para>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>
        <para>Gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Item(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />.</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.Item(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.Item(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>
        <para>Gets the current line number.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>
        <para>Gets the current line position.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>
 Represents the XML type for the string. This allows the
 string to be read as a particular XML type, for example a CDATA section type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>
   CDATA type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>
        <para> ID type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>
        <para> IDREF type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>
   IDREFS type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>
        <para> ENTITY type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>
        <para> ENTITIES type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>
        <para> NMTOKEN type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>
   NMTOKENS type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>
        <para> NOTATION type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>
   ENUMERATION type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>
   QName type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>
   NCName type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>
   No type.
</summary>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>
        <para> Represents a reader that provides DTD, XML-Data Reduced (XDR) schema, and
      XML Schema definition
      language (XSD) schema validation.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlValidatingReader" /> class with the specified
      values.</para>
      </summary>
      <param name="">The string containing the XML fragment to parse.</param>
      <param name="">The <see cref="T:System.Xml.XmlNodeType" />of the XML fragment. This also determines what the fragment string can contain (see table below).</param>
      <param name="">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.NameTable" /> to use, encoding, namespace scope, the current xml:lang and the xml:space scope.</para>
      </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not one of the node types listed in the table below.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlValidatingReader" /> class with the specified
      values.</para>
      </summary>
      <param name="xmlFragment">The string containing the XML fragment to parse.</param>
      <param name=" fragType">The <see cref="T:System.Xml.XmlNodeType" />of the XML fragment. This also determines what the fragment string can contain (see table below).</param>
      <param name=" context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.NameTable" /> to use, encoding, namespace scope, the current xml:lang and the xml:space scope.</para>
      </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not one of the node types listed in the table below.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlValidatingReader" />
   class with the specified values.</para>
      </summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse.</param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" />of the XML fragment. This determines what the fragment can contain (see table below).</param>
      <param name="context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <see langword="xml:lang" /> and the <see langword="xml:space" /> scope.</para>
      </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not one of the node types listed in the table below.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute.</para>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null" />
      is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="">The local name of the attribute.</param>
      <param name="">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null" />
      is returned. This
      method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>
        <para>Moves to the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />, the position
 of the reader does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>Moves to the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the position of the reader does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>Moves to the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>
        <para> Moves to the first attribute.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>
        <para> Moves to the next attribute.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>
        <para> Moves to the element that contains the current attribute node.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>
        <para>Reads the next
 node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>
        <para> Changes the <see cref="P:System.Xml.XmlReader.ReadState" />
to Closed.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>
        <para> Resolves a namespace prefix in the current element's scope.
      </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
   matching prefix is found.
   </para>
      </returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to <see langword="true" /> and the <paramref name="prefix" /> value is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>
        <para>Parses the attribute value into one or more 
   <see langword="Text" />, <see langword="EntityReference" />, or 
   <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>
        <para> Resolves the entity reference for EntityReference nodes.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">Calling this method.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>
        <para> Gets the type of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>
        <para> Gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>
        <para>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlValidatingReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>
        <para>Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>
        <para> Gets the depth of
 the current node in the XML document.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>
        <para> Gets the base URI of the current node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>
        <para>Gets a value indicating whether the current node is an
      empty element (for example, <c>&lt;MyElement/&gt;</c>
   ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>
        <para> Gets a value indicating whether the current node is an
 attribute that was generated from the default value defined
 in the DTD or schema.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>
        <para>
       Gets the quotation mark character used to enclose the value of an attribute
       node.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>
        <para>Gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>
        <para>Gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>
        <para> When overridden in a derived class, gets the state of the reader.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>
        <para> When overridden in a derived class, gets a
 value indicating whether the reader is positioned at the end of the
 stream.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>
        <para>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>
        <para>Gets the encoding attribute for the
 document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>
        <para>Gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Item(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />.</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Item(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Item(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>
        <para>Sets an event handler for receiving information about DTD, XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema
      validation errors.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>
        <para>Gets a schema type object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlReader" /> used to construct this
<see langword="XmlValidatingReader" /> 
.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>
        <para>Gets a value describing what type of validation to
      perform.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">Setting the property after a Read has been called.</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>
        <para> Gets a <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> to use for validation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>
        <para>Gets or sets a value that specifies how the reader handles entities.</para>
      </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Invalid value was specified.</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>
        <para>Gets a value indicating whether this reader can parse
 and resolve entities.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>
        <para> Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving external DTD and schema location
   references. The <see langword="XmlResolver" /> is also used to
   handle any import or include elements
   found in XML Schema definition language (XSD) schemas.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>
        <para> Gets or sets a value indicating whether to do namespace support.
 </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>
        <para>Represents white space in element content.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>
        <para> Gets the type of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
      <exception cref="T:System.ArgumentException">Setting <see langword="Value" /> to invalid white space characters.</exception>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>
        <para> Specifies formatting options for the <see cref="T:System.Xml.XmlTextWriter" /> .
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>
        <para> No special formatting is applied. This is the default.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>
        <para> Causes child elements to be indented
      according to the <see cref="P:System.Xml.XmlTextWriter.Indentation" /> and <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> settings. This option indents element
      content only; mixed content is not affected. For the XML 1.0
      definitions of
      
      these terms, see the W3C documentation (http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content and http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content).</para>
      </summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>
        <para> Specifies the state of the <see cref="T:System.Xml.XmlWriter" /> .
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>
        <para> A Write method has not been called.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>
        <para> The prolog is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>
        <para> An element start tag is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>
        <para> An attribute value is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>
        <para> The element content is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>
        <para> The <see cref="M:System.Xml.XmlWriter.Close" /> method has been called.
   </para>
      </summary>
    </member>
    <member name="T:System.Xml.IXmlValueReader">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadValue">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadStringValue">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadTextValue">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadBinaryValue">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadBooleanValue">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadInt32Value">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadInt64Value">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadDoubleValue">
    </member>
    <member name="M:System.Xml.IXmlValueReader.ReadDecimalValue">
    </member>
    <member name="P:System.Xml.IXmlValueReader.SystemType">
    </member>
    <member name="T:System.Xml.XmlInfosetReader">
    </member>
    <member name="T:System.Xml.IXmlInfosetReader">
    </member>
    <member name="T:System.Xml.IXmlInfoItem">
    </member>
    <member name="M:System.Xml.IXmlInfoItem.CopyToReader">
    </member>
    <member name="M:System.Xml.IXmlInfoItem.CopyToWriter(System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="P:System.Xml.IXmlInfoItem.ItemType">
    </member>
    <member name="P:System.Xml.IXmlInfoItem.Namespace">
    </member>
    <member name="P:System.Xml.IXmlInfoItem.LocalName">
    </member>
    <member name="P:System.Xml.IXmlInfoItem.Prefix">
    </member>
    <member name="P:System.Xml.IXmlInfoItem.BaseUri">
    </member>
    <member name="P:System.Xml.IXmlInfoItem.UnderlyingObject">
    </member>
    <member name="M:System.Xml.IXmlInfosetReader.Read">
    </member>
    <member name="M:System.Xml.IXmlInfosetReader.Skip">
    </member>
    <member name="M:System.Xml.IXmlInfosetReader.Close">
    </member>
    <member name="P:System.Xml.IXmlInfosetReader.ReaderState">
    </member>
    <member name="P:System.Xml.IXmlInfosetReader.Depth">
    </member>
    <member name="P:System.Xml.IXmlInfosetReader.ReaderSettings">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.CopyToReader">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.CopyToWriter(System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.LookupNamespace(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.LookupNamespace(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.LookupPrefix(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.LookupPrefix(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadStringValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadTextValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadBinaryValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadBooleanValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadInt32Value">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadInt64Value">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadDoubleValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadDecimalValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.HasLineInfo">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.Read">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.Skip">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.Close">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.Dispose">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadAttributes">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.Int32)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String,System.Int32)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String,System.Int32,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String,System.String,System.Int32)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadToNext(System.Xml.XmlInfosetReaderState,System.String,System.String,System.Int32,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadInnerXml">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadOuterXml">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadStartElement">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadStartElement(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadStartElement(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadStartElement(System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadStartElement(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadEndElement">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementString">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementString(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementString(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementString(System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementString(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementValue">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementValue(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementValue(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementValue(System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetReader.ReadElementValue(System.String,System.String,System.Boolean)">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.ItemType">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.Namespace">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.LocalName">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.Prefix">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.BaseUri">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.UnderlyingObject">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.NameTable">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.SystemType">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.LineNumber">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.LinePosition">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.ReaderState">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.Depth">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.ReaderSettings">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.SchemaInfo">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.DocumentInfo">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.Name">
    </member>
    <member name="P:System.Xml.XmlInfosetReader.IsSignificantWhitespace">
    </member>
    <!-- Badly formed XML comment ignored for member "P:System.Xml.XmlBinaryReader.SchemaType" -->
    <member name="T:System.Xml.XmlInfosetWriter">
    </member>
    <member name="T:System.Xml.IXmlInfosetWriter">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Object)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.String)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.IO.TextReader)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.IO.Stream)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Boolean)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Int32)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Int64)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Double)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Decimal)">
    </member>
    <member name="M:System.Xml.IXmlValueWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Xml.IXmlValueReader)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.StartTree">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.EndTree">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteStartDocument">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteEndDocument">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteStartElement(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteEndElement(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteEndElement">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.StartElementContent">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteStartAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteEndAttribute">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteTextBlock(System.String)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteNamespaceDeclaration(System.String,System.String)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteProcessingInstruction(System.String,System.String)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteComment(System.String)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.WriteItemReference(System.Xml.IXmlInfoItem)">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.Flush">
    </member>
    <member name="M:System.Xml.IXmlInfosetWriter.Close">
    </member>
    <member name="P:System.Xml.IXmlInfosetWriter.Features">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Object)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.IO.TextReader)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.IO.Stream)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Int32)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Int64)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Double)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Decimal)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteValue(System.Xml.Schema.XmlSchemaType,System.Xml.IXmlValueReader)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.StartTree">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.EndTree">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteStartDocument">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteEndDocument">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteStartElement(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteEndElement(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteEndElement">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.StartElementContent">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteStartAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteEndAttribute">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteTextBlock(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteNamespaceDeclaration(System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteProcessingInstruction(System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteComment(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteItemReference(System.Xml.IXmlInfoItem)">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.Flush">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.Close">
    </member>
    <member name="M:System.Xml.XmlInfosetWriter.WriteElement(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType,System.String)">
    </member>
    <member name="P:System.Xml.XmlInfosetWriter.Features">
    </member>
    <member name="T:System.Xml.ConformanceLevel">
    </member>
    <member name="F:System.Xml.ConformanceLevel.None">
    </member>
    <member name="F:System.Xml.ConformanceLevel.DataModel">
    </member>
    <member name="F:System.Xml.ConformanceLevel.Entity">
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
    </member>
    <member name="T:System.Xml.XmlInfosetNavigator">
    </member>
    <member name="T:System.Xml.IXmlInfosetNavigator">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToParent">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToFirstChild">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToNextSibling">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToFirstAttribute">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToNextAttribute">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToFirstNamespace(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToNextNamespace(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToFirstValue">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToNextValue">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveTo(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToId(System.String)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.ComparePosition(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.Clone">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToRoot">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.IsDescendant(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.IsSamePosition(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToElementChild(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToElementSibling(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToChild(System.Xml.XmlInfoItemType)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToSibling(System.Xml.XmlInfoItemType)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToAttribute(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToElementDescendantOf(System.Xml.IXmlInfosetNavigator,System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.IXmlInfosetNavigator.MoveToDescendantOf(System.Xml.IXmlInfosetNavigator,System.Xml.XmlInfoItemType)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadBooleanValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadInt32Value">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadInt64Value">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadDoubleValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadDecimalValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadStringValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadTextValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ReadBinaryValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.CopyToWriter(System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.LookupNamespace(System.String)">
      <summary>
            Shortcut for NamespaceResolver.LookupNamespace(prefix).
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.LookupNamespace(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.LookupPrefix(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.LookupPrefix(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToFirstChild">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToNextSibling">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToFirstAttribute">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToNextAttribute">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToFirstNamespace(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToNextNamespace(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToFirstValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToNextValue">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToParent">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveTo(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToId(System.String)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.ComparePosition(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToRoot">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.IsDescendant(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.IsSamePosition(System.Xml.IXmlInfosetNavigator)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToElementChild(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToElementSibling(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToChild(System.Xml.XmlInfoItemType)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToSibling(System.Xml.XmlInfoItemType)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToAttribute(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToElementDescendantOf(System.Xml.IXmlInfosetNavigator,System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToDescendantOf(System.Xml.IXmlInfosetNavigator,System.Xml.XmlInfoItemType)">
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToElementChild(System.String,System.String)">
      <summary>
            Shortcut for IXmlInfosetNavigator.MoveToElementChild(), passing false as the atomizedNames parameter.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToElementSibling(System.String,System.String)">
      <summary>
            Shortcut for IXmlInfosetNavigator.MoveToElementSibling(), passing false as the atomizedNames parameter.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.GetAttribute(System.String,System.String)">
      <summary>
            Returns the value of the attribute with the localName and namespace.  Returns null if no such attribute exists.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToAttribute(System.String,System.String)">
      <summary>
            Shortcut for IXmlInfosetNavigator.MoveToAttribute(), passing false as the atomizedNames parameter.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToNamespace(System.String)">
      <summary>
            Position the navigator on the namespace node that declares the given prefix (do not assume prefix is atomized).  If no such
            declaration exists, return false.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.MoveToNamespace(System.String,System.Boolean)">
      <summary>
            Position the navigator on the namespace node that declares the given prefix.  If no such declaration exists,
            return false.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.Select(System.Xml.Query.XmlCommand,System.Xml.XmlArgumentList)">
      <summary>
            Execute the specified XmlCommand with respect to this navigator's current position, using the specified set of
            XmlArguments.  Return an enumeration containing a set of XmlInfosetNavigators, one for each node or atomic value
            in the result set.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.Select(System.String)">
      <summary>
            Execute the specified XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using only the built-in prefix mappings.  Return an enumeration containing a set of XmlInfosetNavigators,
            one for each node or atomic value in the result set.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.Select(System.String,System.Xml.XmlQueryLanguage)">
      <summary>
            Execute the specified XPath or XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using only the built-in prefix mappings.  Return an enumeration containing a set of XmlInfosetNavigators,
            one for each node or atomic value in the result set.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.Select(System.String,System.Xml.XmlQueryLanguage,System.Xml.IXmlNamespaceResolver)">
      <summary>
            Execute the specified XPath or XQuery expression with respect to this navigator's current position.  Resolve prefixes
            in the expression using the specifed IXmlNamespaceResolver.  Return an enumeration containing a set of XmlInfosetNavigators,
            one for each node or atomic value in the result set.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingle(System.Xml.Query.XmlCommand,System.Xml.XmlArgumentList)">
      <summary>
            Execute the specified XmlCommand with respect to this navigator's current position, using the specified set of
            XmlArguments.  If the expression results in multiple items, throw an error.  If the expression results in no items,
            return null.  Otherwise, return a single XmlInfosetNavigator.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingle(System.String)">
      <summary>
            Execute the specified XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using only the built-in prefix mappings.  If the expression results in multiple items, throw an error.
            If the expression results in no items, return null.  Otherwise, return a single XmlInfosetNavigator.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingle(System.String,System.Xml.XmlQueryLanguage)">
      <summary>
            Execute the specified XPath or XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using only the built-in prefix mappings.  If the expression results in multiple items, throw an error.
            If the expression results in no items, return null.  Otherwise, return a single XmlInfosetNavigator.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingle(System.String,System.Xml.XmlQueryLanguage,System.Xml.IXmlNamespaceResolver)">
      <summary>
            Execute the specified XPath or XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using the specified IXmlNamespaceResolver.  If the expression results in multiple items, throw an error.
            If the expression results in no items, return null.  Otherwise, return a single XmlInfosetNavigator.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingleValue(System.Xml.Query.XmlCommand,System.Xml.XmlArgumentList)">
      <summary>
            Execute the specified XmlCommand with respect to this navigator's current position, using the specified set of
            XmlArguments.  If the expression results in multiple items, throw an error.  If the expression results in no items,
            return null.  Otherwise, return the value of the single item as an object (by calling GetValue()).
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingleValue(System.String)">
      <summary>
            Execute the specified XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using only the built-in prefix mappings.  If the expression results in multiple items, throw an error.
            If the expression results in no items, return null.  Otherwise, return the value of the single item as an object (by
            calling GetValue()).
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingleValue(System.String,System.Xml.XmlQueryLanguage)">
      <summary>
            Execute the specified XPath or XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using only the built-in prefix mappings.  If the expression results in multiple items, throw an error.
            If the expression results in no items, return null.  Otherwise, return the value of the single item as an object (by
            calling GetValue()).
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.SelectSingleValue(System.String,System.Xml.XmlQueryLanguage,System.Xml.IXmlNamespaceResolver)">
      <summary>
            Execute the specified XQuery expression with respect to this navigator's current position.  Resolve prefixes in the
            expression using the specified IXmlNamespaceResolver.  If the expression results in multiple items, throw an error.
            If the expression results in no items, return null.  Otherwise, return the value of the single item as an object (by
            calling GetValue()).
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.CopyToReader">
      <summary>
            This CopyToReader returns XmlInfosetNavigator rather than IXmlInfosetNavigator.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetNavigator.Clone">
      <summary>
            Clone() method that returns strongly-typed XmlInfosetNavigator rather than object or IXmlInfosetNavigator.
            </summary>
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.SystemType">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.ItemType">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.Namespace">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.LocalName">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.Name">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.Prefix">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.BaseUri">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.UnderlyingObject">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.NameTable">
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.HasAttributes">
      <summary>
            Returns true if there are any attributes for the node.
            </summary>
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.HasChildren">
      <summary>
            Returns true if the current node has children.
            </summary>
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.OuterXml">
      <summary>
            Returns the markup representing the current node and all of its children.
            </summary>
    </member>
    <member name="P:System.Xml.XmlInfosetNavigator.InnerXml">
      <summary>
            Returns the markup representing just the children of the current node.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.WriteStartElement(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.WriteEndElement(System.String,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.ElementTextBlock(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.AttributeTextBlock(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.WriteStartCData" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.WriteEndCData" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.WriteCDataTextBlock(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.LtEntity(System.Char*)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.AmpEntity(System.Char*)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.StartCData(System.Char*)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriter.EndCData(System.Char*)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.WriteStartElement(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.WriteEndElement(System.String,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.ElementTextBlock(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.AttributeTextBlock(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.WriteStartCData" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.WriteEndCData" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.WriteCDataTextBlock(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.LtEntity(System.Byte*)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.AmpEntity(System.Byte*)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.StartCData(System.Byte*)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriter.EndCData(System.Byte*)" -->
    <member name="T:System.Xml.IXmlDataEvidence">
    </member>
    <member name="P:System.Xml.IXmlDataEvidence.Evidence">
    </member>
    <member name="T:System.Xml.DtdParsedEventHandler">
    </member>
    <member name="T:System.Xml.IXmlDocumentInfo">
    </member>
    <member name="M:System.Xml.IXmlDocumentInfo.GetNotations">
    </member>
    <member name="M:System.Xml.IXmlDocumentInfo.GetUnparsedEntities">
    </member>
    <member name="M:System.Xml.IXmlDocumentInfo.GetDtdChildren">
    </member>
    <member name="P:System.Xml.IXmlDocumentInfo.Encoding">
    </member>
    <member name="P:System.Xml.IXmlDocumentInfo.Version">
    </member>
    <member name="P:System.Xml.IXmlDocumentInfo.Standalone">
    </member>
    <member name="P:System.Xml.IXmlDocumentInfo.HasParsedDtd">
    </member>
    <member name="P:System.Xml.IXmlDocumentInfo.SystemID">
    </member>
    <member name="P:System.Xml.IXmlDocumentInfo.PublicID">
    </member>
    <member name="E:System.Xml.IXmlDocumentInfo.DtdParsed">
    </member>
    <member name="T:System.Xml.IXmlInfosetEditor">
    </member>
    <member name="T:System.Xml.IXmlSchemaInfo">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.Validity">
    </member>
    <member name="E:System.Xml.IXmlSchemaInfo.ValidationEventHandler">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.IsDefault">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.IsNil">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.HasMixedContent">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.ExpectedElements">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.ExpectedAttributes">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.SchemaType">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.SchemaElement">
    </member>
    <member name="P:System.Xml.IXmlSchemaInfo.SchemaAttribute">
    </member>
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriterIndent.WriteComment(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlEncodedTextWriterIndent.WriteProcessingInstruction(System.String,System.String)" -->
    <member name="T:System.Xml.XmlFactory">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetReader(System.String)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetReader(System.IO.TextReader)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetReader(System.IO.Stream)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetReader(System.IO.Stream,System.Text.Encoding)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetReader(System.Xml.IXmlInfosetReader)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetReader(System.Xml.XmlReader)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetWriter(System.String)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetWriter(System.IO.TextWriter)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetWriter(System.IO.Stream)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetWriter(System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetWriter(System.Xml.XmlWriter)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetDocument">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetDocument(System.String)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetDocument(System.String,System.IO.TextReader)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetDocument(System.String,System.IO.Stream)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetDocument(System.String,System.IO.Stream,System.Text.Encoding)">
    </member>
    <member name="M:System.Xml.XmlFactory.CreateInfosetDocument(System.Xml.IXmlInfosetReader)">
    </member>
    <member name="P:System.Xml.XmlFactory.NameTable">
    </member>
    <member name="P:System.Xml.XmlFactory.XmlResolver">
    </member>
    <member name="P:System.Xml.XmlFactory.ReaderSettings">
    </member>
    <member name="P:System.Xml.XmlFactory.WriterSettings">
    </member>
    <member name="T:System.Xml.XmlWriterFeatures">
    </member>
    <member name="F:System.Xml.XmlWriterFeatures.None">
    </member>
    <member name="F:System.Xml.XmlWriterFeatures.Conformance">
    </member>
    <member name="F:System.Xml.XmlWriterFeatures.SchemaValidate">
    </member>
    <member name="F:System.Xml.XmlWriterFeatures.TracksElementNames">
    </member>
    <member name="T:System.Xml.XmlInfoItemType">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.Element">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.Attribute">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.Namespace">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.Text">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.ProcessingInstruction">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.Comment">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.Document">
    </member>
    <member name="F:System.Xml.XmlInfoItemType.AtomicValue">
    </member>
    <member name="T:System.Xml.XmlInfosetReaderState">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.Initial">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.Closed">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.StartDocument">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.StartElement">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.StartElementContent">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.StartAttribute">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.Text">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.Comment">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.ProcessingInstruction">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.AtomicValue">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.Namespace">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.EndDocument">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.EndElement">
    </member>
    <member name="F:System.Xml.XmlInfosetReaderState.EndAttribute">
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XsdValidate">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdValidate">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.EraseTypeInfo">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreSchemaLocation">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreInlineSchema">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
    </member>
    <member name="T:System.Xml.XmlTextWriterFactory">
      <summary>
            Dispenses optimal XmlTextBuilder implementation based on parameters to factory methods.  For example,
            if the encoding is UTF-8, a faster implementation of XmlTextBuilder is available than the stock
            XmlEncodedTextBuilder.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriterIndent.WriteComment(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlUtf8TextWriterIndent.WriteProcessingInstruction(System.String,System.String)" -->
    <member name="T:System.Xml.XmlOutputMethod">
    </member>
    <member name="T:System.Xml.XmlStandalone">
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CDataSectionElements">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.MediaType">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DocTypeSystem">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DocTypePublic">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DocTypeSubset">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Standalone">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitEncoding">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.BreakOnAttributes">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NormalizeNewLines">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Schemas">
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>
        <para> Encapsulates a compiled XPath expression. This class is returned as a
      result of a call to <see cref="M:System.Xml.XPath.XPathNavigator.Compile(System.String)" /> and is used by the <see cref="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)" />, <see cref="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)" /> and <see cref="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)" /> methods.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>
        <para> Sorts the nodes
      selected by the <see langword="XPathExpression" />,
      according to the <see cref="T:System.Collections.IComparer" />
      interface.</para>
      </summary>
      <param name="expr">
        <para>An expression representing the sort key. This can be a string or an <see langword="XPathExpression" /> object. The result of this expression is converted to a string, according to the XPath specification, for comparison. In an XSLT stylesheet, if xsl:sort is used, but no select expression is specified, then string(.) is used by default.</para>
      </param>
      <param name=" comparer">A class derived from the <see langword="IComparer" /> interface to use for the data type comparison.</param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see langword="XPathExpression" /> or sort key includes a prefix and either an <see langword="XmlNamepsaceManager" /> is not provided, or the prefix cannot be found in the supplied <see langword="XmlNamepsaceManager." /></exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>
        <para> Sorts the nodes selected by the
   <see langword="XPathExpression" /> according to the supplied parameters.</para>
      </summary>
      <param name="expr">
        <para>An expression representing the sort key. This can be a string or an <see langword="XPathExpression" /> object. The result of this expression is converted to a string, according to the XPath specification, for comparison. In an XSLT stylesheet, if <see langword="xsl:sort" /> is used, but no select expression is specified, then string(.) is used by default.</para>
      </param>
      <param name=" order">A <see cref="T:System.Xml.XPath.XmlSortOrder" /> value indicating the sort order.</param>
      <param name=" caseOrder">A <see cref="T:System.Xml.XPath.XmlCaseOrder" /> value indicating how to sort upper/lower case letters. This is language dependent, providing a <paramref name="lang" /> parameter is supplied.</param>
      <param name=" lang">
        <para>The language to use for comparison. Uses the <see cref="T:System.Globalization.CultureInfo" /> class that can be passed to the <see langword="String.Compare" /> method for the language types, for example, "us-en" for US English. If an empty string is specified, the system environment is used to determine the <see langword="CultureInfo" /> .</para>
      </param>
      <param name=" dataType">
        <see cref="T:System.Xml.XPath.XmlDataType" />indicating sort order for data type.</param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see langword="XPathExpression" /> or sort key includes a prefix and either an <see langword="XmlNamepsaceManager" /> is not provided, or the prefix cannot be found in the supplied <see langword="XmlNamepsaceManager." /></exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>
        <para> Clones the <see langword="XPathExpression" />.</para>
      </summary>
      <returns>
        <para>A new <see langword="XPathExpression" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>
        <para> Specifies the <see cref="T:System.Xml.XmlNamespaceManager" />
to use for resolving namespaces.</para>
      </summary>
      <param name="nsManager">The <see langword="XmlNamespaceManager" /> object used for resolving namespaces.</param>
      <exception cref="T:System.Xml.XPath.XPathException">The <paramref name="nsManager" /> is not derived from <see langword="XmlNamespaceManager" />.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>
        <para> Gets a string representation of the
   <see langword="XPathExpression" />
   .</para>
      </summary>
      <summary>
        <para> When overridden in a derived class, gets a string representation of the
   <see langword="XPathExpression" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>
        <para> Gets the result type
      of the <see langword="XPathExpression" /> as defined
      by the W3C XPath specification.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>
        <para>Encapsulates the current execution context of the XSLT processor allowing XPath
      to resolve functions, parameters, and namespaces within XPath expressions.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> class with the specified <see cref="T:System.Xml.NameTable" /> .</para>
      </summary>
      <param name="table">The <see langword="NameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, resolves variable reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextVariable" />
representing the variable.</para>
      </summary>
      <param name="prefix">The prefix of the variable as it appears in the XPath expression.</param>
      <param name=" name">The name of the variable.</param>
      <returns>
        <para>An <see langword="IXsltContextVariable" /> representing
 the variable at runtime.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>
        <para>When overridden in a derived class, resolves a function
 reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> representing the
 function. The <see langword="IXsltContextFunction" />
 is used at execution time to get the
 return value of the function.</para>
      </summary>
      <param name="prefix">The prefix of the function as it appears in the XPath expression.</param>
      <param name=" name">The name of the function.</param>
      <param name=" ArgTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).</param>
      <returns>
        <para>An <see langword="IXsltContextFunction" /> representing
 the function.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para>When overridden in a derived class, evaluates whether to preserve
      white space nodes or strip them for the given context.</para>
      </summary>
      <param name="node">The white space node that is to be preserved or stripped in the current context.</param>
      <returns>
        <para>Returns <see langword="true" /> if 
   the white space
   is to be preserved or <see langword="false" /> if the white space is to be
   stripped.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, compares the base URIs of two documents based upon the
      order the documents were loaded by the XSLT processor (that is the <see cref="T:System.Xml.Xsl.XslTransform" /> class).</para>
      </summary>
      <param name="baseUri">The base URI of the first document to compare.</param>
      <param name=" nextbaseUri">The base URI of the second document to compare.</param>
      <returns>
        <para>An integer value describing the relative order of the
      two base URIs. <see langword="-1" /> if
   <paramref name="baseUri" /> occurs before <paramref name="nextbaseUri" />, <see langword="0" /> if the
      two base URIs are identical and <see langword="1" /> if <paramref name="baseUri" /> occurs
      after <paramref name="nextbaseUri" />.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether to include white space nodes in
      the output.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathDocument">
      <summary>
        <para> Provides a fast, read-only cache for XML document processing using XSLT.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class. </para>
      </summary>
      <param name=" reader">An <see cref="T:System.Xml.XmlReader" /> containing the data to load.</param>
      <param name="space">An <see cref="T:System.Xml.XmlSpace" /> value indicating whether to preserve white space. Setting this to XmlSpace.Default preserves only significant white space; XmlSpace.Preserve preserves all white space. </param>
      <exception cref="T:System.Xml.XmlException">There is a fatal error in the XML. In this case, the <see langword="XPathDocument" /> remains empty.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> containing the data to load.</param>
      <exception cref="T:System.Xml.XmlException">There is a fatal error in the XML. In this case, the <see langword="XPathDocument" /> remains empty.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.TextReader)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="reader">A <see cref="T:System.IO.TextReader" /> containing the data to load.</param>
      <exception cref="T:System.Xml.XmlException">There is a fatal error in the XML. In this case, the <see langword="XPathDocument" /> remains empty.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="stream">The stream containing the data to load.</param>
      <exception cref="T:System.Xml.XmlException">There is a fatal error in the XML. In this case, the <see langword="XPathDocument" /> remains empty.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="uri">A URI that specifies a file containing the data to load.</param>
      <exception cref="T:System.Xml.XmlException">There is a fatal error in the XML. In this case, the <see langword="XPathDocument" /> remains empty.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the <see langword="XPathDocument" /> class. </para>
      </summary>
      <param name="uri">A URI that specifies a file containing the data to load.</param>
      <param name=" space">An <see cref="T:System.Xml.XmlSpace" /> value indicating whether to preserve white space. Setting this to XmlSpace.Default preserves only significant white space; XmlSpace.Preserve preserves all white space.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.CreateNavigator">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for navigating this document.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNavigator" />
object.</para>
      </returns>
    </member>
    <member name="T:System.Xml.XPath.XPathException">
      <summary>
        <para> The exception that is thrown when an error occurs when processing an
      XPath expression.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathException" /> class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XPathException" />.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XPathException" /> properties
   into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="XPathException" /> class using the message and <see cref="T:System.Exception" /> object.</para>
      </summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The <see langword="Exception" /> which threw the <see langword="XPathException" />, if any. This value can be <see langword="null" />.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathException.Message">
      <summary>
   Gets the error message describing the
   exception.
</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>
        <para>Specifies the sort order.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>
        <para>Nodes are sorted in ascending order. For example, if the 
 numbers 1,2,3,4 were being sorted in an ascending order, they would appear
 as 1,2,3,4.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>
        <para>Nodes are sorted in descending order. For example, 
 if the numbers 1,2,3,4 were being sorted in an descending order, they would
 appear as, 4,3,2,1.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>
        <para> Specifies the sort
      order for upper and lower case letters.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>
        <para> Ignore the case.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>
    Upper case letters are sorted before lower
    case letters.
 </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>
    Lower case letters are sorted before upper
    case letters.
 </summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>
        <para>Specifies the data type used to determine sort order.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>
    Values are sorted alphabetically.
 </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>
    Values are sorted numerically.
 </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>
        <para> Specifies the return type of the XPath expression.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>
        <para>A numeric value.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>
        <para>A string value.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>
        <para>Boolean value <see langword="true" /> or <see langword="false" />.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>
   A node collection.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>
        <para>A tree fragment.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>
   Any of the XPath node types.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>
   The expression does not evaluate to the correct XPath
   type.
</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>
        <para>Defines the namespace scope. The enumeration can be
      passed to the <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace" qualify="true" />
      and <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace" qualify="true" /> methods to specify the type of namespace node
      to move to.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>
        <para> Returns all namespaces defined in the scope of the 
      current node. This includes the xmlns:xml namespace which is always
      declared implicitly. The order of the namespaces returned is not defined.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>
        <para> Returns all namespaces defined in the 
      scope of the current node, excluding the xmlns:xml namespace, which
      is always declared implicitly. The order of the namespaces returned is not defined.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>
        <para> Returns all namespaces that are defined locally at 
      the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>
        <para>Specifies the XPath node types that can be returned from the <see cref="T:System.Xml.XPath.XPathNavigator" />.</para>
        <para>For more information on XPath node types, see the Data Model section of the
   W3C XML Path Language (XPath) Version 1.0 Recommendation located at
   http://www.w3.org/TR/xpath#data-model.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>
        <para>The root of the node tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>
        <para> An element in the node tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>
   An attribute in the node tree.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>
        <para> 
      A namespace node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>
        <para> The text content of an element.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>
        <para>A node with white space characters and xml:space set to preserve.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>
        <para>A node with only white space characters and no significant white
      space.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>
        <para>A processing instruction. <SpecialLocalizableItem kind="UIElement">Important:</SpecialLocalizableItem> This does not include XML declarations, which are
   not visible to the <see cref="T:System.Xml.XPath.XPathNavigator" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>
   A comment.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>
        <para>All node types.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>
        <para>Provides an interface to a given variable that is defined in the
 stylesheet during runtime execution.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>
        <para> Evaluates the variable at runtime
      and returns an object that represents the value of the variable.</para>
      </summary>
      <param name="xsltContext">An <see cref="T:System.Xml.Xsl.XsltContext" /> representing the execution context of the variable.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the value of the
   variable. Possible return types include number, string, Boolean, document
   fragment or node set.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>
        <para> Gets a value indicating whether the variable is
 local.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>
        <para>Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformation (XSLT) parameter. This can be a parameter to
      a stylesheet or a template.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type 
   of the variable.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>
        <para> Contains a variable number of arguments
 which are either XSLT parameters or extension objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>
   Implements a new instance of the
<see langword="XsltArgumentList" />.
</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>
        <para>Gets the parameter associated with the namespace qualified
      name.</para>
      </summary>
      <param name="name">The name of the parameter. <see langword="XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be <see langword="null" /> .</param>
      <param name=" namespaceUri">The namespace URI associated with the parameter.</param>
      <returns>
        <para>The parameter object or
   <see langword="null" /> if one was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>
        <para>Gets the object associated with the given namespace.</para>
      </summary>
      <param name="namespaceUri">The namespace URI of the object. </param>
      <returns>
        <para>The namespace URI object or <see langword="null" /> if one
   was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>
        <para>Adds a parameter to the <see langword="XsltArgumentList" />
and associates it with the namespace qualified name.</para>
      </summary>
      <param name="name">The name to associate with the parameter.</param>
      <param name=" namespaceUri">The namespace URI to associate with the parameter. To use the default namespace, specify an empty string.</param>
      <param name=" parameter">The parameter value or object to add to the list.</param>
      <exception cref="T:System.ArgumentException">
        <para>The <paramref name="namespaceUri" /> is either <see langword="null" /> or http://www.w3.org/1999/XSL/Transform .</para>
        <para>The <paramref name="name" /> is not a valid name according to the W3C XML specification.</para>
        <para>The <paramref name="namespaceUri" /> already has a parameter associated with it.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>
        <para>Adds a new object to the
   <see langword="XsltArgumentList" /> and
      associates it with the namespace URI.</para>
        <note type="cnotes">
      In version 1.1 of the
      .NET Framework, <see langword="FullTrust" /> is required to call this
      method. See <see topic="cpconcodeaccesssecurity" /> for more information.
      
   </note>
      </summary>
      <param name="namespaceUri">The namespace URI to associate with the object. To use the default namespace, specify an empty string.</param>
      <param name=" extension">
        <para>The object to add to the list.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <para>The <paramref name="namespaceUri" /> is either <see langword="null" /> or http://www.w3.org/1999/XSL/Transform </para>
        <para>The <paramref name="namespaceUri" /> already has an extension object associated with it.</para>
      </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have sufficient permissions to call this method.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>
        <para>Removes the parameter from the
   <see langword="XsltArgumentList" />.</para>
      </summary>
      <param name="name">The name of the parameter to remove. <see langword="XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be <see langword="null" /> .</param>
      <param name=" namespaceUri">The namespace URI of the parameter to remove.</param>
      <returns>
        <para>The parameter object or <see langword="null" /> if one was
   not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>
        <para>Removes the object with the namespace URI from the
   <see langword="XsltArgumentList" />.</para>
      </summary>
      <param name="namespaceUri">The namespace URI associated with the object to remove.</param>
      <returns>
        <para> The object with the namespace URI or
   <see langword="null" /> if one was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>
        <para>Removes all parameters and extension objects from the
   <see langword="XsltArgumentList" />.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>
        <para>Provides an interface to a given function defined in the 
      XSLT stylesheet during runtime execution. </para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>
        <para>Provides the method to invoke the function with the
      given arguments in the given context.</para>
      </summary>
      <param name="xsltContext"> The XSLT context for the function call.</param>
      <param name=" args">The arguments of the function call. Each argument is an element in the array.</param>
      <param name=" docContext">The context node for the function call.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the
   function.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>
        <para>Gets the minimum number of arguments for the function.
      This enables the user to differentiate between overloaded functions.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>
        <para>Gets the maximum number of arguments for the function. This enables the
      user to differentiate between overloaded functions.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type
   returned by the function.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>
        <para>Gets the supplied XPath types for the function's argument
      list. This information can be used to discover the signature of the function
      which allows you to differentiate between overloaded functions.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>
        <para> The exception 
      that is thrown when an error occurs while processing an Extensible Stylesheet
      Language (XSL) transform.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
   Initializes a new instance of the
<see langword="XsltException" /> class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.
</summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XsltException" />.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XsltException" /> properties
   into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see langword="XsltException" /> class.</para>
      </summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> which threw the <see langword="XsltException" />, if any. This value can be <see langword="null" />.</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>
   Gets the location path of the stylesheet.
</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>
        <para> Gets the line number indicating where
      the error occurred in the stylesheet.</para>
        <note type="note">
      This property is used by
      the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class.
   </note>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>
        <para> Gets the line position indicating
      where the error occurred in the stylesheet.</para>
        <note type="note">
      This property is used by
      the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class.
   </note>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>
   Gets the formatted error message describing
   the current exception.
</summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>
        <para>The exception that is thrown by the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" /> method when an error is found in 
   the Extensible Stylesheet Transformation (XSLT) stylesheet.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see langword="XsltCompileException" /> class 
 using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XsltCompileException" />. </param>
      <param name="context">The <see langword="StreamingContext" /> object containing the context information.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XsltCompileException" /> properties into the 
<see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name="context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see langword="XsltCompileException" />
class.</para>
      </summary>
      <param name="inner">The <see cref="T:System.Exception" /> that threw the <see langword="XsltCompileException" />.</param>
      <param name=" sourceUri">The location path of the stylesheet.</param>
      <param name=" lineNumber">The line number indicating where the error occurred in the stylesheet.</param>
      <param name=" linePosition">The line position indicating where the error occurred in the stylesheet.</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltCompileException.Message">
      <summary>
        <para>Gets the formatted error message describing the location
      of the error. To get the actual error, you need to use the message
      on the inner exception.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>
        <para>Transforms XML data using an XSLT stylesheet.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="XslTransform" /> 
   class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XmlReader" />
   .</para>
      </summary>
      <param name="stylesheet">An <see langword="XmlReader" /> object that contains the XSLT stylesheet.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded scripts and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XmlReader" />
   .</para>
      </summary>
      <param name="stylesheet">An <see langword="XmlReader" /> object that contains the XSLT stylesheet.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" /> , external resources are not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Load" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded scripts and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
        <para>Loads the XSLT stylesheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</para>
      </summary>
      <param name="stylesheet">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT stylesheet.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid stylesheet. </exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded scripts and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>
        <para>Loads the XSLT stylesheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</para>
      </summary>
      <param name="stylesheet">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT stylesheet.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" /> , external resources are not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Load" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid stylesheet. </exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded scripts and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XPath.XPathNavigator" /> .</para>
      </summary>
      <param name="stylesheet">An <see langword="XPathNavigator" /> object that contains the XSLT stylesheet.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded scripts and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XPath.XPathNavigator" /> .</para>
      </summary>
      <param name="stylesheet">An <see langword="XPathNavigator" /> object that contains the XSLT stylesheet.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" /> , external resources are not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Load" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded scripts and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>
        <para>Loads the XSLT stylesheet specified by a URL.</para>
      </summary>
      <param name="url">The URL that specifies the XSLT stylesheet to load.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid stylesheet. </exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded script and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>
        <para>Loads the XSLT stylesheet specified by a URL.</para>
      </summary>
      <param name="url">The URL that specifies the XSLT stylesheet to load.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> to use to load the stylesheet and any stylesheet(s) referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements.</para>
        <para> If this is <see langword="null" /> , a default <see cref="T:System.Xml.XmlUrlResolver" /> with no user credentials is used to open the stylesheet. The default <see langword="XmlUrlResolver" /> is not used to resolve any external resources in the stylesheet, so <see langword="xsl:import" /> and <see langword="xsl:include" /> elements are not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Load" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">The stylesheet contains embedded script and the caller does not have <see langword="UnmanagedCode" /> permission.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the XSLT stylesheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />. This method
   allows you to limit the permissions of the stylesheet by specifying evidence.</para>
      </summary>
      <param name="stylesheet">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT stylesheet.</param>
      <param name="resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" />, external resources are not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Load" /> method completes.</para>
      </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" qualify="true" /> set on the assembly generated for the script block in the XSLT stylesheet. <para>If this is <see langword="null" /> , script blocks are not processed, the XSLT <c>document()</c> function is not supported, and privileged extension objects are disallowed.</para><para> The caller must have <see langword="ControlEvidence" /> permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to <see langword="null" /> .</para></param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">
        <para>The referenced stylesheet requires functionality that is not allowed by the evidence provided.</para>
        <para>The caller is tries to supply evidence and does not have <see langword="ControlEvidence" /> permission.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the XSLT stylesheet contained in the <see cref="T:System.Xml.XmlReader" /> . This method allows you
   to limit the permissions of the stylesheet by specifying
   evidence.</para>
      </summary>
      <param name="stylesheet">An <see langword="XmlReader" /> object containing the stylesheet to load.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" />, external resources are not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Load" /> method completes.</para>
      </param>
      <param name=" evidence">The <see cref="T:System.Security.Policy.Evidence" qualify="true" /> set on the assembly generated for the script block in the XSLT stylesheet. <para>If this is <see langword="null" /> , script blocks are not processed, the XSLT <c>document()</c> function is not supported, and privileged extension objects are disallowed.</para><para>The caller must have <see langword="ControlEvidence" /> permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to <see langword="null" /> .</para></param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">
        <para>The referenced stylesheet requires functionality that is not allowed by the evidence provided.</para>
        <para>The caller is tries to supply evidence and does not have <see langword="ControlEvidence" /> permission.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the XSLT stylesheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator" /> . This method
   allows you to limit the permissions of the stylesheet by specifying
   evidence.</para>
      </summary>
      <param name="stylesheet">An <see langword="XPathNavigator" /> object containing the stylesheet to load.</param>
      <param name="resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" />, external resources are not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Load" /> method completes.</para>
      </param>
      <param name="evidence">
        <para>The <see cref="T:System.Security.Policy.Evidence" qualify="true" /> set on the assembly generated for the script block in the XSLT stylesheet.</para>
        <para>If this is <see langword="null" /> , script blocks are not processed, the XSLT <c>document()</c> function is not supported, and privileged extension objects are disallowed.</para>
        <para>The caller must have <see langword="ControlEvidence" /> permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to <see langword="null" /> .</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid stylesheet.</exception>
      <exception cref="T:System.Security.SecurityException">
        <para>The referenced stylesheet requires functionality that is not allowed by the evidence provided.</para>
        <para>The caller is tries to supply evidence and does not have <see langword="ControlEvidence" /> permission.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" />
using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlReader" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <returns>
        <para>An <see langword="XmlReader" /> containing the results of the transform.</para>
      </returns>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" /> .</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <returns>
        <para>An <see langword="XmlReader" /> containing the results of the transform.</para>
      </returns>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using
   the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter" />
   .</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="XmlWriter" /> to which you want to output.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using
   the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter" />
   .</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="XmlWriter" /> to which you want to output.</param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.Stream" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The stream to which you want to output.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.Stream" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The stream to which you want to output.</param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="TextWriter" /> to which you want to output.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" /> , the document() function is not resolved. </para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" />
using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlReader" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <returns>
        <para>An <see langword="XmlReader" /> containing the results of the transform.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" />
using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlReader" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <returns>
        <para>An <see langword="XmlReader" /> containing the results of the transform.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="TextWriter" /> to which you want to output.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.Stream" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" /> ), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The stream to which you want to output.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.Stream" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" /> ), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The stream to which you want to output.</param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlWriter" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="XmlWriter" /> to which you want to output.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved.</para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlWriter" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="XmlWriter" /> to which you want to output.</param>
      <exception cref="T:System.Xml.Xsl.XsltException">
        <para>There was an error processing the XSLT transform.</para>
      </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>
        <para>Transforms the XML data in the input file and outputs the
      result to an output file.</para>
      </summary>
      <param name="inputfile">The URL of the source document to be transformed.</param>
      <param name=" outputfile">The URL of the output file.</param>
      <param name=" resolver">
        <para>The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is <see langword="null" />, the document() function is not resolved. </para>
        <para>The <see langword="XmlResolver" /> is not cached after the <see langword="Transform" /> method completes.</para>
      </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>
        <para>Transforms the XML data in the input file and outputs
      the result to an output file.</para>
      </summary>
      <param name="inputfile">The URL of the source document to be transformed.</param>
      <param name=" outputfile">The URL of the output file.</param>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>
        <para> Sets the <see cref="T:System.Xml.XmlResolver" /> used to resolve external resources when the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> method
   is called.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>
        <para> Represents the abstract class for mapping XML Schema definition language
      (XSD) and .NET Framework types.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>
        <para>Parses values from the 
   <see langword="XmlNameTable" /> .</para>
      </summary>
      <param name="s">string</param>
      <param name=" nameTable">
        <see langword="XmlNameTable" />
      </param>
      <param name=" nsmgr">
        <see langword="XmlNamespaceManager" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.FromNonPositiveInteger(System.Decimal)">
      <summary>
            Return the canonical string representation of a non-positive integer (stored as a CLR Int64).
            Note that the value 0 should be canonicalized as "-0" rather than "0".
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ToCanonicalString(System.Xml.Schema.XmlSchemaBuiltInType,System.Object)">
      <summary>
            Return the canonical XSD string representation of the boxed object.
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>
        <para> Gets the .NET Framework type for
      the specified XML Schema definition language (XSD) type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.XsdDataType">
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>
        <para>Gets the type for the string as specified in the World Wide Web Consortium (W3C)
      XML 1.0 specification.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>
        <para>Returns detailed information related to the
   <see langword="ValidationEventHandler" />
   .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>
        <para>Gets the severity of the validation event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>
   Gets the <see cref="T:System.Xml.Schema.XmlSchemaException" /> associated with the
   validation event.
</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>
        <para>Gets the text description corresponding to the
      validation event.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="T:System.Xml.Schema.ValidationEventArgs" />.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>
        <para>Contains the definition of a schema. All XML Schema definition language (XSD) elements are children of the
   <see langword="schema" /> element. Represents the World Wide Web Consortium (W3C)
   <see langword="schema" />
   element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>
        <para>Creates an empty schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>
        <para>Gets or sets the line number in the file to which the <see langword="schema" />
element refers.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>
        <para>Gets or sets the line position in the file to which the
   <see langword="schema" /> element refers.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>
        <para>Gets or sets the source location for the file
      that loaded the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>
        <para>Gets or sets the <see langword="XmlSerializerNamespaces" />
to
use with this schema object.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>
        <para>Provides the namespace for validation.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>
        <para>Provides the instance namespace.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>
        <para>Constructs a new, empty schema.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para>Reads an XML Schema definition language (XSD) from the 
      supplied <see cref="T:System.IO.TextReader" /> .</para>
      </summary>
      <param name="reader">The <see langword="TextReader" /> containing the XML Schema to read.</param>
      <param name=" validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors.</param>
      <returns>
   The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML
   Schema.
</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para>Reads an XML Schema definition language (XSD) schema
      from the supplied stream.</para>
      </summary>
      <param name="stream">The supplied data stream.</param>
      <param name=" validationEventHandler">The validation event handler that receives information about XML Schema syntax errors.</param>
      <returns>
   The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML
   Schema.
</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para>Reads an XML Schema definition language (XSD) schema 
      from the supplied <see cref="T:System.Xml.XmlReader" />
      .</para>
      </summary>
      <param name="reader">The <see langword="XmlReader" /> containing the XML Schema to read.</param>
      <param name=" validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors.</param>
      <returns>
   The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML
   Schema.
</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>
        <para>Writes the XML Schema to the supplied data stream.</para>
      </summary>
      <param name="stream">The supplied data stream.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>
        <para> Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="stream" /> .</para>
      </summary>
      <param name="stream">The supplied data stream.</param>
      <param name=" namespaceManager">The XmlNamespaceManager.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>
        <para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="TextWriter" /> .</para>
      </summary>
      <param name="writer">The supplied TextWriter.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>
        <para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="TextWriter" /> .</para>
      </summary>
      <param name="writer">The supplied TextWriter.</param>
      <param name=" namespaceManager">The XmlNamespaceManager.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>
        <para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="XmlWriter" /> .</para>
      </summary>
      <param name="writer">The supplied XmlWriter.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>
        <para> Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="XmlWriter" /> .</para>
      </summary>
      <param name="writer">The supplied XmlWriter.</param>
      <param name=" namespaceManager">The XmlNamespaceManager.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para> Compiles the XML Schema definition language (XSD)
      Schema Object Model (SOM) into schema information for validation. Used to check
      the syntactic and semantic structure of the programmatically-built SOM. Semantic
      validation checking is performed during compilation.</para>
      </summary>
      <param name="validationEventHandler">The validation event handler that receives information about XML Schema validation errors.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>
        <para>Gets or sets the form for attributes declared in the target
      namespace of the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>
        <para> Gets or sets the <see langword="BlockDefault" /> attribute on element and complex type 
   elements in the <see langword="targetNamespace" />
   of the schema. The <see langword="block" /> attribute prevents a complex
   type (or element) that has the specified
   type of derivation from being used in place of the inherited complex type (or
   element). The type of derivation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>
        <para>Gets or sets the default value of
      the <see langword="final" />
      attribute on element and complex type elements in the target namespace
      of this schema. The <see langword="final" /> attribute prevents the specified
      type of derivation of an element
      or complex type. The type of derivation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>
        <para>Gets or sets the form for elements declared in the target
      namespace of the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>
        <para>Gets or sets the property for the schema target namespace. The URI reference of
      the namespace of this schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>
        <para>Gets or sets the version of the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>
        <para> Gets the collection of
      included and imported schemas.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>
        <para> Gets the <see langword="Items" />
collection that is used to
add new element types at the <see langword="schema" />
element level.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>
        <para> Gets information that indicates if the schema has been compiled.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />, for all attributes in the schema,
   which holds the post-compilation value of the <see langword="Attribute" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all attribute groups in the
   schema, which holds the post-compilation value of
   the <see langword="AttributeGroups" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />for all schema types in the schema,
   which holds the post-compilation value of the <see langword="SchemaTypes" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all elements in the schema,
   which holds the post-compilation value of the <see langword="Elements" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>
        <para>Gets and sets the qualified attributes, which do not belong to the schema
      target namespace.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all groups in the schema,
   which holds the post-compilation value of the <see langword="Groups" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all notations in the schema.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>
        <para> Permits the elements in the group to appear (or not appear) in any order
      in the containing element. Represents the World Wide Web Consortium (W3C)<see langword=" all" /> element
      (compositor).</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>
        <para> An abstract class for <see langword="XmlSchemaChoice" />, <see langword="XmlSchemaAll" />, or <see langword="XmlSchemaSequence" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>
        <para>Base class for all particle types.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>
        <para> The base class for any element that can contain 
      annotation elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>
        <para> Gets or sets the <see langword="annotation" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>
        <para>Gets or sets the qualified attributes that do not belong to the schema
      target namespace.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>
        <para> Gets or sets the number as a string value. The minimum number of times the particle
      can occur. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>
        <para> Gets or sets the number as a string
      value. Maximum number of times the particle can occur. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>
        <para>Gets or sets the minimum number of times the particle can occur.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>
        <para>Gets or sets the maximum number of times the particle can occur.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>
        <para>This collection is used to add new elements to the
      compositor.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>
        <para>Gets the collection of <see langword="XmlSchemaElement" /> elements contained within
   the <see langword="all" /> compositor.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>
        <para>Defines an annotation. Represents the World Wide Web Consortium (W3C)
   <see langword="annotation" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>
        <para>Gets the <see langword="Items" /> 
collection that is used to store the <see langword="appinfo" /> and
<see langword="documentation" /> child 
elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>
        <para>Gets and sets the qualified attributes that do not belong to the schema target
      namespace.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>
        <para>Enables any element from the specified namespace or namespaces to
      appear in the containing <see langword="complexType" />element. Represents the World Wide Web Consortium (W3C)
   <see langword="any" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>
        <para>Gets or sets the namespaces containing the elements that can be used.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>
        <para> Gets or sets information about how an application or XML processor should
      handle the validation of XML documents for the elements specified by the
   <see langword="any" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>
        <para>Enables any attribute from the specified namespace or namespaces to
      appear in the containing <see langword="complexType" />
      element. Represents the World
      Wide Web Consortium
      (W3C) <see langword="anyAttribute" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>
        <para>Gets or sets the namespaces containing the attributes that can be used.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>
        <para>Gets or sets information about how an application or XML processor should
      handle the validation of XML documents for the attributes specified by the
   <see langword="anyAttribute" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>
        <para> Defines application specific information within an annotation. Represents the World
      Wide Web Consortium (W3C) <see langword="appinfo" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>
        <para>Gets or sets the source of the application information.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>
        <para>Gets or sets an array of <see langword="XmlNode" /> that represents the AppInfo child nodes. </para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>
        <para>Class for attribute types. Represents the World Wide Web Consortium (W3C) <see langword="attribute" /> element. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>
        <para>Gets or sets the default value for the attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>
        <para>Gets or sets the fixed value for the attribute. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>
        <para>Gets or sets the form for the attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>
        <para> Gets or sets the name of the attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>
        <para> Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>
        <para>Gets or sets the name of the simple type defined in this schema (or
      another schema indicated by the specified namespace). </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>
        <para> 
      Gets or sets the attribute type to a simple type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>
        <para>Gets or sets information about how the attribute is used.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>
        <para> Gets the qualified name for the attribute which holds the 
      post-compilation value of the <see langword="QualifiedName" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>
        <para>Gets the common language runtime (CLR) object based on
      the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />
      of the attribute that holds the post-compilation value of the
   <see langword="AttributeType" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>
        <para>Class for attribute groups. Groups a set of attribute declarations so that they
      can be incorporated as a group into complex type definitions. Represents the World
      Wide Web Consortium (W3C) <see langword="attributeGroup" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>
        <para>Gets or sets the name of the attribute group.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>
        <para>Gets the collection of attributes for the attribute group.
      Contains <see langword="XmlSchemaAttribute" /> and
   <see langword="XmlSchemaAttributeGroupRef" /> elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the
   attribute group. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>
        <para> Gets the redefined attribute group property from the XML Schema.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>
        <para>Class for the attribute group reference. Represents the World Wide Web Consortium (W3C) <see langword="attributeGroup" /> element with the <see langword="ref" />
attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>
        <para>Gets or sets the name of the referenced 
   <see langword="attributeGroup" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>
        <para>Allows only one of its children to appear in an instance. Represents the World
      Wide Web Consortium (W3C) <see langword="choice" />
      (compositor) element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>
        <para>Gets the collection of the elements contained with the 
      compositor (<see langword="choice" />
      ): <see langword="XmlSchemaElement" />, <see langword="XmlSchemaGroupRef" />,
   <see langword="XmlSchemaChoice" />, <see langword="XmlSchemaSequence" />, or
   <see langword="XmlSchemaAny" />
   .</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>
        <para> Contains a cache of XML Schema definition language (XSD) and XML-Data
      Reduced (XDR) schemas. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaCollection" />
   class with the specified <see cref="T:System.Xml.XmlNameTable" /> . The <see langword="XmlNameTable" />
   is used when loading schemas.</para>
      </summary>
      <param name="nametable">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>
        <para>Adds the schema located by the given URL into the schema
      collection.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema. For XML Schema definition language (XSD) schemas, this will typically be the <see langword="targetNamespace" /> .</param>
      <param name=" uri">The URL that specifies the schema to load.</param>
      <returns>
        <para>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection;
<see langword="null" /> if the schema being added is an XML-Data Reduced (XDR) schema or if there 
   are compilation errors in the schema.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>
        <para> Adds the schema contained in the <see cref="T:System.Xml.XmlReader" /> to the schema
   collection.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema. For XML Schema definition language (XSD) schemas, this will typically be the <see langword="targetNamespace" /> .</param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the schema to add.</param>
      <returns>
        <para>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection; <see langword="null" /> if the schema being added is an XML-Data Reduced (XDR) schema or if there are compilation errors in the schema.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
        <para>Adds the schema contained in the <see cref="T:System.Xml.XmlReader" /> to the
   schema collection. The specified <see cref="T:System.Xml.XmlResolver" /> is used to resolve any external resources.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema. For XML Schema definition language (XSD) schemas, this will typically be the <see langword="targetNamespace" /> .</param>
      <param name=" reader">
        <see cref="T:System.Xml.XmlReader" /> containing the schema to add.</param>
      <param name=" resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces referenced in <see langword="include" /> and <see langword="import" /> elements or <see langword="x-schema" /> attribute (XDR schemas). If this is <see langword="null" /> , external references are not resolved.</param>
      <returns>
        <para>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection;
<see langword="null" /> if the schema being added is an XML-Data Reduced (XDR) schema or if there 
   are
   compilation errors in the schema.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>Adds the <see cref="T:System.Xml.Schema.XmlSchema" /> to the collection.</para>
      </summary>
      <param name="schema">The <see langword="XmlSchema" /> to add to the collection.</param>
      <returns>
        <para>The <see langword="XmlSchema" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>
        <para>Adds the <see cref="T:System.Xml.Schema.XmlSchema" /> to the collection. The specified <see cref="T:System.Xml.XmlResolver" /> is used
   to resolve any external references.</para>
      </summary>
      <param name="schema">The <see langword="XmlSchema" /> to add to the collection.</param>
      <param name=" resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces referenced in <see langword="include" /> and <see langword="import" /> elements. If this is <see langword="null" />, external references are not resolved. </param>
      <returns>
        <para>The <see langword="XmlSchema" /> added to
   the schema collection.</para>
      </returns>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>
        <para>Adds all the namespaces defined in the given collection
      (including their associated schemas) to this collection.</para>
      </summary>
      <param name="schema">The <see langword="XmlSchemaCollection" /> you want to add to this collection.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>Gets a value indicating whether the 
   <see langword="targetNamespace" /> of the
      specified <see cref="T:System.Xml.Schema.XmlSchema" /> is in the collection.</para>
      </summary>
      <param name="schema">The <see langword="XmlSchema" /> object.</param>
      <returns>
        <para>
          <see langword="true" /> if there is a 
   schema in the collection with the same <see langword="targetNamespace" />
   ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>
        <para>Gets a value indicating whether a schema with the specified namespace is in the
      collection.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema. For XML Schema definition language (XSD) schemas, this will typically be the target namespace.</param>
      <returns>
        <para>
          <see langword="true" /> if a schema
   with the specified namespace is in the collection; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>
        <para>Provides support for the "for each" style iteration over the collection of schemas.</para>
      </summary>
      <returns>
        <para>An enumerator for iterating over all schemas in the
      current collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>
        <para>Copies all the <see langword="XmlSchema" /> objects from this
   collection into the given array starting at the given index.</para>
      </summary>
      <param name="array">The array to copy the objects to.</param>
      <param name=" index">The index in <paramref name="array" /> where copying will begin.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>
        <para> Gets the number of namespaces defined in this collection.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>
        <para>Gets the default <see langword="XmlNameTable" /> used by
   the <see langword="XmlSchemaCollection" /> when loading new schemas.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>
        <para> Sets an event handler for receiving information about the XML-Data Reduced (XDR) and XML
      Schema definition language (XSD) schema validation errors.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>
        <para> Gets the <see cref="T:System.Xml.Schema.XmlSchema" /> associated with the given namespace URI.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema you want to return. This will typically be the <see langword="targetNamespace" /> of the schema.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>
        <para>Supports a simple iteration over a collection. This class cannot be
       inherited.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the
      next schema in the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the move was successful; <see langword="false" /> if the enumerator has passed the end of the collection.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>
        <para>Gets the current <see cref="T:System.Xml.Schema.XmlSchema" /> in the collection.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>
        <para>Class that represents the complex content model for complex
      types. Contains extensions or restrictions on a complex type that has mixed
      content or elements only. Represents the World Wide Web Consortium
      (W3C) <see langword="complexContent" />
      element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>
        <para>An abstract class for the schema content model.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>
        <para>Gets or sets the content of the type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>
        <para> Gets or sets information that determines if the type has a mixed content model. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>
        <para>Gets or sets the content.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>
        <para> Class for complex types with a complex content model 
      derived by extension. Extends the complex type by adding attributes or elements.
      Represents the World Wide Web Consortium (W3C) <see langword="extension" />
      element for complex content.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>
        <para>An abstract class for schema content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>
        <para>Gets or sets the name of the
      complex type from which this type is derived by extension.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>
        <para>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, 
   or
<see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 
classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>
   Gets the collection of attributes for the complex
   content. Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and
<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> elements.
</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>
        <para>Gets or sets the <see langword="XmlSchemaAnyAttribute" /> component of the complex
   content model.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>
        <para> Class for complex types with a complex content model that
      are derived by restriction. Restricts the contents of the complex type to a
      subset of the inherited complex type. Represents the World Wide Web Consortium
      (W3C) <see langword="restriction" />
      element for complex
      content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>
        <para> Gets or sets
      the name of a complex type from which this type is derived by restriction.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>
        <para>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, 
   or
<see cref="T:System.Xml.Schema.XmlSchemaSequence" />classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>
        <para>Gets the collection of attributes for the complex type. 
      Contains the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and
   <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 
   elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content
   model.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>
        <para>Class for complex types. Defines a complex type that
      determines the set of attributes and content of an element. Represents the World
      Wide Web Consortium (W3C) <see langword="complexType" />
      element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>
        <para>The base class for all simple types and complex
      types.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlSchemaBuiltInType)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlSchemaBuiltInType)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>
        <para>Gets or sets the name of the type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>
        <para>Gets or sets the <see langword="final" /> property to indicate that no further derivations are allowed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>
        <para>Gets the qualified name for the type built from the <see langword="Name " />attribute of this type. This holds 
   the post-compilation value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>
        <para>Gets the post-compilation value of the <see langword="Final" /> property that holds the post-compilation
   value of the <see langword="Final" />
   property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>
        <para> Gets the object of the <see langword="simpleType" />
element or <see langword="complexType" /> element. This is a post-schema-validation-infoset variable.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>
        <para> Gets the object of the <see langword="simpleType" />
element or <see langword="complexType" /> element. This is a post-schema-validation-infoset variable.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>
        <para> When overridden in a derived class, this property gets information that indicates how this element
      has been derived from a base type. This property holds the post-compilation
      value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>
        <para>Gets the data type that holds the post-compilation
      value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>
        <para>Indicates that this type has a mixed content model. This
      property is only valid in a complex type.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>
        <para>Used to create a <see langword="complexType" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>
        <para>Gets or sets the information that determines if the <see langword="complexType " /> element can be used in the instance document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>
        <para>Gets or sets the <see langword="block" /> attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>
        <para> Gets or sets information that determines if the complex type has a mixed content
      model (markup within the content).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>
        <para>Gets or sets the content model type. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>
        <para> Gets or sets the compositor type as one of the
   <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />,
      or <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
      classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>
        <para>Gets the collection of attributes for the complex type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>
        <para>Gets or sets the value for the
   <see langword="XmlSchemaAnyAttribute" /> component of the complex
      type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>
        <para>Gets the content model of the complex type which holds
      the post-compilation value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>
        <para>Gets the particle which holds the post-compilation value
      of the <see langword="ContentTypeParticle" /> property. This
   <see langword="ContentTypeParticle" /> is determined after the content models of the most derived types and the base complex type have been resolved
      according to the rules defined in the World Wide Web Consortium (W3C) XML Schema
      definition language (XSD) specification. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>
        <para> Gets the value after the type has been compiled to the
      post-schema-validation infoset. This value indicates how the type is enforced when
   <see langword="xsi:type" />
   is used in
   the instance document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>
        <para> Gets the collection of all the attributes from this 
      complex type and its base types which holds the post-compilation value of the
   <see langword="AttributeUses" /> 
   property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>
        <para>Gets the <see langword="anyAttribute" /> element from this complex type and
   its base types which holds the post-compilation value of
   the <see langword="AttributeWildcard" />
   property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.LocalElements">
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>
        <para>Provides information about the validation mode of
   <see langword="any" /> and <see langword="anyAttribute" /> element replacements.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>
        <para>The item is not validated.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>
        <para>The item must consist of well-formed XML and is not
      validated by the schema.</para>
        <para>The XML processor attempts to notify the client through a validation event
      handler with <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> =
   <see langword="XmlSeverityType.Warning" />
   that no validation took place for the given
   item. If a validation event handler has not been setup, no information
   is returned when the warning is produced. </para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>
        <para>If the item has a uniquely determined declaration
      available, it must be valid with respect to that
      definition. Otherwise, the item is not validated.</para>
        <para>If the item is not validated, the XML processor attempts to notify the client through a validation event handler
      with <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> =
   <see langword="XmlSeverityType.Warning" />
   . If a validation
   event handler has not been setup, no information is returned when the warning is
   produced.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>
        <para>The item must be schema-valid based on the schema
      definition obtained from the namespace-qualified item name.</para>
   If a validation error occurs, and a validation event handler is not provided,
   an exception is thrown.
</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>
        <para> Enumerations for the content model of the complex
      type. This represents the content in the post-schema-validation infoset.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>
        <para> Text-only content.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>
        <para> Empty content.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>
        <para> Element-only content.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>
        <para> Mixed content.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>
        <para> Provides different
      methods for preventing derivation.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>
        <para>Override default derivation method to allow any
      derivation.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>
        <para> Refers to derivations by 
   <see langword="Substitution" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>
        <para> Refers to derivations by <see langword="Extension" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>
        <para> Refers to derivations by 
   <see langword="Restriction" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>
        <para>Refers to derivations by <see langword="List" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>
        <para> Refers to derivations by <see langword="Union" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>
        <para>
          <see langword="#all" /> . Refers to all
   derivation methods.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>
   Accepts the default derivation method.
</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>
        <para> Class that specifies information to be read or used by humans within an annotation.
      Represents the World Wide Web Consortium (W3C) <see langword="documentation" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>
        <para> Gets or sets the URI source of the information.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>
        <para>Gets or sets the <see langword="xml:lang" /> attribute. This serves as an indicator of
   the language used in the contents.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>
        <para>Gets or sets an array of <see langword="XmlNodes" /> that represents the documentation child nodes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>
        <para> Class for elements. Represents the World Wide Web Consortium (W3C)
   <see langword="element" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>
        <para>Gets or sets information to indicate if the element
      can be used in an instance document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>
        <para>Gets or sets a <see langword="Block" /> derivation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>
        <para>Gets or sets the default value of the element if its content
      is a simple type or content of the element is <see langword="textOnly" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>
        <para>Gets or sets the <see langword="Final" /> property to indicate that no further derivations are allowed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>
        <para>Gets or sets the fixed value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>
        <para>Gets or sets the form for the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>
        <para>Gets or sets the name of the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>
        <para>Gets or sets information that indicates if <see langword="xsi:nil" /> can occur in the instance data.
   Indicates if an explicit nil value can be assigned to the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>
        <para>Gets or sets the reference name of an element declared
      in this schema (or another schema indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>
        <para> Gets or sets the name of an element that is being substituted by this
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>
        <para>Gets or sets the name of a built-in data type defined in this schema or another schema
      indicated by the specified namespace. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>
        <para>Gets or sets the type of the element. This can either be a complex type
      or a simple type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>
        <para>Gets the collection of constraints on the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>
        <para>Gets the actual qualified name for the given element.
      This is the name that a <see langword="ref" /> attribute
      refers to. The qualified name consists of the NCName of the element. For
      example, element name = "NCName", and the prefix used to describe the
   <see langword="targetNamespace" />
   of the schema. This property holds the
   post-compilation value of the <see langword="QualifiedName" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>
        <para>Gets a common language runtime (CLR) object based on
      the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaElement" />of the element,
      which holds the post-compilation value of the <see langword="ElementType" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>
        <para>Gets a common language runtime (CLR) object based on
      the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaElement" />of the element,
      which holds the post-compilation value of the <see langword="ElementType" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>
        <para>Gets the post-compilation value of
      the <see langword="Block" /> property, which holds the post-compilation
      value of the <see langword="Block" />
      property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>
        <para>Gets the post-compilation value of the
   <see langword="Final" /> property, which holds the post-compilation
      value of the <see langword="Final" />
      property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>
        <para> Returns detailed information about the schema exception.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Constructs a new <see langword="XmlSchemaException" /> object with the given
<see langword="SerializationInfo" /> and <see langword="StreamingContext" /> 
information that contains all the
properties of the <see langword="XmlSchemaException" />. </para>
      </summary>
      <param name="info">SerializationInfo</param>
      <param name="context">StreamingContext</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XmlSchemaException" /> properties into the
<see langword="SerializationInfo" /> class for the given 
<see langword="StreamingContext" /> 
. </para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" />.</param>
      <param name=" context">The <see langword="StreamingContext" />information.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>
        <para>The formatted error message describing the error code.</para>
      </summary>
      <param name="message">The string.</param>
      <param name=" innerException">The exception.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>
        <para> Gets a message that describes the current
      exception.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>
        <para> Gets the location of the file used to load the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>
    Gets the line number indicating where the
    error occurred.
 </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>
        <para>Gets the line position indicating where the error occurred.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>
        <para>The <see langword="XmlSchemaObject" />
that produced the
<see langword="XmlSchemaException" /> 
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>
        <para>An abstract class. Provides information about the included schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>
        <para>Gets or sets the URI location for the schema, which tells the schema processor
      where the schema physically resides.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>
        <para>Gets or sets the <see langword="XmlSchema" /> for the referenced schema. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>
        <para>Gets and sets the qualified attributes, which do not belong to the schema
      target namespace.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>
        <para> Abstract class for all facets that are used when simple types
      are derived by restriction.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>
        <para>Gets or sets the <see langword="value" /> attribute of the facet.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>
        <para> Gets or sets information that indicates that this facet is fixed.</para>
        <para>This property is unused by <see langword="XmlSchemaEnumerationFacet" /> and
<see langword="XmlSchemaPatternFacet" /> because these classes cannot be 
   fixed.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>
        <para>Abstract class for defining <see langword="numeric" /> facets.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>
        <para>Class for defining <see langword="length" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="length" />
   facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>
        <para>Class for defining <see langword="minLength" /> facets. Represents the World Wide Web 
   Consortium (W3C) <see langword="minLength" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>
        <para>Class for defining <see langword="maxLength" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="maxLength" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>
        <para>Class for defining <see langword="pattern" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="pattern" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>
        <para>Class for defining <see langword="enumeration" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="enumeration" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>
        <para>Class for defining <see langword="minExclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="minExclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>
        <para>Class for defining <see langword="minInclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="minInclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>
        <para>Class for defining <see langword="maxExclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="maxExclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>
        <para>Class for defining <see langword="maxInclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="maxInclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>
        <para>Class for defining <see langword="totalDigits" /> facets. Represents the World Wide Web 
   Consortium (W3C) <see langword="totalDigits" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>
        <para>Class for defining <see langword="fractionDigits" /> facets. Represents the World Wide
   Web Consortium (W3C) <see langword="fractionDigits" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>
        <para>Class for defining <see langword="whiteSpace" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="whiteSpace" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>
        <para>Indicates if attributes or elements need to
      be qualified or left unqualified.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>
        <para>Form has not been specified. The default is 
   <see langword="Unqualified" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>
        <para> Attribute or element must be qualified with the namespace prefix.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>
        <para>Attribute or element is not required to be qualified with the namespace prefix.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>
        <para>Class that defines groups at the <see langword="schema" /> level that are referenced from the complex
   types. Groups a set of element declarations so that they can be incorporated as
   a group into complex type definitions. Represents the World Wide Web Consortium
   (W3C) <see langword="group" />
   element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>
        <para>Gets or sets the name of the schema group.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>
        <para>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
classes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>
        <para>Class used within complex types that defines the
      reference to groups defined at the <see langword="schema" />
      level. Represents the World Wide Web Consortium
      (W3C) <see langword="group" /> element with <see langword="ref" />
      attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>
        <para> Gets or sets the name of a group defined in this schema (or another schema
      indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>
        <para> Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes, which holds the post-compilation
   value of the <see langword="Particle" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>
        <para> Class for the identity constraints:
   <see langword="key" />, <see langword="keyref" />, 
      and <see langword="unique" /> elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>
        <para>Gets or sets the name of the identity constraint.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>
        <para>Gets or sets the XML Path Language (XPath) expression 
   <see langword="selector" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>
        <para>Gets the collection of fields that apply as children for the XML Path Language
      (XPath) expression selector.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>
        <para> Gets the qualified name of the identity constraint, which
      holds the post-compilation value of the <see langword="QualifiedName" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>
        <para>Class for XML Path Language (XPath) expressions. 
      Represents the World Wide Web Consortium (W3C) <see langword="selector" />
      element. The World Wide Web Consortium (W3C) <see langword="field" /> element is a
      collection of <see langword="XmlSchemaXPath" />
      classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>
        <para>Gets or sets the attribute for the XML Path Language (XPath) expression.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>
        <para> Identifies a unique constraint among a set of elements.
      Represents the World Wide Web Consortium (W3C) <see langword="unique" />
      element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>
        <para>Identifies a <see langword="key" /> constraint. Represents the World Wide
   Web Consortium (W3C) <see langword="key" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>
        <para>Identifies a <see langword="keyref" /> constraint. Represents the World
   Wide Web Consortium (W3C) <see langword="keyref" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>
        <para>Gets or sets the name of the key that this constraint refers to in another
      simple or complex type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>
        <para>The class to import schema components from any schema.
      Represents the World Wide Web Consortium (W3C) <see langword="import" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>
        <para>Gets or sets the target namespace for the imported schema as a URI reference.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>
        <para>Gets or sets the <see langword="annotation" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>
        <para> Class to include declarations and definitions from an
      external schema. Allows them to be available for processing in the containing
      schema. Represents the World Wide Web Consortium
      (W3C) <see langword="include" />
      element.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>
        <para>Gets or sets the <see langword="annotation" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String,System.Xml.XmlResolver)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.SourceSchemas">
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.SourceSchemas(System.String)">
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>
        <para>Class represents a notation. An XML Schema definition language (XSD) notation declaration
      is a reconstruction of XML 1.0 NOTATION declarations. The purpose of notations
      is to describe the format of non-XML data within an XML document. Represents the
      World Wide Web Consortium (W3C) <see langword="notation" />
      element. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>
        <para>Gets or sets the name of the notation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>
        <para>Gets or sets the <see langword="public" /> identifier.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>
        <para>Gets or sets the <see langword="system" /> identifier.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>
        <para>An object collection class to handle 
   <see langword="XmlSchemaObjects" /> when
      collections are returned from method calls.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaObjectCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaObjectCollection" /> class that takes an
   <see langword="XmlSchemaObject" /> .</para>
      </summary>
      <param name="parent">The <see langword="XmlSchemaObject" /> .</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator for iterating through the
   <see langword="XmlSchemaObjects" /> contained in the
   <see langword="XmlSchemaObjectCollection" /> .</para>
      </summary>
      <returns>
        <para>The iterator returns 
   <see langword="XmlSchemaObjectEnumerator" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para> Adds an <see langword="XmlSchemaObject" /> to the
<see langword="XmlSchemaObjectCollection" /> .</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" /> .</param>
      <returns>
        <para>The index at which the item has been added.</para>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. <para>-or-</para><para><paramref name="index" /> is greater than <see langword="Count" />.</para></exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Inserts an <see langword="XmlSchemaObject " />to the
<see langword="XmlSchemaObjectCollection" />.</para>
      </summary>
      <param name=" index">The zero-based index at which an item should be inserted.</param>
      <param name=" item">The <see langword="XmlSchemaObject" /> to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. <para>-or-</para><para><paramref name="index" /> is greater than <see langword="Count" />.</para></exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Gets the collection index corresponding to the specified 
   <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 
   .</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" /> whose index you want to return.</param>
      <returns>
   The index corresponding to the
   specified <see langword="XmlSchemaObject" />.
</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Indicates if the specified qualified name is located in the
   <see langword="XmlSchemaObjectCollection" />.</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if the specified qualified name is in the
   collection; otherwise returns <see langword="false" /> . If null is supplied,
<see langword="false" /> is returned because there is no qualified name with a null 
   name. </para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Removes an <see langword="XmlSchemaObject " />from the
<see langword="XmlSchemaObjectCollection" /> .</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" />to remove.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>
        <para>Copies all the <see langword="XmlSchemaObjects" />
from the collection into the given array starting at the given index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional array that is the destination of the elements copied from the <see langword="XmlSchemaObjectCollection" />. The array must have zero-based indexing. </para>
      </param>
      <param name=" index">
        <para>The zero-based index in the array at which copying begins. </para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <para>array is multidimensional.</para>
        <para>- or -</para>
        <para>index is equal to or greater than the length of array.</para>
        <para>- or -</para>
        <para>The number of elements in the source <see langword="XmlSchemaObject" /> is greater than the available space from index to the end of the destination array.</para>
      </exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see langword="XmlSchemaObject" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <para>
          <see langword="OnInsert" /> is
   invoked before the standard <see langword="Insert" /> behavior. For
   more information, see <see langword="OnInsert" /> method <see cref="T:System.Collections.CollectionBase" />
   .</para>
      </summary>
      <param name="index">The index of <see langword="XmlSchemaObject" />.</param>
      <param name=" item">The item.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <para>
          <see langword="OnSet" /> is invoked
   before the standard <see langword="Set" /> behavior. For more
   information, see OnSet method for <see cref="T:System.Collections.CollectionBase" /> .</para>
      </summary>
      <param name="index">The index of <see langword="XmlSchemaObject" />.</param>
      <param name=" oldValue">The old value.</param>
      <param name=" newValue">The new value.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>
        <para>
          <see langword="OnClear" /> is invoked
   before the standard <see langword="Clear" /> behavior. For
   more information, see OnClear method for <see cref="T:System.Collections.CollectionBase" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <para>
          <see langword="OnRemove" /> is
   invoked before the standard <see langword="Remove" /> behavior. For
   more information, see <see langword="OnRemove" /> method for <see cref="T:System.Collections.CollectionBase" /> .</para>
      </summary>
      <param name="index">The index of <see langword="XmlSchemaObject" />.</param>
      <param name=" item">The item.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>
        <para> Gets the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> at the specified index.</para>
      </summary>
      <param name="index">The index of the <see langword="XmlSchemaObject" />.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>
        <para>Represents the enumerator for the 
   <see langword="XmlSchemaObjectCollection" />. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>
        <para>Resets the enumerator to the start of the collection. </para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>
        <para>Moves to the next item in the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="false" /> at the end of the collection.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>
        <para>Gets the current <see langword="XmlSchemaObject" /> 
in the collection.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>
        <para>A collection class that provides read-only helpers for 
   <see langword="XmlSchemaObject " /> 
   objects. This class is used to provide the collections for
   contained elements that are within the schema as collections that are accessed
   from the <see langword="XmlSchema" /> class
   (for example, <see langword="Attributes" />, <see langword="AttributeGroups" />,
<see langword="Elements" />
, and so on).</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>
        <para>Returns <see langword="true" /> if the specified qualified name is in the collection.</para>
      </summary>
      <param name="name">The <see langword="XmlQualifiedName" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the qualified
   name is in the collection; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>
        <para>Returns an enumerator for
      the <see langword="XmlSchemaObject" /> contained in the collection. </para>
      </summary>
      <returns>
        <para>Returns the <see langword="XmlSchemaObject " /> objects.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>
   Gets the count of the items in the table.
</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>
        <para>Looks up the qualified name by the supplied <see langword="XmlQualifiedName" />
and returns the <see langword="XmlSchemaObject" /> which is the XML Schema definition
language (XSD) element for this qualified name. Returns a null reference if there is a qualified "no" name associated with
the given name. </para>
      </summary>
      <param name="name">The <see langword="XmlQualifiedName" />.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>
        <para>Returns a collection of all the named elements in the collection as
   <see langword="XmlSchemaObject" />. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>
        <para>Returns a collection of the values for all the elements in the
      collection as <see langword="XmlSchemaObject" />. </para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>
        <para>Allows simple and complex types, groups, and attribute
      groups from external schema files to be redefined in the current schema. This
      class provides versioning for the schema elements. Represents the World Wide Web
      Consortium (W3C) <see langword="redefine" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>
        <para>Gets the collection of the following classes: <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, and <see cref="T:System.Xml.Schema.XmlSchemaGroup" />
.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />, for all attributes in the
   schema, which holds the post-compilation value of
   the <see langword="AttributeGroups" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />,<see langword=" " />for all simple and complex
   types in the schema, which holds the post-compilation value of the
<see langword="SchemaTypes" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />, for all groups in the schema,
   which holds the post-compilation value of the <see langword="Groups" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>
        <para>Requires the elements in the group to appear in the specified sequence within the
      containing element. Represents the World Wide Web Consortium (W3C)
   <see langword="sequence" />
   (compositor) element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>
        <para>The elements contained within the compositor. Collection 
      of <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaSequence" />, or <see cref="T:System.Xml.Schema.XmlSchemaAny" />
      .</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>
        <para>Class for simple types and complex types with a simple
      content model. Represents the World Wide Web Consortium
      (W3C) <see langword="simpleContent" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>
        <para> Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> or <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>
        <para> Class for simple types that are derived by extension. 
      Extends the simple type content of the element by adding attributes. Represents
      the World Wide Web Consortium (W3C) <see langword="extension" />
      element for simple content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>
        <para> Gets or sets the name of a built-in data type or simple type from which this type is extended.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>
        <para>Gets the collection of <see langword="XmlSchemaAttribute" /> and
<see langword="XmlSchemaAttributeGroupRef" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>
        <para>Gets or sets the <see langword="XmlSchemaAnyAttribute" /> to be used for the attribute value.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>
        <para> Class for simple types that are derived by restriction. 
      Restricts the range of values for the element to a subset of the inherited
      simple types. Represents the World Wide Web Consortium
      (W3C) <see langword="restriction" />
      element for
      simple content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>
        <para> Gets or sets the name of the built-in data type or simple type from which this type is
      derived.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>
        <para> Gets or sets the simple type base value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>
        <para>Gets one or more of the following classes:</para>
        <para>
          <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> 
.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>
        <para>Gets the <see langword="XmlSchemaAttribute" /> and
<see langword="XmlSchemaAttributeGroupRef" /> .
   Collection of attributes for the simple type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>
        <para>Gets or sets an <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> to be used for the
   attribute value.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>
        <para>Class defines a simple type that determines the
      information and constraints for the values of attributes or elements with
      text-only content. Represents the World Wide Web Consortium
      (W3C) <see langword="simpleType" />
      element.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>
        <para>Gets or sets one of <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />, or <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>
        <para>Abstract class for simple type content classes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>
        <para>Class for the list of <see langword="simpleType" />
elements. Defines a <see langword="simpleType" /> element as a list of values of a
specified data type. Represents the World Wide Web Consortium
(W3C) <see langword="list" />
element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>
        <para> Gets or sets the name of a built-in
      data type or <see langword="simpleType" />
      element defined in this schema (or another schema
      indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>
        <para>Gets or sets the <see langword="simpleType" /> element that is derived from the type specified by
   the base value.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>
        <para>Class for the restriction of <see langword="simpleType" /> elements. Represents the World Wide Web 
   Consortium (W3C) <see langword="restriction" /> element for simple types.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>
        <para>Gets or sets the name of the qualified base type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>
        <para>Gets or sets information on the base type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>
        <para>Gets one or more of the following classes: <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> , <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />

.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>
        <para>Class for the union of <see langword="simpleType" />
elements. Defines a <see langword="simpleType" /> element as a list of values of a
specified data type. Represents the World Wide Web Consortium
(W3C) <see langword="union" />
element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>
        <para>Gets the collection of base types.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>
        <para>Gets or sets the array of qualified member names of built-in data types or 
   <see langword="simpleType" /> elements defined in this schema (or another schema 
      indicated by the specified namespace). </para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>
        <para>Indicator of how the attribute is used.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>
        <para> Attribute use not specified.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>
   Attribute is optional.
</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>
        <para>Attribute cannot be used.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>
        <para>Attribute must appear once.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>
        <para> Returns detailed information about the schema exception.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Constructs a new <see langword="XmlSchemaException" /> object with the given
<see langword="SerializationInfo" /> and <see langword="StreamingContext" /> 
information that contains all the
properties of the <see langword="XmlSchemaException" />. </para>
      </summary>
      <param name="info">SerializationInfo</param>
      <param name="context">StreamingContext</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XmlSchemaException" /> properties into the
<see langword="SerializationInfo" /> class for the given 
<see langword="StreamingContext" /> 
. </para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" />.</param>
      <param name=" context">The <see langword="StreamingContext" />information.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>The formatted error message describing the error code.</para>
      </summary>
      <param name="message">The string.</param>
      <param name=" innerException">The exception.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceNode">
      <summary>
        <para> Gets the location of the file used to load the schema.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>
        <para>Represents the severity of the validation event.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>
        <para> Indicates a validation error occurred when validating the instance document. This applies to
      document type definitions (DTDs) and XML-Data Reduced (XDR) and XML Schema definition
      language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints
      are considered errors. If no validation event handler has been created,
      errors throw an exception.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>
        <para>Warnings indicate that a validation event occurred that is not an error but may be important
      enough to warn the user about. A warning is typically issued when there is
      no DTD, XML-Data Reduced (XDR) or XML Schema (XSD) to
      validate a particular element or attribute against. The <see cref="P:System.Xml.XmlValidatingReader.ValidationType" qualify="true" /> setting determines the
      type of the schema used. Unlike errors, warnings do not throw an exception
      if there is no validation event handler. </para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.CodeGenerationOptions">
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.None">
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.UseSqlTypes">
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateProperties">
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakePascal(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeCamel(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeValid(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Clear">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <returns>
        <para>An <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents the XML schema.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>
        <para>Converts an XML document into an object using the specified reader.</para>
      </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML document.</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>
        <para>Converts the serializable members of an object into an XML document.</para>
      </summary>
      <param name="writer">The XmlWriter used to write the XML-document instance.</param>
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.Close">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.Read">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.GetAttribute(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.GetAttribute(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.GetAttribute(System.Int32)">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.MoveToAttribute(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.MoveToAttribute(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.MoveToAttribute(System.Int32)">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.MoveToFirstAttribute">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.MoveToNextAttribute">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.MoveToElement">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.LookupNamespace(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.ResolveEntity">
    </member>
    <member name="M:System.Xml.Serialization.SafeReader.ReadAttributeValue">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.NodeType">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.Name">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.LocalName">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.NamespaceURI">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.Prefix">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.HasValue">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.Value">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.Depth">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.BaseURI">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.IsEmptyElement">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.IsDefault">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.QuoteChar">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.XmlSpace">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.XmlLang">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.AttributeCount">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.Item(System.Int32)">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.Item(System.String)">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.Item(System.String,System.String)">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.EOF">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.ReadState">
    </member>
    <member name="P:System.Xml.Serialization.SafeReader.NameTable">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteStartDocument">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteEndDocument">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteStartDocument(System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteDocType(System.String,System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteStartElement(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteEndElement">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteFullEndElement">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteStartAttribute(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteEndAttribute">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteCData(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteComment(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteProcessingInstruction(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteEntityRef(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteCharEntity(System.Char)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteWhitespace(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteString(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteRaw(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.Close">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.Flush">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteQualifiedName(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.LookupPrefix(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.SafeWriter.WriteNmToken(System.String)">
    </member>
    <member name="P:System.Xml.Serialization.SafeWriter.WriteState">
    </member>
    <member name="P:System.Xml.Serialization.SafeWriter.XmlSpace">
    </member>
    <member name="P:System.Xml.Serialization.SafeWriter.XmlLang">
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeAttribute">
      <summary>
        <para>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize the class member as an encoded SOAP attribute.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class using the specified value as the
   name of the XML attribute. </para>
      </summary>
      <param name="attrName">The name of the XML attribute.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.AttributeName">
      <summary>
        <para> Gets or sets the name of the XML attribute generated
      by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.Namespace">
      <summary>
        <para>Gets or sets the XML namespace of the XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.DataType">
      <summary>
        <para> Gets or sets the XML Schema definition language (XSD) data type of the SOAP attribute
      generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</para>
      </summary>
      <exception cref="T:System.Exception">The XML Schema data type you've specified cannot be mapped to the .NET data type.</exception>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeOverrides">
      <summary>
        <para>Allows you to override property, field, and class
      attributes when you use an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize
      or deserialize an object as encoded SOAP.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.Xml.Serialization.SoapAttributes)">
      <summary>
        <para>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to a collection of collection
   of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" /> .</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that will be overridden.</param>
      <param name=" attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.SoapAttributes)">
      <summary>
        <para>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to the collection
   of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects contained by the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> . The <paramref name="type" /> parameter
   specifies the object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" /> . The <paramref name="member" /> parameter
   specifies the name of a member that will be overridden.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override.</param>
      <param name=" member">The name of the member to override.</param>
      <param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type)">
      <summary>
        <para>Gets the object associated with the specified (base class) type.</para>
      </summary>
      <param name="type">The base class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type,System.String)">
      <summary>
        <para>Gets the object associated with the specified (base
      class) type. The <paramref name="member " />parameter
      specifies the base class member that is overridden.</para>
      </summary>
      <param name="type">The base class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to override. </param>
      <param name=" member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.SoapAttributes" /> to return.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributes">
      <summary>
        <para>Represents a collection of attribute objects that control
      how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes SOAP methods.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapType">
      <summary>
        <para>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> how to serialize an object type into encoded SOAP XML.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapEnum">
      <summary>
        <para>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" />
serializes a SOAP enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapIgnore">
      <summary>
        <para>Gets or sets a value that specifies whether the <see cref="T:System.Xml.Serialization.XmlSerializer" />
serializes a public field or property as encoded SOAP  XML.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapElement">
      <summary>
        <para>Gets or sets a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapDefaultValue">
      <summary>
        <para>Gets or sets the default value of an XML element or attribute.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapCodeExporter.IncludeMetadata">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapElementAttribute">
      <summary>
        <para> Specifies
      that the public member value be serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      as an encoded SOAP XML element.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class and specifies the
   name of the XML element.</para>
      </summary>
      <param name="elementName">The XML element name of the serialized member.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.ElementName">
      <summary>
        <para>Gets or sets the name of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.DataType">
      <summary>
        <para>Gets or sets the XML Schema definition language (XSD) data type of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a member that is set
   to <see langword="null " />to the <see langword="xsi:null " />attribute set to
   "1".</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapEnumAttribute">
      <summary>
        <para>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class, using the
   specified element name.</para>
      </summary>
      <param name="name">The XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapEnumAttribute.Name">
      <summary>
        <para>Gets or sets the value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the
   value recognized when it deserializes the enumeration member.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapIgnoreAttribute">
      <summary>
        <para>Instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or
   public read/write property value.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIgnoreAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIgnoreAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapIncludeAttribute">
      <summary>
        <para>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type
   when it serializes or deserializes an object as encoded SOAP XML.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> class using the
   specified type.</para>
      </summary>
      <param name="type">The type of the object to include.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapIncludeAttribute.Type">
      <summary>
        <para> Gets or sets the type of the object that should be
      used when serializing or deserializing an object. </para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeType(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>
        <para>Returns a object used to map from a type to an XML representation using the 
      specified type.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to reflect.</param>
      <returns>
        <para>An XmlTypeMapping that maps the type to an XML 
      representation.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>
        <para>Returns a object used to map from a type to an XML
      representation using the specified type and namespace.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to reflect.</param>
      <param name=" defaultNamespace">The default XML namespace.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean,System.Type,System.Boolean)">
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberType">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapTypeAttribute">
      <summary>
        <para> Controls the schema generated by
      the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when a class instance is serialized
      as SOAP encoded XML.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class,
   specifying the name of the XML type.</para>
      </summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance).</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class,
   specifying the name and XML namespace of the type.</para>
      </summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance).</param>
      <param name=" ns">The XML namespace of the type.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema">
      <summary>
        <para> Gets or sets a value indicating whether to include
      the type in SOAP-encoded XML Schema documents.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.TypeName">
      <summary>
        <para>Gets or sets the name of the XML type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.Namespace">
      <summary>
        <para>Gets or sets the namespace of the XML type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>
        <para>Specifies that the member (a field that returns an
      array of <see cref="T:System.Xml.XmlAttribute" />
      objects)
      can contain any XML attributes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>
        <para>Constructs a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>
        <para>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlElement" /> or
<see cref="T:System.Xml.XmlNode" /> 
objects) can contain objects that represent any XML element that has no
corresponding member in the object being serialized or deserialized.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class; specifies the XML element name
   generated in the XML document.</para>
      </summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class; specifies the XML element name
   generated in the XML document and its XML namespace.</para>
      </summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
      <param name=" ns">The XML namespace of the XML element.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>
        <para>Gets or sets the XML element name.</para>
      </summary>
      <exception cref="T:System.InvalidOperationException">The element name of an array member does not match the element name specified by the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>
        <para>Gets or sets the XML namespace generated in the XML document.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttributes">
      <summary>
        <para>Represents a collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />to the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to add.</param>
      <returns>
        <para>The index of the newly added <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Inserts an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> into the collection 
   at the specified index.</para>
      </summary>
      <param name=" index">The index where the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> will be inserted.</param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to insert.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> .</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> whose index you want.</param>
      <returns>
        <para>The index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Gets a value indicating whether the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> you are interested in.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the 
   collection; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Removes the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> from the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to remove.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> at the specified index.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>
        <para>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a particular class member as an array of XML elements.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class, 
   specifying the XML element name generated in the
   XML document instance.</para>
      </summary>
      <param name="elementName">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>
        <para>Gets or sets the XML element name given to the serialized array.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>
        <para> Gets or set the namespace of the XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should
   serialize a member as an empty XML tag
   with the <see langword="xsi:nil " /> attribute set to <see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the XML element
      name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified or unqualified.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>
        <para>Specifies the derived types that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> can place in a serialized array.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class;
   specifies
   the name of the XML element generated in the XML document.</para>
      </summary>
      <param name="elementName">The name of the XML element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class;
   specifies the <see cref="T:System.Type" /> that can be inserted into the serialized array.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class;
   specifies the
   name of the XML element generated in the XML document, and the
<see cref="T:System.Type" /> that can 
   be inserted into the generated XML document.</para>
      </summary>
      <param name="elementName">The name of the XML element.</param>
      <param name=" type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>
        <para> Gets or sets the type allowed in an array.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>
        <para> Gets or sets the name of the generated XML element. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>
        <para> Gets or sets
      the namespace of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>
        <para>Gets or sets the level in a hierarchy of XML elements
      that the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> affects.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>
        <para>Gets or sets the XML data type of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should
   serialize a member as an empty XML tag with the <see langword="xsi:nil " />attribute set to <see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the name of the generated XML element is
      qualified.</para>
      </summary>
      <exception cref="T:System.Exception">The <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> property is set to <see langword="XmlSchemaForm.Unqualified" /> and a <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> value is specified.</exception>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttributes">
      <summary>
        <para>Represents a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to add to the collection.</param>
      <returns>
        <para>The index of the added item.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Item(System.Int32)">
      <summary>
        <para>Gets or sets the item at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the collection member to get or set.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>
        <para>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize the class member as an XML attribute.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />
class and specifies the name of the generated XML attribute.</para>
      </summary>
      <param name="attributeName">The name of the XML attribute that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>
        <para>Gets or sets the name of the XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>
        <para>Gets or sets the XML namespace of the XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>
        <para>Gets or sets the XSD data type of the XML attribute
      generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the XML
      attribute name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeOverrides">
      <summary>
        <para>Allows you to override property, field, and class attributes
      when you use the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      to serialize or deserialize an object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the
   collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter
   specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.XmlAttributes" /> object.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that will be overridden.</param>
      <param name=" attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the
   collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter
   specifies an object to be overridden. The <paramref name="member " />parameter specifies
   the name of a member that will be overridden.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override.</param>
      <param name=" member">The name of the member to override.</param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type)">
      <summary>
        <para>Gets the object associated with the specified, base-class, type.</para>
      </summary>
      <param name="type">The base-class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type,System.String)">
      <summary>
        <para>Gets the object associated with the specified (base-class) type. The
      member parameter specifies the base-class member that is overridden.</para>
      </summary>
      <param name="type">The base-class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want. </param>
      <param name=" member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.XmlAttributes" /> to return.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributes">
      <summary>
        <para>Represents a collection of attribute objects that control
      how the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      serializes and deserializes an object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlElements">
      <summary>
        <para> Gets or sets a collection of objects that specify how the
   <see cref="T:System.Xml.Serialization.XmlSerializer" />
   serializes a public field or read/write property as
   an XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
      <summary>
        <para> Gets or sets an object that specifies how the
   <see cref="T:System.Xml.Serialization.XmlSerializer" /> 
   serializes a public field or public read/write property as an XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
      <summary>
        <para> Gets or sets an object that
      specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      serializes an enumeration member.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlText">
      <summary>
        <para> Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize a
   public field or public read/write property as XML
   text.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArray">
      <summary>
        <para> Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field
   or read/write property that returns an array.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
      <summary>
        <para> Gets or sets a collection of objects that specify
      how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes
      items inserted into an array returned by a public field or read/write property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
      <summary>
        <para>Gets or sets the default value of an XML element or attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
      <summary>
        <para>Gets or sets a value that specifies whether or not the
   <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlType">
      <summary>
        <para>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class to which
   the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />
   has been applied.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
      <summary>
        <para>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class as an XML root element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
      <summary>
        <para>Gets the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
      <summary>
        <para> Gets or sets an object that allows you
      to disambiguate between a set of choices.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.Xmlns">
      <summary>
        <para>Gets or sets a value that specifies whether to keep all
      namespace declarations when an object containing a member that returns an
   <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object is overridden.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>
        <para>Specifies that the member can be further disambiguated
      by using an enumeration.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</para>
      </summary>
      <param name="name">The member name that returns the enumeration used to disambiguate a choice.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>
        <para>Gets or sets the name of the field that returns the
      enumeration to use when disambiguating types.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions)">
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlTypeMapping,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlCodeExporter.IncludeMetadata">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>
        <para> Indicates that a public field or property represents an XML element when the
   <see cref="T:System.Xml.Serialization.XmlSerializer" />
   serializes or deserializes the containing object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and
   specifies the name of the XML element.</para>
      </summary>
      <param name="elementName">The XML element name of the serialized member.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class
   and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied,
   which is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing a containing object.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> ;
   specifies the name of the XML element and a derived type for the member to which
   the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied,
   which is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a containing object.</para>
      </summary>
      <param name="elementName">The XML element name of the serialized member. </param>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>
        <para>Gets or sets the object type used to represent the XML
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>
        <para> Gets or sets the
      name of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>
        <para> Gets or sets the namespace assigned
      to the XML element that results when the class is serialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>
        <para> Gets or sets the XML Schema definition (XSD)
      data type of the XMl element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</para>
      </summary>
      <exception cref="T:System.Exception">The XML Schema data type you've specified cannot be mapped to the .NET data type.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a member that is set
   to <see langword="null " />as
   an empty tag with the <see langword="xsi:nil " />attribute set to
<see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the element is qualified.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttributes">
      <summary>
        <para>Represents a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" />,
   which the <see cref="T:System.Xml.Serialization.XmlSerializer" /> uses to
   override the default way it serializes a class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" />to the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to add.</param>
      <returns>
        <para>The zero-based index of the newly added item.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.Item(System.Int32)">
      <summary>
        <para>Gets or sets an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> from the collection.</para>
      </summary>
      <param name="index">The zero-based index of the collection member to get or set.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>
        <para> Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration
   member.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class, and specifies the XML value
   that the <see cref="T:System.Xml.Serialization.XmlSerializer" />
   generates or recognizes (when it
   serializes or deserializes the enumeration, respectively).</para>
      </summary>
      <param name="name">The overriding name of the enumeration member.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>
        <para>Gets or sets the value generated in an XML-document
      instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the
      value recognized when it deserializes the enumeration member.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>
        <para> Instructs the <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or
   public read/write property value.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>
        <para>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when
   it serializes or deserializes an object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> 
class.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to include.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>
        <para> Gets or sets the type of the object to include.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Any">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.ElementName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Namespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.MemberName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeNamespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeFullName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.CheckSpecified">
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.ElementName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Namespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeName">
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeNamespace">
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Item(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Count">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>
        <para>Specifies that the target property, parameter, return
      value or class member contains prefixes associated with namespaces that are used within an XML document.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberType">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.XmlAttributes">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.SoapAttributes">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.IsReturnValue">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.OverrideIsNullable">
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>
        <para> Controls XML serialization of the attribute target as an XML root
      element.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class, and specifies the name of the
   XML root element.</para>
      </summary>
      <param name="elementName">The name of the XML root element.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>
        <para>Gets or sets the name of the XML element that is
      generated and recognized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class's
   <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> and <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> methods,
      respectively.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>
        <para> Gets or sets the namespace for the
      XML root element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>
        <para>Gets or sets the XSD data type of the XML root element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a member that is set
   to <see langword="null " />into the <see langword="xsi:nil " />attribute set to
<see langword="true" />.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers,System.Xml.Serialization.CodeGenerationOptions)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportTypeMapping(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportAnyType(System.Xml.XmlQualifiedName,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[],System.Type,System.Boolean)">
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Insert(System.Int32,System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IndexOf(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Remove(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnInsert(System.Int32,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnRemove(System.Int32,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnClear">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Find(System.Xml.XmlQualifiedName,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IsDataSet(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitIDs">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetXsiType">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedPrimitive(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.IsXmlnsAttribute(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ParseWsdlArrayType(System.Xml.XmlAttribute)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNull">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetNullAttr">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableString">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableQualifiedName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadElementQualifiedName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlDocument(System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlNode(System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetArrayLength(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDateTime(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDate(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToTime(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToChar(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToEnum(System.String,System.Collections.Hashtable,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNCName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmToken(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmTokens(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlQualifiedName(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnreferencedObject(System.String,System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownTypeException(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateReadOnlyCollectionException(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateAbstractTypeException(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInaccessibleConstructorException(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateCtorHasSecurityException(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownNodeException">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownConstantException(System.String,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateBadDeriveationException(System.String,System.String,System.String,System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateMissingIXmlSerializableType(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.EnsureArrayIndex(System.Array,System.Int32,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ShrinkArray(System.Array,System.Int32,System.Type,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReference(System.String@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.Fixup)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.CollectionFixup)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Referenced(System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.FixupArrayRefs(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitCallbacks">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElements">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.String@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.Boolean,System.String@)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddReadCallback(System.String,System.String,System.Type,System.Xml.Serialization.XmlSerializationReadCallback)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadEndElement">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Reader">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Document">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.IsReturnValue">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.String[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Callback">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationCollectionFixupCallback,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Callback">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Collection">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.CollectionItems">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayBase64(System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayHex(System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDateTime(System.DateTime)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDate(System.DateTime)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromTime(System.DateTime)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromChar(System.Char)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNCName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmToken(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmTokens(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXsiType(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteTypedPrimitive(System.String,System.String,System.Object,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement(System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncoded(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteral(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameEncoded(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameLiteral(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementEncoded(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementLiteral(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateMismatchChoiceException(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownAnyElementException(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidChoiceIdentifierValueException(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateChoiceIdentifierValueException(System.String,System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteId(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode,System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartDocument">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[],System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteRpcResult(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.AddWriteCallback(System.Type,System.String,System.String,System.Xml.Serialization.XmlSerializationWriteCallback)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.InitCallbacks">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencedElements">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.TopLevelElement">
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Writer">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Namespaces">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializer">
      <summary>
        <para>Serializes and deserializes objects into and from
      XML documents. The <see cref="T:System.Xml.Serialization.XmlSerializer" /> enables you to control how objects are
      encoded into XML.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   type <see cref="T:System.Object" /> into XML
   document instances, and vice versa. Each object to be serialized can itself
   contain instances of classes, which this overload can override with other classes. This overload
   also specifies the default namespace for all the
   XML elements, and the class to use as the XML root element.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name=" overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <paramref name="type" /> parameter.</param>
      <param name=" extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
      <param name=" root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</param>
      <param name=" defaultNamespace">The default namespace of all XML elements in the XML document.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa. Specifies the
   class to use as the XML root element.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa. If a property or
   field returns an array, the <paramref name="extraTypes" />
   parameter specifies objects
   that can be inserted into the array.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa. Each object to be
   serialized can itself contain instances of classes, which this overload can override
   with other classes.</para>
      </summary>
      <param name="type">The type of the object to serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> .</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class using an object
   that maps one type to another.</para>
      </summary>
      <param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into
   XML documents, and vice versa. Specifies the default
   namespace for all the XML elements.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="defaultNamespace">The default namespace to use for all the XML elements.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.TextWriter" />.</para>
      </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.TextWriter" /> , referencing the specified namespaces.</para>
      </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> containing namespaces for the generated XML document. </param>
      <exception cref="T:System.InvalidOperationException">An error occured during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.Stream" />.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
      <exception cref="T:System.InvalidOperationException">An error occured during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.Stream" />, referencing the specified namespaces.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occured during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.Xml.XmlWriter" />.</para>
      </summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
      <exception cref="T:System.InvalidOperationException">An error occured during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.Xml.XmlWriter" /> , referencing the specified namespaces.</para>
      </summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document.</param>
      <param name=" o">The <see cref="T:System.Object" /> to serialize.</param>
      <param name=" namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occured during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
      <summary>
        <para>Serializes the specified object and writes the XML document to a file using
      the specified <see cref="T:System.Xml.XmlWriter" /> , referencing the specified namespaces and encoding style.</para>
      </summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document.</param>
      <param name=" o">The object to serialize.</param>
      <param name=" namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <param name=" encodingStyle">The encoding style of the serialized XML.</param>
      <exception cref="T:System.InvalidOperationException">An error occured during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
      <summary>
        <para>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream" />.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> containing the XML document to deserialize.</param>
      <returns>
        <para>The <see cref="T:System.Object" />
being deserialized.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
      <summary>
        <para>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader" />.</para>
      </summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> containing the XML document to deserialize.</param>
      <returns>
        <para>The <see cref="T:System.Object" />
being deserialized.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">An error occured during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>
        <para>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" />.</para>
      </summary>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> containing the XML document to deserialize.</param>
      <returns>
        <para>The <see cref="T:System.Object" />
being deserialized.</para>
      </returns>
      <exception cref="T:System.InvalidOperationException">An error occured during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
      <summary>
        <para>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" />and encoding 
   style.</para>
      </summary>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> containing the XML document to deserialize.</param>
      <param name=" encodingStyle">The encoding style of the serialized XML.</param>
      <exception cref="T:System.InvalidOperationException">An error occured during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
      <summary>
        <para>Gets a value indicating whether this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize a specified
   XML document.</para>
      </summary>
      <param name="xmlReader">An <see cref="T:System.Xml.XmlReader" /> that points to the document to deserialize.</param>
      <returns>
        <para>
          <see langword="true" /> if an
   this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize the object which
   the <see cref="T:System.Xml.XmlReader" /> points to; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
      <summary>
        <para>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of
   types.</para>
      </summary>
      <param name="types">An array of <see cref="T:System.Type" /> objects.</param>
      <returns>
        <para>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</para>
      </returns>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
      <summary>
        <para>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML node of unknown type during deserialization.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
      <summary>
        <para>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML attribute of unknown
   type during deserialization.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
      <summary>
        <para>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML element of unknown
   type during deserialization.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
      <summary>
        <para>Occurs during deserialization of a SOAP-encoded XML
      stream, when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters a recognized type that is
      not used (unreferenced).</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>
        <para> Contains the XML namespaces and prefixes that the
   <see cref="T:System.Xml.Serialization.XmlSerializer" /> uses to generate qualified names in an XML-document
      instance.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</para>
      </summary>
      <param name="namespaces">An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>
        <para> Adds a prefix-namespace pair to an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</para>
      </summary>
      <param name="prefix">The prefix associated with an XML namespace.</param>
      <param name=" ns">An XML namespace.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>
        <para>Gets the array of prefix-namespace pairs in an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects that are used as qualified names in an
   XML document.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>
        <para>Gets the number of prefix-namespace pairs in the collection.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>
        <para>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer" /> that the member should be treated as
   XML text when the containing class is serialized or deserialized.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the member to be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>
        <para>Gets or sets the type of the member.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>
        <para> Gets or sets the XML Schema definition language (XSD) data type of the text
      generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</para>
      </summary>
      <exception cref="T:System.Exception">The XML Schema data type you've specified cannot be mapped to the .NET data type.</exception>
      <exception cref="T:System.InvalidOperationException">
        <para>The XML Schema data type you've specified is invalid for the property and cannot be converted to the member type.</para>
      </exception>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>
        <para>Controls the XML schema generated when the attribute
      target is serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class, specifying the
   name of the XML type.</para>
      </summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance).</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>
        <para> Gets or sets a value indicating whether to include
      the type in XML schema documents.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>
        <para> Gets or sets the name of the XML type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>
        <para>Gets or sets the namespace of the XML type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeMapping">
      <summary>
        <para>Contains a mapping of one type to another.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.ElementName">
      <summary>
        <para>Gets the XML element name of the mapped object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.Namespace">
      <summary>
        <para>Gets the XML namespace of the mapped object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeName">
      <summary>
        <para>Gets the type name of the mapped object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeFullName">
      <summary>
        <para>The fully qualified type name, including the namespace
      (or namespaces) and type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /></para>
      </summary>
      <param name=" sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.Xml.Serialization.XmlAttributeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized">
      <summary>
        <para> Gets the object being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.Attr">
      <summary>
        <para>Gets an object that represents the unknown XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LineNumber">
      <summary>
        <para>Gets the line number of the unknown XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LinePosition">
      <summary>
        <para>Gets the position in the line of the unknown XML attribute.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ObjectBeingDeserialized">
      <summary>
        <para>Gets the object the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is deserializing.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.Element">
      <summary>
        <para>Gets the object that represents the unknown XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LineNumber">
      <summary>
        <para>Gets the line number where the unknown element was
      encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LinePosition">
      <summary>
        <para>Gets the place in the line where the unknown element
      occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader" /> .</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />
.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Xml.Serialization.XmlNodeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.ObjectBeingDeserialized">
      <summary>
        <para> Gets the object being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NodeType">
      <summary>
        <para>Gets the type of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Name">
      <summary>
        <para>Gets the name of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LocalName">
      <summary>
        <para>Gets the XML local name of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NamespaceURI">
      <summary>
        <para>Gets the namespace URI that is associated with the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Text">
      <summary>
        <para>Gets the text of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LineNumber">
      <summary>
        <para>Gets the line number of the unknown XML node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LinePosition">
      <summary>
        <para>Gets the position in the line of the unknown XML node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventArgs">
      <summary>
        <para>Provides data for the known, but unreferenced, object 
      found in an encoded SOAP XML stream during deserialization.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.UnreferencedObjectEventArgs.#ctor(System.Object,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> class.</para>
      </summary>
      <param name="o">The unreferenced object.</param>
      <param name=" id">A unique string used to identify the unreferenced object.</param>
      <returns>
        <para>An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> that contains
   information about the unreferenced object.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject">
      <summary>
        <para>Gets the deserialized, but unreferenced, object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId">
      <summary>
        <para>Gets the ID of the object.</para>
      </summary>
    </member>
    <member name="T:MS.Internal.Xml.ISourceLineInfo">
    </member>
    <member name="P:MS.Internal.Xml.ISourceLineInfo.FileName">
    </member>
    <member name="P:MS.Internal.Xml.ISourceLineInfo.StartLine">
    </member>
    <member name="P:MS.Internal.Xml.ISourceLineInfo.StartPos">
    </member>
    <member name="P:MS.Internal.Xml.ISourceLineInfo.EndLine">
    </member>
    <member name="P:MS.Internal.Xml.ISourceLineInfo.EndPos">
    </member>
    <member name="T:System.Xml.Query.IXmlLinkerResolver">
      <summary>
            For now, Qil is not directly exposed to the outside world.  This wrapper allows limited access to
            the Qil semantic tree in order to allow some extensibility.
            </summary>
    </member>
    <member name="M:System.Xml.Query.IXmlLinkerResolver.ResolveFunction(System.Xml.XmlQualifiedName,System.Xml.Query.XmlExpression[])">
    </member>
    <member name="M:System.Xml.Query.IXmlLinkerResolver.ResolveVariable(System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Query.IXmlLinkerResolver.ResolveContextDocument">
    </member>
    <member name="T:System.Xml.Query.QueryEventArgs">
    </member>
    <member name="P:System.Xml.Query.QueryEventArgs.Message">
    </member>
    <member name="T:System.Xml.Query.QueryEventHandler">
    </member>
    <member name="T:System.Xml.Query.XmlCommand">
      <summary>
            Executable query object that is produced by a Qil -&gt; Executable generator.  Implementations
            should be stateless so that Execute can be concurrently called by multiple threads.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlCommand.Execute(System.Xml.IXmlInfosetNavigator,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="M:System.Xml.Query.XmlCommand.Execute(System.Xml.IXmlInfosetEditor,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="M:System.Xml.Query.XmlCommand.Execute(System.Xml.XmlResolver,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="M:System.Xml.Query.XmlCommand.Execute(System.Uri,System.Xml.XmlResolver,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
    </member>
    <member name="E:System.Xml.Query.XmlCommand.OnExecutionEvent">
    </member>
    <member name="T:System.Xml.Query.XmlCompilerEnvironment">
    </member>
    <member name="T:System.Xml.Query.XmlCompilerEnvironmentBase">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.ResolveFunction(System.Xml.XmlQualifiedName,System.Xml.Query.XmlExpression[])">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.ResolveVariable(System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.ResolveContextDocument">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.LookupNamespace(System.String)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.LookupNamespace(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.LookupPrefix(System.String)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironmentBase.LookupPrefix(System.String,System.Boolean)">
    </member>
    <member name="P:System.Xml.Query.XmlCompilerEnvironmentBase.XmlSchemaSet">
    </member>
    <member name="P:System.Xml.Query.XmlCompilerEnvironmentBase.IsDebug">
    </member>
    <member name="P:System.Xml.Query.XmlCompilerEnvironmentBase.NameTable">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.#ctor">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.#ctor(System.Boolean)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.SetContextDocumentResolution(System.Xml.Query.IXmlLinkerResolver)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.SetContextDocumentResolution(System.Xml.Query.XmlExpression)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.SetContextDocumentResolution(System.Uri)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.AddFunctions(System.Xml.Query.IXmlLinkerResolver)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.AddFunctions(System.Xml.Query.XmlExpression)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.AddFunction(System.Xml.XmlQualifiedName,System.Xml.Query.XmlExpression)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.AddVariables(System.Xml.Query.IXmlLinkerResolver)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.AddVariable(System.Xml.XmlQualifiedName,System.Xml.Query.XmlExpression)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.AddVariable(System.Xml.XmlQualifiedName,System.Object)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.AddVariableDeclaration(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaType,System.Xml.Query.XmlExpression)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.ResolveFunction(System.Xml.XmlQualifiedName,System.Xml.Query.XmlExpression[])">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.ResolveVariable(System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.ResolveContextDocument">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.LookupNamespace(System.String)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.LookupNamespace(System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.LookupPrefix(System.String)">
    </member>
    <member name="M:System.Xml.Query.XmlCompilerEnvironment.LookupPrefix(System.String,System.Boolean)">
    </member>
    <member name="P:System.Xml.Query.XmlCompilerEnvironment.XmlNamespaceManager">
    </member>
    <member name="P:System.Xml.Query.XmlCompilerEnvironment.XmlSchemaSet">
    </member>
    <member name="P:System.Xml.Query.XmlCompilerEnvironment.IsDebug">
    </member>
    <member name="P:System.Xml.Query.XmlCompilerEnvironment.NameTable">
    </member>
    <member name="T:System.Xml.Query.XmlExpression">
      <summary>
            For now, Qil is not directly exposed to the outside world.  This wrapper allows limited access to
            the Qil semantic tree in order to allow some extensibility.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlExpression.GetConstantValue">
    </member>
    <member name="T:System.Xml.Query.XmlIlGenerator">
      <summary>
            This class is the entry point for creating Msil assemblies from Qil.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlIlGenerator.#ctor">
      <summary>
            Always output debug information in debug mode.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlIlGenerator.Generate(System.Xml.Query.XmlExpression)">
      <summary>
            Given the logical query plan (Qil) generate a physical query plan (MSIL) that can be executed.
            </summary>
    </member>
    <member name="T:System.Xml.Query.XmlIlCommand">
    </member>
    <member name="M:System.Xml.Query.XmlIlCommand.#ctor(System.Reflection.Emit.AssemblyBuilder)">
    </member>
    <member name="M:System.Xml.Query.XmlIlCommand.Execute(System.Xml.IXmlInfosetNavigator,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
      <summary>
            Default document as IXmlInfosetNavigator.  No other data sources possible.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlIlCommand.Execute(System.Xml.IXmlInfosetEditor,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
      <summary>
            Default document as IXmlEditor.  No other data sources possible.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlIlCommand.Execute(System.Xml.XmlResolver,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
      <summary>
            No default document
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlIlCommand.Execute(System.Uri,System.Xml.XmlResolver,System.Xml.XmlArgumentList,System.Xml.IXmlInfosetWriter)">
      <summary>
            Default document as Uri.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlIlCommand.Save">
    </member>
    <member name="E:System.Xml.Query.XmlIlCommand.OnExecutionEvent">
      <summary>
            This event will be raised during execution for xsl:message, etc.
            </summary>
    </member>
    <member name="T:System.Xml.Query.XPathCompiler">
    </member>
    <member name="M:System.Xml.Query.XPathCompiler.#ctor">
    </member>
    <member name="M:System.Xml.Query.XPathCompiler.#ctor(System.Xml.Query.XmlCompilerEnvironmentBase)">
    </member>
    <member name="M:System.Xml.Query.XPathCompiler.Compile(System.String)">
    </member>
    <member name="P:System.Xml.Query.XPathCompiler.XmlCompilerEnvironment">
    </member>
    <member name="T:System.Xml.Query.XQueryCompiler">
      <summary>
        <para> ffjldkfj</para>
      </summary>
    </member>
    <member name="M:System.Xml.Query.XQueryCompiler.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Query.XQueryCompiler.#ctor(System.Xml.Query.XmlCompilerEnvironmentBase)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Query.XQueryCompiler.Compile(System.IO.TextReader)">
      <summary>
        <para>[To be supplieddd</para>
      </summary>
      <param name="query">query expression to compile</param>
      <exception cref="!:ask dev">
      </exception>
    </member>
    <member name="M:System.Xml.Query.XQueryCompiler.Compile(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Query.XQueryCompiler.Compile(System.String,System.Xml.XmlResolver)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Query.XQueryCompiler.XmlCompilerEnvironment">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Query.XQueryUpdateCompiler">
    </member>
    <member name="M:System.Xml.Query.XQueryUpdateCompiler.#ctor">
    </member>
    <member name="M:System.Xml.Query.XQueryUpdateCompiler.#ctor(System.Xml.Query.XmlCompilerEnvironmentBase)">
    </member>
    <member name="M:System.Xml.Query.XQueryUpdateCompiler.Compile(System.IO.TextReader)">
    </member>
    <member name="M:System.Xml.Query.XQueryUpdateCompiler.Compile(System.String)">
    </member>
    <member name="M:System.Xml.Query.XQueryUpdateCompiler.Compile(System.String,System.Xml.XmlResolver)">
    </member>
    <member name="P:System.Xml.Query.XQueryUpdateCompiler.XmlCompilerEnvironment">
    </member>
    <member name="T:System.Xml.Query.XsltCompiler">
    </member>
    <member name="M:System.Xml.Query.XsltCompiler.#ctor">
    </member>
    <member name="M:System.Xml.Query.XsltCompiler.#ctor(System.Xml.Query.XmlCompilerEnvironmentBase)">
    </member>
    <member name="M:System.Xml.Query.XsltCompiler.Compile(System.String,System.Xml.XmlResolver)">
    </member>
    <member name="M:System.Xml.Query.XsltCompiler.Compile(System.String,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
    </member>
    <member name="M:System.Xml.Query.XsltCompiler.Compile(System.Xml.IXmlInfosetReader,System.Xml.XmlResolver)">
    </member>
    <member name="M:System.Xml.Query.XsltCompiler.Compile(System.Xml.IXmlInfosetReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
    </member>
    <member name="P:System.Xml.Query.XsltCompiler.XmlCompilerEnvironment">
    </member>
    <member name="T:MS.Internal.Xml.QilVisitor">
      <summary>A base class for Qil visitors.</summary>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.Visit(MS.Internal.Xml.Qil)">
      <summary>
            Visit an entire Qil graph.
            </summary>
      <param name="q">the Qil graph to traverse</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.Visit(MS.Internal.Xml.QilNode)">
      <summary>
            Visit a Qil node and its entire subgraph.
            </summary>
      <param name="n">the root of the graph to traverse</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassNilary(MS.Internal.Xml.QilNode)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassUnary(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassBinary(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassTernary(MS.Internal.Xml.QilTernary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassNodeArray(MS.Internal.Xml.QilNode[])">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassFunction(MS.Internal.Xml.QilFunction)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassReference(MS.Internal.Xml.QilNode)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassIterator(MS.Internal.Xml.QilIterator)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitClassIteratorList(MS.Internal.Xml.QilIterator)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNull">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitUnknown(MS.Internal.Xml.QilNode)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitTrue(MS.Internal.Xml.QilNode)">
      <summary>Visit a True node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitFalse(MS.Internal.Xml.QilNode)">
      <summary>Visit a False node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDataSource(MS.Internal.Xml.QilDataSource)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNop(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitError(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralString(MS.Internal.Xml.QilString)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralInteger(MS.Internal.Xml.QilInteger)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralDouble(MS.Internal.Xml.QilDouble)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralQName(MS.Internal.Xml.QilName)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralDecimal(MS.Internal.Xml.QilDecimal)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralFloat(MS.Internal.Xml.QilFloat)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralDuration(MS.Internal.Xml.QilDuration)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralDateTime(MS.Internal.Xml.QilDateTime)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralTime(MS.Internal.Xml.QilDateTime)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralDate(MS.Internal.Xml.QilDateTime)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLiteralUri(MS.Internal.Xml.QilString)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSetIsEmpty(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSetDocOrderDistinct(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSetDistinct(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSetDistinctByValue(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSetIntersection(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSetDifference(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSetLength(MS.Internal.Xml.QilUnary)">
      <summary>Visit a SetLength node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitAverage(MS.Internal.Xml.QilUnary)">
      <summary>Visit an Average node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSum(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Sum node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitMinimum(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Minimum node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitMaximum(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Maximum node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitConditional(MS.Internal.Xml.QilTernary)">
      <summary>Visit a Conditional node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitFor(MS.Internal.Xml.QilIterator)">
      <summary>Visit a For node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLet(MS.Internal.Xml.QilIterator)">
      <summary>Visit a Let node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitTuple(MS.Internal.Xml.QilTuple)">
      <summary>Visit a Tuple node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSort(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSortKey(MS.Internal.Xml.QilSortKey)">
      <summary>Visit a SortKey node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDocumentOrder(MS.Internal.Xml.QilNode)">
      <summary>Visit a DocumentOrder node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNameOf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a NameOf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLocalNameOf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a LocalNameOf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNamespaceUriOf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a NamespaceUriOf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNodeTypeOf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a NodeTypeOf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitPositionOf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a PositionOf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitAnd(MS.Internal.Xml.QilBinary)">
      <summary>Visit a And node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitOr(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Or node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNot(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Not node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNe(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Ne node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitEq(MS.Internal.Xml.QilBinary)">
      <summary>Visit an Eq node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitGt(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Gt node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitGe(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Ge node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLt(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Lt node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitLe(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Le node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNegate(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Negate node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitPlus(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Plus node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitMinus(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Minus node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitMultiply(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Multiply node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDivide(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Divide node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitModulo(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Modulo node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitTypeOf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a TypeOf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDataType(MS.Internal.Xml.QilTypeNode)">
      <summary>Visit a DataType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathNodeValue(MS.Internal.Xml.QilUnary)">
      <summary>Visit a XPathNodeValue node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathNumberToString(MS.Internal.Xml.QilUnary)">
      <summary>Visit a XPathNumberToString node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathStringToNumber(MS.Internal.Xml.QilUnary)">
      <summary>Visit a XPathStringToNumber node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitElementCtor(MS.Internal.Xml.QilBinary)">
      <summary>Visit an ElementCtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitAttributeCtor(MS.Internal.Xml.QilBinary)">
      <summary>Visit an AttributeCtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitCommentCtor(MS.Internal.Xml.QilUnary)">
      <summary>Visit a CommentCtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitPICtor(MS.Internal.Xml.QilBinary)">
      <summary>Visit a PICtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitTextCtor(MS.Internal.Xml.QilUnary)">
      <summary>Visit a TextCtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitCDATACtor(MS.Internal.Xml.QilUnary)">
      <summary>Visit a CDATACtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDocumentCtor(MS.Internal.Xml.QilUnary)">
      <summary>Visit a DocumentCtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNamespaceDecl(MS.Internal.Xml.QilBinary)">
      <summary>Visit a NamespaceDecl node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitList(MS.Internal.Xml.QilList)">
      <summary>Visit a List node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitRange(MS.Internal.Xml.QilBinary)">
      <summary>Visit a List node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitStrConcat(MS.Internal.Xml.QilList)">
      <summary>Visit a StrConcat node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitStrSubstring(MS.Internal.Xml.QilTernary)">
      <summary>Visit a StrSubstring node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitStrSubstring2(MS.Internal.Xml.QilBinary)">
      <summary>Visit a StrSubstring2 node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitStrLength(MS.Internal.Xml.QilUnary)">
      <summary>Visit a StrLength node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitStrContains(MS.Internal.Xml.QilBinary)">
      <summary>Visit a StrContains node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitStrBeginsWith(MS.Internal.Xml.QilBinary)">
      <summary>Visit a StrBeginsWith node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitStrEndsWith(MS.Internal.Xml.QilBinary)">
      <summary>Visit a StrEndsWith node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitContent(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Content node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDescendantOrSelf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a DescendantOrSelf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitRoot(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Root node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDeref(MS.Internal.Xml.QilBinary)">
      <summary>Visit a Deref node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitData(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Data node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitParent(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Parent node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSelf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a Self node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitProjectInclude(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitProjectExclude(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitFunction(MS.Internal.Xml.QilFunction)">
      <summary>Visit a Function node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitInvoke(MS.Internal.Xml.QilInvoke)">
      <summary>Visit an Invoke node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitInvokeEarlyBound(MS.Internal.Xml.QilDelegate)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitInvokeLateBound(MS.Internal.Xml.QilDelegate)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathAncestor(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathAncestor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathAncestorOrSelf(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathAncestorOrSelf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathDescendant(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathDescendant node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathFollowing(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathFollowing node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathFollowingSibling(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathFollowingSibling node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathNamespace(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathNamespace node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathPreceding(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathPreceding node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXPathPrecedingSibling(MS.Internal.Xml.QilUnary)">
      <summary>Visit an XPathPrecedingSibling node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXmlContext(MS.Internal.Xml.QilNode)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitRTFCtor(MS.Internal.Xml.QilUnary)">
      <summary>Visit an RTFCtor node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXQueryBefore(MS.Internal.Xml.QilBinary)">
      <summary>Visit an XQueryBefore node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXQueryAfter(MS.Internal.Xml.QilBinary)">
      <summary>Visit an XQueryAfter node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXQueryCast(MS.Internal.Xml.QilBinary)">
      <summary>Visit an XQueryCast node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitXQueryAtomize(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLDelete(MS.Internal.Xml.QilUnary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLInsertAfter(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLInsertBefore(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLInsertInto(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLInsertIntoFirst(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLInsertIntoLast(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLReplace(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDMLUpdate(MS.Internal.Xml.QilTernary)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitElementNodeType(MS.Internal.Xml.QilNode)">
      <summary>Visit an ElementNodeType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitAttributeNodeType(MS.Internal.Xml.QilNode)">
      <summary>Visit an AttributeNodeType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitCommentNodeType(MS.Internal.Xml.QilNode)">
      <summary>Visit a CommentNodeType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitTextNodeType(MS.Internal.Xml.QilNode)">
      <summary>Visit a TextNodeType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitCDATANodeType(MS.Internal.Xml.QilNode)">
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitPINodeType(MS.Internal.Xml.QilNode)">
      <summary>Visit a PINodeType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitDocumentNodeType(MS.Internal.Xml.QilNode)">
      <summary>Visit a DocumentNodeType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitNamespaceNodeType(MS.Internal.Xml.QilNode)">
      <summary>Visit a NamespaceNodeType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSQLTable(MS.Internal.Xml.QilSQLTable)">
      <summary>Visit a SQLTable node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSQLColumn(MS.Internal.Xml.QilSQLColumn)">
      <summary>Visit a SQLColumn node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSQLIsNull(MS.Internal.Xml.QilUnary)">
      <summary>Visit a SQLIsNull node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSQLTypeOf(MS.Internal.Xml.QilUnary)">
      <summary>Visit a SQLTypeOf node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSQLDataType(MS.Internal.Xml.QilSQLType)">
      <summary>Visit a SQLDataType node.</summary>
      <param name="n">the node visited</param>
      <param name="">optional user data</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitor.VisitSQLLike(MS.Internal.Xml.QilBinary)">
    </member>
    <member name="T:System.Xml.Query.PathAnalyzer.FilterMoveStatus">
      <summary>
            Returned by FilterMoved property below.
            </summary>
    </member>
    <member name="T:System.Xml.Query.TupleSpaceUnnesting">
      <summary>
            Specifies whether tuple spaces that are nested within this one are never unnested or unnested after they
            are completely constructed.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:System.Xml.Query.XmlConstructAnalyzer.States" -->
    <member name="T:System.Xml.Query.TupleFieldLocation">
      <summary>
            Type of location to which a tuple field is bound.
            </summary>
    </member>
    <member name="T:System.Xml.Query.XmlIlTupleSpaceInfo.CachingFlags">
      <summary>
            Flags describing the characteristics of cached tuple spaces.
            </summary>
    </member>
    <member name="T:System.Xml.Query.XmlIlTupleSpaceInfo.BrTypeEnum">
      <summary>
            BrNone--Not in a branching context
            BrTrue--Branch if boolean expression evaluates to true
            BrFalse--Branch if boolean expression evaluates to false
            </summary>
    </member>
    <member name="T:System.Xml.Query.DataSourceCollection">
      <summary>
            Implements XmlResolver over a collection of data sources.  The user maps an opaque URI
            (i.e. moniker, alias, etc.) to each of these data sources.  Each data source remains in
            the collection and mapped to the same name until the user explicitly removes it.
            All data sources in the collection must share a common name table.
            </summary>
    </member>
    <member name="M:System.Xml.Query.DataSourceCollection.#ctor">
      <summary>
            Create a new data source collection using a newly created name table.
            </summary>
    </member>
    <member name="M:System.Xml.Query.DataSourceCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>
            Create a new data source collection using the specified name table.
            </summary>
    </member>
    <member name="M:System.Xml.Query.DataSourceCollection.Add(System.String,System.String)">
      <summary>
            Add a new in-memory document data source by loading the specified URL into the
            System.Xml cache.  The "sourceName" alias is mapped to the resulting data source.
            </summary>
    </member>
    <member name="M:System.Xml.Query.DataSourceCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>
            Add a new in-memory document data source by loading the System.Xml cache from the
            specified reader.  The "sourceName" alias is mapped to the resulting data source.
            </summary>
    </member>
    <member name="M:System.Xml.Query.DataSourceCollection.Add(System.String,System.Xml.IXmlInfosetNavigator)">
      <summary>
            Add a virtualized data source that is accessed through the IXmlInfosetNavigator interface.
            The "sourceName" alias is mapped to the data source.
            </summary>
    </member>
    <member name="M:System.Xml.Query.DataSourceCollection.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
            Return the data source that is mapped to the specified URI.  If no data source is mapped to the
            URI, then throw an exception.
            </summary>
    </member>
    <member name="M:System.Xml.Query.DataSourceCollection.ResolveUri(System.Uri,System.String)">
      <summary>
            Ignore the baseUri parameter, as DataSourceCollection relativeUri's must always
            directly correspond to an alias.  Since an alias may not be a valid absolute Uri,
            create an XmlSchemaUri that stores the relative URI.
            </summary>
    </member>
    <member name="P:System.Xml.Query.DataSourceCollection.UseTinyCache">
      <summary>
            FIXUPTHIS: For now, this property allows switching between the ObjectCache and
            the TinyCache.
            </summary>
    </member>
    <member name="P:System.Xml.Query.DataSourceCollection.NameTable">
      <summary>
            The name table associated with this collection of data sources.  All data sources
            must use the same name table.
            </summary>
    </member>
    <member name="P:System.Xml.Query.DataSourceCollection.Credentials">
      <summary>
            No need for Credentials.
            </summary>
    </member>
    <member name="T:System.Xml.Query.XmlDocumentFactory2">
      <summary>
            Publicly accessible way to create the XDocument2 cache (TinyCache).  The cache is only accessible via
            the IXmlInfosetNavigator interface.  Nodes in this cache are allocated as structures in pages.  Each node takes
            12 bytes in-line, and ~2-8 bytes out-of-line, depending on the document.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlDocumentFactory2.CreateXmlDocument(System.Xml.XmlReader)">
      <summary>
            Load the XDocument2 cache from the specified reader and return an IXmlInfosetNavigator positioned
            to the root node.
            </summary>
    </member>
    <member name="M:System.Xml.Query.XmlDocumentFactory2.CreateXmlDocument(System.Xml.IXmlInfosetReader)">
      <summary>
            Load the XDocument2 cache from the specified reader and return an IXmlInfosetNavigator positioned
            to the root node.
            </summary>
    </member>
    <member name="T:System.Xml.Query.XDocumentBuilder2.WhitespaceType">
      <summary>
            Although the XPath data model does not differentiate between text and whitespace, Managed Xml 1.0
            does.  Therefore, when building from an XmlReader, we must preserve these designations in order
            to remain backwards-compatible.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlAtomicValue.MoveToFirstChild">
    </member>
    <member name="P:MS.Internal.Xml.XmlAtomicValue.SystemType">
    </member>
    <member name="P:MS.Internal.Xml.XmlAtomicValue.ItemType">
    </member>
    <!-- Badly formed XML comment ignored for member "T:MS.Internal.Xml.ContentAndSiblingIterator" -->
    <member name="M:MS.Internal.Xml.ContentAndSiblingIterator.Reset">
      <summary>
            Reset iterator state.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.ContentAndSiblingIterator.MoveToFirstContent(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter)">
      <summary>
            Position navCurrent to the content child node of the input node-set that is first in document order and is
            not filtered by the filter test.  Return false if navCtxt has no matching children, or if it is not yet known
            whether the matching child is first in document order.  In either case, the caller must fetch the next input
            node and call this method again.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.ContentAndSiblingIterator.MoveToFirstSibling(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter)">
      <summary>
            Position navCurrent to the first sibling node of the input node-set that is first in document order and is
            not filtered by the filter test.  Return false if navCtxt has no matching siblings, or if it is not yet known
            whether the matching sibling is first in document order.  In either case, the caller must attempt to fetch the
            next input node and call this method again.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.ContentAndSiblingIterator.MoveToNext">
      <summary>
            Position navCurrent to the next matching content or sibling node that is first in document order.  Return false
            if a new context node needs to be fetched or if there are no more context nodes.  In either case, the caller should
            attempt to fetch the next input node.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.ContentAndSiblingIterator.IsDone">
      <summary>
            There are no more context nodes.  Return true if there are no more nodes to generate.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.ContentAndSiblingIterator.Current">
      <summary>
            Return the current result navigator.  This is only defined after MoveToFirstContent, MoveToFirstSibling,
            or MoveToNextSibling has returned true.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.DescendantIterator">
      <summary>
            Implements the DescScan and DescScanCheckDups physical operators according to XPath descendant axis rules.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.DescendantIterator.Reset">
      <summary>
            Reset iterator state.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.DescendantIterator.MoveToFirst(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter,System.Boolean)">
      <summary>
            Position Current to the first descendant node of navCtxt in document order, and which isn't filtered
            by the specified filter.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.DescendantIterator.MoveToFirstCheckDups(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter,System.Boolean)">
      <summary>
            If the context node-set is in document order, but returns multiple nodes, then many duplicates will
            be generated if no pruning is performed.  Prune any context nodes which are in the subtree of the previous
            context node (in which case context node should be discarded).
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.DescendantIterator.MoveToNext">
      <summary>
            Position Current to the next descendant node of navCurrent in document order, and which isn't filtered
            by this.filter.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.DescendantIterator.Current">
      <summary>
            Return the current result navigator.  This is only defined after MoveToFirst, MoveToFirstCheckDups,
            or MoveToNext has returned true.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.FollowingIterator">
      <summary>
            Implements the FollScan and FollScanCheckDups physical operators according to XPath following axis rules.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.FollowingIterator.Reset">
      <summary>
            Reset iterator state.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.FollowingIterator.MoveToFirst(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter)">
      <summary>
            Position Current to the first node which follows navCtxt in document order but is not a descendant of navCtxt,
            and which isn't filtered by the specified filter.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.FollowingIterator.MoveToFirstCheckDups(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter)">
      <summary>
            If the context node-set is in document order, but returns multiple nodes, then many duplicates will
            be generated if no pruning is performed.  Prune by finding the first context node in document order that
            has no other context nodes in its subtree.  All other context nodes should be discarded.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.FollowingIterator.MoveToNext">
      <summary>
            Position Current to the next node which follows Current in document order and which isn't filtered.
            Return false if there is no such node.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.FollowingIterator.IsDone">
      <summary>
            There are no more context nodes.  Return true if there are no more following nodes to generate.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.FollowingIterator.Current">
      <summary>
            Return the current result navigator.  This is only defined after MoveToFirst, MoveToFirstCheckDups, or
            MoveToNext, has returned true.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.PrecedingIterator">
      <summary>
            Implements the PrecScan and PrecScanCheckDups physical operators according to XPath following axis rules.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.PrecedingIterator.Reset">
      <summary>
            Reset iterator state.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.PrecedingIterator.MoveToFirst(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter)">
      <summary>
            Position Current to the first node which follows navCtxt in document order but is not a descendant of navCtxt,
            and which isn't filtered by the specified filter.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.PrecedingIterator.MoveToFirstCheckDups(System.Xml.IXmlInfosetNavigator,MS.Internal.Xml.XmlNavFilter)">
      <summary>
            If the context node-set is in document order, but returns multiple nodes, then many duplicates will
            be generated if no pruning is performed.  Discard all context nodes that are followed by another context
            node in the same document.  This leaves one node per document from which the complete set of preceding
            nodes can be derived without possibility of duplicates.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.PrecedingIterator.MoveToNext">
      <summary>
            Position navPrec to the next matching node in document order that precedes this.navCurrent.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.PrecedingIterator.IsDone">
      <summary>
            There are no more context nodes.  Return true if there are no more preceding nodes to generate.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.PrecedingIterator.Current">
      <summary>
            Return the current result navigator.  This is only defined after MoveToFirst or MoveToFirstCheckDups
            has returned true.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.NamespaceIterator">
      <summary>
            Implements the NamespaceScan physical operator.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.NamespaceIterator.MoveToFirst(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Push all of navCtxt's in-scope namespaces onto a stack and set navCurrent to the first of these.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.NamespaceIterator.MoveToNext">
      <summary>
            Pop the top namespace from the stack and save it as navCurrent.  If there are no more namespaces, return false.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.NamespaceIterator.Current">
      <summary>
            Return the current result navigator.  This is only defined after MoveToFirst or MoveToNext has returned true.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlSortKeyHelper">
      <summary>
            Helper class that adds sort keys to an array, resizing the array when necessary.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.UnionMerge">
      <summary>
            Implements the UnionMerge physical operator.  This operator manages several sets of nodes that are
            already in document order with no duplicates.  Using a merge sort, this operator returns the union of
            these sets in document order with no duplicates.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.UnionMerge.Init(System.Int32)">
      <summary>
            Initialize navigation state.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.UnionMerge.SuccessMerge(System.Xml.IXmlInfosetNavigator)">
      <summary>
            This method is called when the next node was successfully retrieved from the current sub-navigator.
            Merge sort this next node with nodes from the other sub-navigators.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.UnionMerge.FailureMerge">
      <summary>
            This method is called when the current sub-navigator has no more nodes.  Move all nodes from other
            sub-navigators towards front of merge array.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.UnionMerge.Current">
      <summary>
            Return the the current sub navigator's navigator.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.UnionMerge.CurrentSubIterId">
      <summary>
            Return the 1-based index of the current sub navigator.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlNavFilter">
      <summary>
            XmlNavFilter provides a flexible filtering abstraction over IXmlInfosetNavigator.  Callers do
            not know what type of filtering will occur; they simply call MoveToContent or MoveToSibling.
            The filter implementation invokes appropriate operation(s) on the IXmlInfosetNavigator in order
            to skip over filtered nodes.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.CreateNameFilter(System.String,System.String)">
      <summary>
            Create an XmlNavFilter that skips over nodes that do not match the specified name.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.CreateTypeFilter(System.Xml.XmlInfoItemType)">
      <summary>
            Return a previously constructed XmlNavFilter that skips over nodes that do not match the specified type.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.CreateAttrFilter">
      <summary>
            Create an XmlNavFilter that skips over attribute nodes.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.CreateNeverFilter">
      <summary>
            Create an XmlNavFilter that does not skip over any nodes (never filters).
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.MoveToContent(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Reposition the navigator to the first matching child node; skip over filtered nodes.
            If there are no matching nodes, then don't move navigator and return false.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.MoveToSibling(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Reposition the navigator to the next sibling node; skip over filtered nodes.
            If there are no matching nodes, then don't move navigator and return false.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.MoveToDescendantOf(System.Xml.IXmlInfosetNavigator,System.Xml.IXmlInfosetNavigator)">
      <summary>
            Reposition the navigator to the next descendant node; skip over filtered nodes.
            If there are no matching nodes, then return false.
            WARNING: For efficiency reasons, the navigator might move to an unpredictable position
                     if false is returned.  Therefore, callers shouldn't expect MoveToDescendantOf
                     to return false twice in a row given the same inputs.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavFilter.IsFiltered(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Return true if the navigator's current node matches the filter condition.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlNavStack">
      <summary>
            A dynamic stack of IXmlNavigators.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavStack.Push(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Push a navigator onto the stack
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavStack.Pop">
      <summary>
            Pop the topmost navigator and return it
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavStack.Pop(System.Int32)">
      <summary>
            Pop num navigators from the stack
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavStack.Peek">
      <summary>
            Returns the navigator at the top of the stack without adjusting the stack pointer
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlNavStack.Reset">
      <summary>
            Remove all navigators from the stack
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlNavStack.Size">
      <summary>
            Returns the number of navigators in the stack
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlNavStack.IsEmpty">
      <summary>
            Returns true if there are no navigators in the stack
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlQuerySequence">
      <summary>
            A sequence of Xml values that dynamically expands and allows random access to items.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.#ctor(MS.Internal.Xml.XmlQuerySequence@)">
      <summary>
            Copy constructor.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.GetEnumerator">
      <summary>
            IEnumerable implementation.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.Clear">
      <summary>
            Clear the cache
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.InfoItem(System.Int32)">
      <summary>
            Get an IXmlInfoItem from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.NavigatorItem(System.Int32)">
      <summary>
            Get a navigator from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.StringItem(System.Int32)">
      <summary>
            Get a string item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.DoubleItem(System.Int32)">
      <summary>
            Get a double item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.SingleItem(System.Int32)">
      <summary>
            Get a single (float) item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.BooleanItem(System.Int32)">
      <summary>
            Get a boolean item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.Int32Item(System.Int32)">
      <summary>
            Get an Int32 item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.Int64Item(System.Int32)">
      <summary>
            Get an Int64 item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.DecimalItem(System.Int32)">
      <summary>
            Get a decimal item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.DateTimeItem(System.Int32)">
      <summary>
            Get a DateTime item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.TimeSpanItem(System.Int32)">
      <summary>
            Get a TimeSpan item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.QualifiedNameItem(System.Int32)">
      <summary>
            Get a QName item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.ByteArrayItem(System.Int32)">
      <summary>
            Get a byte array item from the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddInfoItem(System.Xml.IXmlInfoItem)">
      <summary>
            Add an IXmlInfoItem to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddNavigatorItem(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Add a navigator to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddStringItem(System.String)">
      <summary>
            Add a string item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddDoubleItem(System.Double)">
      <summary>
            Add a double item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddSingleItem(System.Single)">
      <summary>
            Add a single (float) item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddBooleanItem(System.Boolean)">
      <summary>
            Add a boolean item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddInt32Item(System.Int32)">
      <summary>
            Add an Int32 item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddInt64Item(System.Int64)">
      <summary>
            Add an Int64 item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddDecimalItem(System.Decimal)">
      <summary>
            Add a decimal item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddDateTimeItem(System.DateTime)">
      <summary>
            Add a DateTime item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddTimeSpanItem(System.TimeSpan)">
      <summary>
            Add a TimeSpan item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddQualifiedNameItem(System.Xml.XmlQualifiedName)">
      <summary>
            Add a QName item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.AddByteArrayItem(System.Byte[])">
      <summary>
            Add a byte array item to the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.Reverse">
      <summary>
            Reverse the order of items in the cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.DocOrderDistinct">
      <summary>
            Sort the navigators in the cache by document order and remove duplicates.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlQuerySequence.SortByKeys(System.Array)">
      <summary>
            Sort the navigators in the cache using the keys contained in the provided array.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlQuerySequence.Count">
      <summary>
            Get the number of items that have been cached
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlQuerySequence.IsDocOrderDistinct">
      <summary>
            If this property is true, then the contents of this cache (must be navigators)
            are already in document order with no duplicates.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlSequenceBuilder">
      <summary>
            An implementation of IXmlInfosetWriter that builds a typed, in-memory instance of the XPath/XQuery
            data model.  Once construction is complete, the product can be obtained by calling one of
            the Result methods.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSequenceBuilder.#ctor">
      <summary>
            Create a sequence where the types are not known ahead of time.  If a document is built, lazily
            create a name table
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSequenceBuilder.#ctor(System.Xml.XmlNameTable,MS.Internal.Xml.XmlSequenceBuilder.SequenceType)">
      <summary>
            The "nameTable" will be used only if one or more in-memory documents are constructed.
            Caller must specify ahead of time what the data type of items in the sequence will be.
            If the seqence may be heterogenous, then SequenceType.InfoItem should be specified.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSequenceBuilder.StartTree">
      <summary>
            Do nothing, since it is not yet known whether this tree will consist of nothing but an atomic value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSequenceBuilder.EndTree">
      <summary>
            If this tree caused a full document to be constructed, then finish building the document and add it to the sequence.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSequenceBuilder.WriteItemReference(System.Xml.IXmlInfoItem)">
      <summary>
            Add a by-reference item to the sequence.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSequenceBuilder.EnsureBuildingDoc">
      <summary>
            If a document is not currently being built, then start one now.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlSequenceBuilder.ResultLength">
      <summary>
            Get the length of the resulting sequence. 
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlSequenceBuilder.ResultItem">
      <summary>
            Get the result of construction as a single IXmlInfoItem.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlSequenceBuilder.ResultNavigator">
      <summary>
            Get the result of construction as a single IXmlInfosetNavigator.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlSequenceBuilder.ResultValue">
      <summary>
            Get the result of construction as a single value of an InfoItem.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlSequenceBuilder.ResultSequence">
      <summary>
            Get the result of construction as an XmlQuerySequence.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.XmlSequenceBuilder.ResultEnumeration">
      <summary>
            Get the result of construction as IEnumerable.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlSortKey">
      <summary>
            Base class for all sort keys.
            Inherits from IComparable, so that Array.Sort can perform comparison.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSortKey.#ctor(System.Int32)">
      <summary>
            Initialize the base class with this key's index (relative to other keys involved in a sort).
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSortKey.AddSortKey(MS.Internal.Xml.XmlSortKey)">
      <summary>
            Sometimes a key is composed of multiple parts.  For example: (LastName, FirstName).  Multi-part
            keys are linked together in a list.  This method recursively adds a new key part to the end of the list.
            Returns the first (primary) key in the list.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSortKey.BreakSortingTie(MS.Internal.Xml.XmlSortKey)">
      <summary>
            When two keys are compared and found to be equal, the tie must be broken.  If there is a secondary key,
            then use that to break the tie.  Otherwise, use the input ordering to break the tie.  Since every key
            has a unique index, this is guaranteed to always break the tie.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSortKey.CompareToEmpty(System.Object)">
      <summary>
            Compare a non-empty key (this) to an empty key (obj).  The empty sequence always sorts either before all
            other values, or after all other values.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlSortKey.CompareTo(System.Object)">
      <summary>
            Base class is abstract and doesn't actually implement CompareTo; derived classes must do this.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlEmptySortKey">
      <summary>
            Sort key for the empty sequence.  Empty sequence always compares sorts either before all other values,
            or after all other values.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlDecimalSortKey">
      <summary>
            Sort key for Decimal values.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlInt64SortKey">
      <summary>
            Sort key for Int64 values.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlInt32SortKey">
      <summary>
            Sort key for Int32 values.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlStringSortKey">
      <summary>
            Sort key for String values.  Strings are sorted with respect to a Culture.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlDoubleSortKey">
      <summary>
            Sort key for Double values.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XmlWriterCheck">
      <summary>
            At run-time, a number of checks may need to be made in order to generate the correct sequence of calls
            to IXmlInfosetWriter:
              1. Well-formedness: Illegal state transitions, StartContent detection, no-content element detection
              2. Cached attributes: In XSLT, attributes override previously constructed attributes with the same name,
                 meaning that attribute names and values cannot be prematurely sent to IXmlInfosetWriter.
              3. Cached namespaces: All namespaces are tracked in order to ensure adequate namespaces and to ensure
                 minimal (or something close) namespaces.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:MS.Internal.Xml.XmlWriterCheck.#ctor(System.Xml.IXmlInfosetWriter)" -->
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WithinSequenceState">
      <summary>
            Set XmlState to WithinSequence -- currently constructing a top-level sequence.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.EnumAttrsState">
      <summary>
            Set XmlState to EnumAttrs -- have constructed zero or more attributes and namespace nodes,
            but no content nodes have yet been constructed.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WithinContentState">
      <summary>
            Set XmlState to WithinContent -- currently constructing element content.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WithinAttrState">
      <summary>
            Set XmlState to WithinAttr -- currently constructing an attribute value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WithinCommentState">
      <summary>
            Set XmlState to WithinAttr -- currently constructing a comment value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WithinPIState">
      <summary>
            Set XmlState to WithinAttr -- currently constructing a PI value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.ThrowInvalidStateError(System.Xml.XmlInfoItemType)">
      <summary>
            Throw an invalid state transition error.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.PushScope">
      <summary>
            Push namespace declaration scope.  This must be called just before StartElement() if it's
            possible that namespace declarations will be output on the new element.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.PopScope">
      <summary>
            If PushScope() was called before StartElement(), then PopScope() must be called after
            EndElement().
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.StartTreeChk(System.Xml.XmlInfoItemType)">
      <summary>
            Call IXmlInfosetWriter.StartTree() if the current state is WithinSequence.  Other states only occur within
            a document, so StartTree() should not be called again.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.EndTreeChk">
      <summary>
            If IXmlInfosetWriter.StartTree() was called, then IXmlInfosetWriter.EndTree() must be called.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartElement(System.String)">
      <summary>
            IXmlInfosetWriter.WriteStartElement() with empty prefix, ns, and null schema type.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartElementChk(System.String,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            WriteStartElementChk() with empty prefix, ns, and null schema type.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartElementChk(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Before calling IXmlInfosetWriter.WriteStartElement(), perform various checks:
              1. Ensure that the current state is WithinContent
              2. If element's prefix is not yet declared, make sure it will be declared on the element itself.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.StartElementContentChk">
      <summary>
            Before calling IXmlInfosetWriter.StartElementContent(), output any cached attributes and namespace nodes.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteEndElementNoContentChk(System.String)">
      <summary>
            WriteEndElementNoContentChk() with empty prefix, ns.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteEndElementNoContentChk(System.String,System.String,System.String)">
      <summary>
            Before calling IXmlInfosetWriter.WriteEndElement(), output any cached attributes and namespace nodes.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteEndElement(System.String)">
      <summary>
            IXmlInfosetWriter.WriteEndElement() with empty prefix, ns.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteEndElementChk(System.String)">
      <summary>
            WriteEndElementChk() with empty prefix, ns.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteEndElementChk(System.String,System.String,System.String)">
      <summary>
            If XmlState is EnumAttrs, then flush attributes.  Call IXmlInfosetWriter.WriteEndElement.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartAttribute(System.String)">
      <summary>
            IXmlInfosetWriter.WriteStartAttribute() with empty prefix, ns, and null schema type.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartAttributeChk(System.String,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            WriteStartAttributeChk() with empty prefix, ns, and null schema type.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartAttributeChk(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Before calling IXmlInfosetWriter.WriteStartAttribute(), perform various checks:
              1. Ensure that the current state is WithinAttrs
              2. If attribute's prefix is not yet declared, make sure it will be declared on the attribute's parent element.
              3. If the attribute's name may be a duplicate of other attribute names on the same element, then cache the
                 attribute.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteNamespaceDeclarationChk(System.String,System.String)">
      <summary>
            Add a new namespace declaration -- xmlns:prefix="ns" -- to the set of in-scope declarations.
            NOTE: This method should only be called if caller can guarantee that the current state is EnumAttrs
                  and that there will be no namespace conflicts in the current scope (e.g. trying to map the
                  same prefix to different namespaces within the same element start tag).  If no such
                  guarantees exist, then NamespaceDeclarationCheck() should be called instead.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteNamespaceDeclarationConflictChk(System.String,System.String,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Add a new namespace declaration -- xmlns:prefix="ns" -- to the set of in-scope declarations.
            If prefix is already mapped in the current scope or if attributes have already been added to
            the element, then throw an error.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartCommentChk(MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Ensure that element content can be constructed and then construct a comment.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteCommentTextBlockChk(System.String)">
      <summary>
            Cache the comment's text.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteEndCommentChk">
      <summary>
            Construct the comment using the cached text.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteStartPIChk(System.String,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Ensure that element content can be constructed and then construct a pi.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WritePITextBlockChk(System.String)">
      <summary>
            Cache the processing instruction's text.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteEndPIChk">
      <summary>
            Construct the pi using the cached name and text.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteAttributeTextBlockChk(System.String)">
      <summary>
            Add a block of attribute text to the latest attribute in the attribute cache.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteTextBlockChk(System.String)">
      <summary>
            Based on the current XmlState, determine what kind of text block to write.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Object)">
      <summary>
            Write an atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.String)">
      <summary>
            Write a string atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Boolean)">
      <summary>
            Write a boolean atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Int32)">
      <summary>
            Write an Int32 atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Int64)">
      <summary>
            Write an Int64 atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Single)">
      <summary>
            Write a float atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Double)">
      <summary>
            Write a double atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Decimal)">
      <summary>
            Write a decimal atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.DateTime)">
      <summary>
            Write a DateTime atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.TimeSpan)">
      <summary>
            Write a TimeSpan atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Int32,System.Xml.XmlQualifiedName)">
      <summary>
            Write a QName atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValue(System.Xml.IXmlInfoItem)">
      <summary>
            Write an atomic value to output.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Object,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write an atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.String,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a string atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Boolean,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a boolean atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Int32,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write an Int32 atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Int64,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write an Int64 atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Single,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a float atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Double,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a double atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Decimal,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a decimal atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.DateTime,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a DateTime atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.TimeSpan,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a TimeSpan atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Int32,System.Xml.XmlQualifiedName,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write a QName atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteValueChk(System.Xml.IXmlInfoItem,MS.Internal.Xml.XmlCheckFlags)">
      <summary>
            Write an atomic value to output.  Check current xml state first.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.WriteItemChk(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Write an item to output.  If currently constructing an Xml tree, then the item is always copied.
            At the top-level, the item's identity is preserved unless it's an atomic value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.CopyItemChk(System.Xml.IXmlInfosetNavigator)">
      <summary>
            Deep copy the subtree that is rooted at this navigator's current position to output.  If the current
            node is an element, copy all in-scope namespace nodes.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.CachedAttributes.AttrNameVal.Init(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaType,System.Int32)">
      <summary>
            Cache an attribute's name and type.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.CachedAttributes.AttrNameVal.Init(System.Xml.Schema.XmlSchemaType,System.Object)">
      <summary>
            Cache an atomic value that makes up part of the attribute's value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XmlWriterCheck.CachedAttributes.AttrNameVal.IsDuplicate(System.String,System.String,System.Int32)">
      <summary>
            Returns true if this attribute has the specified name (and thus is a duplicate).
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XQueryConvert">
      <summary>
            Contains conversion routines that conform to the conversion rules in the XQuery Functions and Operators spec.
            NOTE: Only a subset of the possible conversions exists here; other conversions are either explicitly represented
                  in QIL or are already correct in XmlConvert.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.XRuntime">
      <summary>
            Contains runtime support methods for generated Msil queries.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.#ctor(System.Object,System.Xml.XmlResolver,System.Xml.IXmlInfosetWriter,System.Xml.XmlNameTable)">
      <param name="defaultInput">Default entity</param>
      <param name="resolverInput">Get entities using this resolver</param>
      <param name="wrtOutput">Construct output using this writer</param>
      <param name="nameTable">NameTable which will be used to atomize all names used during the query</param>
      <param name="qnamesCData">List of element qnames whose text children should be wrapped in CData sections</param>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.Close">
      <summary>
            Called when the transformation has ended.  Close the output IXmlInfosetWriter.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.StartNestedDocument(System.Xml.IXmlInfosetWriter@,MS.Internal.Xml.XmlWriterCheck@)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.StartNestedItemSequence(MS.Internal.Xml.XmlSequenceBuilder.SequenceType,System.Xml.IXmlInfosetWriter@,MS.Internal.Xml.XmlWriterCheck@)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.EndNestedDocument(System.Xml.IXmlInfosetWriter@,MS.Internal.Xml.XmlWriterCheck@)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.EndNestedItemSequence(System.Xml.IXmlInfosetWriter@,MS.Internal.Xml.XmlWriterCheck@)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.GetWriters(System.Xml.IXmlInfosetWriter@,MS.Internal.Xml.XmlWriterCheck@)">
      <summary>
            Get all writers in one call.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.IsQNameEqual(System.Xml.IXmlInfosetNavigator,System.String,System.String)">
      <summary>
            Return true if the specified navigator's LocalName and NamespaceURI properties equal the argument names.
            Assume that the localName and namespaceUri arguments have been atomized with respect to nav.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.ComparePosition(System.Xml.IXmlInfosetNavigator,System.Xml.IXmlInfosetNavigator)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.MoveToFirstAttrContent(System.Xml.IXmlInfosetNavigator)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.MoveToNextAttrContent(System.Xml.IXmlInfosetNavigator)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.MoveToDescendantOf(System.Xml.IXmlInfosetNavigator,System.Xml.IXmlInfosetNavigator)">
      <summary>
            WARNING: For efficiency reasons, nav might move to an unpredictable position if false is
                     returned.  Therefore, callers shouldn't expect MoveToDescendantOf to return
                     false twice in a row given the same inputs.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.MoveToNamespace(System.Xml.IXmlInfosetNavigator,System.String)">
      <summary>
            Position the specified navigator to the "prefix" namespace.  If no such namespace exists, return false.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.SyncToNavigator(System.Xml.IXmlInfosetNavigator,System.Xml.IXmlInfosetNavigator)">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.GetDefaultEntity">
      <summary>
            Get the default entity associated with the input resolver.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XRuntime.GetEntityFromUri(System.Uri,System.String)">
      <summary>
            Call out to the input XmlResolver in order to map uriResolved to a physical document.  If the
            resolver returns a stream, create an instance of the TinyCache.  If the resolver returns an
            IXmlInfosetNavigator, return the navigator.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.IQilNodeList">
      <summary>
            A singly-linked list of QilNodes
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.IQilNodeList.NextNode">
      <summary>
            Access the next node in the list
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.NameGenerator">
      <summary>
            Mix-in class for generating unique names (Skolem function).
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.#ctor">
      <summary>
            Construct a new name generator with prefix "$" and alphabetical mode.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.#ctor(System.String)">
      <summary>
            Construct a new name generator with any prefix and alphaberical mode.
            </summary>
      <param name="prefix">the prefix</param>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.#ctor(MS.Internal.Xml.NameGenerator.Mode)">
      <summary>
            Construct a new name generator with prefix "$" and any mode.
            </summary>
      <param name="m">the mode</param>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.#ctor(MS.Internal.Xml.NameGenerator.Mode,System.String)">
      <summary>
            Construct a new name generator
            </summary>
      <param name="m">the mode</param>
      <param name="prefix">the prefix</param>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.NextName">
      <summary>
            Skolem function for names.
            </summary>
      <returns>a unique name beginning with the prefix</returns>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.NameOf(MS.Internal.Xml.QilNode)">
      <summary>
            Lookup or generate a name for a node.  Uses annotations to store the name on the node.
            </summary>
      <param name="i">the node</param>
      <returns>the node name (unique across nodes)</returns>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.Annotation(MS.Internal.Xml.QilNode,System.Int32)">
      <summary>
            Get the i'th annotation of a node
            </summary>
      <param name="n">the node</param>
      <returns>the annotation object</returns>
    </member>
    <member name="M:MS.Internal.Xml.NameGenerator.ConstructNameAnnotation(System.String,System.Object)">
      <summary>
            Override in subclasses to extend the name annotation class
            </summary>
      <param name="name">
      </param>
      <param name="ann">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:MS.Internal.Xml.NameGenerator.NameAnnotation">
      <summary>
            Class used to hold our annotations on the graph
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:MS.Internal.Xml.Qil" -->
    <member name="M:MS.Internal.Xml.Qil.GetConstantValue">
      <summary>
            If this expression is constant, return the value of the expression as an IXmlValueReader.
            Otherwise, return null.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.Qil.#ctor(MS.Internal.Xml.QilNode)">
      <summary>
            Construct Qil from a rooted graph of QilNodes
            </summary>
      <param name="n">the root of the Qil graph</param>
    </member>
    <member name="M:MS.Internal.Xml.Qil.ToXml(System.Xml.XmlTextWriter)">
      <summary>
            Serialize the graph as XML.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.Qil.ToXQuery(MS.Internal.Xml.XQueryWriter)">
      <summary>
            Serialize the graph as XQuery.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.Qil.Clone">
      <summary>
            Deep-copy the entire graph.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.Qil.NamespaceUri">
      <summary>
            Namespace URI used for Qil serialization
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.Qil.Root">
      <summary>
            The root node of the Qil graph
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.Qil.FunctionList">
      <summary>
            Function definitions
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.Qil.DataSourceList">
      <summary>
            DataSource nodes used by this Qil object
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.Qil.Schemas">
      <summary>
            A collection of schemas whose types may be used in QilNode.XmlType.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.Qil.IsDebug">
      <summary>
            True if this expression contains debugging information
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilBinary">
      <summary>
            A Qil node with two children.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilNode">
      <summary>
            A node in the Qil tree.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.#ctor(MS.Internal.Xml.QilNodeType)">
      <summary>
            Construct a new node
            </summary>
      <param name="t">the node type</param>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.DependsOn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <param name="j">the last iterator (not inclusive) to check; null to check all iterators</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.DependsOn(MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.IsReference">
      <summary>
            True if this is a reference node type (iterator or function)
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.Annotation(System.Int32)">
      <summary>
            Get the i-th annotation on the node.
            </summary>
      <param name="i">zero-based annotation index</param>
      <returns>the annotation object</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.SetAnnotation(System.Int32,System.Object)">
      <summary>
            Set the i-th annotation on the node.  Clobbers any previous setting for the annotation.
            </summary>
      <param name="i">zero-based annotation index</param>
      <param name="o">the annotation object</param>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.ValueEquals(MS.Internal.Xml.QilNode)">
      <summary>
            Check for value equality, applying referential transparency and
            disregarding (Xml) node identity.  Normally you should not use this method; use Equals() instead.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.Clone(MS.Internal.Xml.QilFactory)">
      <summary>
            Create a new copy of this node.
            </summary>
      <param name="f">the factory</param>
      <returns>an exact copy of this node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.CloneTypesTo(MS.Internal.Xml.QilNode)">
      <summary>
            Copy type information from this node to another one.
            </summary>
      <param name="n">the node to copy to</param>
    </member>
    <member name="M:MS.Internal.Xml.QilNode.TypeEquals(MS.Internal.Xml.QilNode)">
      <summary>
            Compare the types of this node with those of another (excluding XSD).
            </summary>
      <param name="n">the node to compare this to</param>
      <returns>true if this nodes types (excluding XSD) equal those of the other node</returns>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.Type">
      <summary>
            Access the Qil node type.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.BaseType">
      <summary>
            Access the base data type of this Qil node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.BaseTypeChoice">
      <summary>
            Access the choice of base data types for this Qil node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.XmlNodeType">
      <summary>
            Access the XML node type of this Qil node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.XmlNodeTypeChoice">
      <summary>
            Access the choice of XML node types for this Qil node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.CollectionType">
      <summary>
            Access the collection type of this node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.MemberType">
      <summary>
            Access the member data type of this Qil node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.MemberTypeChoice">
      <summary>
            Access the choice of member data types for this Qil node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.XmlType">
      <summary>
            The XSD type of this node
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.SourceLine">
      <summary>
            The Information about source from wich this qil node was compiled
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsCollection">
      <summary>
            True if this is a list or set.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsNode">
      <summary>
            True if this is an XML node.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsNodeSet">
      <summary>
            True if this is a collection of XML nodes.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsScalar">
      <summary>
            True if this is a scalar type.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsScalarSet">
      <summary>
            True if this is a collection of scalars.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsItem">
      <summary>
            True if this is an Item
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsItemCollection">
      <summary>
            True if this is a collection of items.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsConstructed">
      <summary>
            True if this XML node was constructed.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsIterator">
      <summary>
            True if this node is an iterator.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsNumber">
      <summary>
            True if this node is a number.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.MemberIsNumber">
      <summary>
            True if this collection's members are numbers.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.IsName">
      <summary>
            True if this node is a name.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilNode.AnnotationCount">
      <summary>
            The size of the annotation array.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilBinary.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new QilBinary
            </summary>
      <param name="t">the node type</param>
      <param name="n0">the left child expression</param>
      <param name="n1">the right child expression</param>
    </member>
    <member name="M:MS.Internal.Xml.QilBinary.DependsOn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <param name="j">the last iterator (not inclusive) to check; null to check all iterators</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="P:MS.Internal.Xml.QilBinary.Left">
      <summary>
            Access the left child expression
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilBinary.Right">
      <summary>
            Access the right child expression
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilCloneVisitor">
      <summary>
            Clone a Qil tree
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilDataSource">
      <summary>
            An arbitrary (possibly virtual) XML data source
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilUnary">
      <summary>
            A Qil node with one child.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilUnary.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new QilUnary
            </summary>
      <param name="t">the node type</param>
      <param name="n">the child expression</param>
    </member>
    <member name="M:MS.Internal.Xml.QilUnary.DependsOn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <param name="j">the last iterator (not inclusive) to check; null to check all iterators</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="P:MS.Internal.Xml.QilUnary.Child">
      <summary>
            Access the child expression
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilDataSource.#ctor(MS.Internal.Xml.QilNode,System.Object)">
      <summary>
            Construct a new QilDataSource
            </summary>
      <param name="kid">the child node</param>
      <param name="o">the node type</param>
    </member>
    <member name="P:MS.Internal.Xml.QilDataSource.UserData">
      <summary>
            Access the child object
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilDataType">
      <summary>
            the base type or member type of a Qil node
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.None">
      <summary>
            not a type (returned by MemberType when the node is not a collection)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Boolean">
      <summary>
            boolean type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.String">
      <summary>
            string type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Double">
      <summary>
            double-precision floating-point type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Integer">
      <summary>
            four-byte integer type (BUGBUG Fix-up all existing integer references to be int and then add xsd:integer)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.QName">
      <summary>
            qname type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Decimal">
      <summary>
            decimal type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Float">
      <summary>
            float type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Duration">
      <summary>
            duration type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.DateTime">
      <summary>
            dateTime type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Time">
      <summary>
            time type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Date">
      <summary>
            date type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Uri">
      <summary>
            uri type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.AtomicValue">
      <summary>
            any other Xsd Schema Type except listed above
            combine with XmlType to get the real Schematype
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Node">
      <summary>
            any Xml Node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Collection">
      <summary>
            any collection type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Type">
      <summary>
            a type type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.NodeType">
      <summary>
            node type type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.AnyScalar">
      <summary>
            shortcut for "any scalar type"
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Numeric">
      <summary>
            used in XQuery
            combining with many other types inside XmlType
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Item">
      <summary>
            shortcut for "any scalar type" + node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.AnyStructure">
      <summary>
            shortcut for "any structured type"
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.AnyType">
      <summary>
            shortcut for "any reflection type"
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.AnyNonNumber">
      <summary>
            shortcut for "non number type"
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilDataType.Any">
      <summary>
            shortcut for "any type"
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilCollectionType">
      <summary>
            the collection type of a Qil node
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilCollectionType.None">
      <summary>
            not a collection type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilCollectionType.Ordered">
      <summary>
            ordered collection type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilCollectionType.Unordered">
      <summary>
            unordered collection type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilCollectionType.Rowset">
      <summary>
            relational collection type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilCollectionType.Any">
      <summary>
            unknown collection type (may be ordered or unordered)
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilXmlNodeType">
      <summary>
            the Xml node type of a Qil node
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.None">
      <summary>
            not a node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Element">
      <summary>
            element type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Attribute">
      <summary>
            attribute type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Comment">
      <summary>
            comment type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.PI">
      <summary>
            processing-instruction type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Text">
      <summary>
            text type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.CDATA">
      <summary>
            CDATA node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Document">
      <summary>
            document type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Namespace">
      <summary>
            namespace type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.RTF">
      <summary>
            result-tree-fragment type (XSLT only)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Content">
      <summary>
            shortcut for "any traditional node" (element, comment, p-i, or text)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Node">
      <summary>
            shortcut for "any traditional node" (element, attribute, comment, p-i, or text)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilXmlNodeType.Any">
      <summary>
            shortcut for "any node"
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.SQLDataType">
      <summary>
            SQL Data Types recognized by the SQLXML compiler and back-end.  Copied from SQLXML MSSQLDataType.
            BUGBUG  This should probably use System.Data.DbType, although that introduces a dependency on System.Data and other issues.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Unknown">
      <summary>
            unknown SQL type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Bigint">
      <summary>
            SQL bigint
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Binary">
      <summary>
            SQL binary type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Bit">
      <summary>
            boolean (bit)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Char">
      <summary>
            ANSI character (char)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Datetime">
      <summary>
            SQL datetime
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Decimal">
      <summary>
            SQL decimal
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Float">
      <summary>
            SQL float
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Image">
      <summary>
            SQL image
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Int">
      <summary>
            SQL int
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Money">
      <summary>
            SQL money
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Nchar">
      <summary>
            SQL Unicode character (char)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Ntext">
      <summary>
            SQL ntext
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Numeric">
      <summary>
            SQL numeric
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Nvarchar">
      <summary>
            SQL nvarchar
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Overflow">
      <summary>
            overflow column in an annotated schema (type unknown)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Real">
      <summary>
            SQL real
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Smalldatetime">
      <summary>
            SQL smalldatetime
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Smallint">
      <summary>
            SQL smallint
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Smallmoney">
      <summary>
            SQL smallmoney
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Sql_variant">
      <summary>
            SQL variant
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Sysname">
      <summary>
            SQL sysname (used internally only; synonymous with nvarchar(128))
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Text">
      <summary>
            SQL text
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Timestamp">
      <summary>
            SQL timestamp
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Tinyint">
      <summary>
            SQL tinyint
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Uniqueidentifier">
      <summary>
            SQL uniqueidentifier
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Varbinary">
      <summary>
            SQL varbinary
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Varchar">
      <summary>
            SQL varchar
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.SQLDataType.Xml">
      <summary>
            XML datatype
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilDateTime">
      <summary>
            Qil node representing a dateTime, date, time, etc. value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilDateTime.#ctor(MS.Internal.Xml.QilNodeType,System.String)">
      <summary>
            Construct a new QilDateTime
            </summary>
      <param name="d">the dateTime value</param>
    </member>
    <member name="P:MS.Internal.Xml.QilDateTime.Value">
      <summary>
            Access the dateTime value
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilDecimal">
      <summary>
            Qil node representing a decimal value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilDecimal.#ctor(System.Decimal)">
      <summary>
            Construct a new QilDecimal
            </summary>
      <param name="d">the decimal value</param>
    </member>
    <member name="P:MS.Internal.Xml.QilDecimal.Value">
      <summary>
            Access the double value
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilDelegate">
      <summary>
            A CLR function invocation node.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilInvokeBase">
      <summary>
            Base class for function invocation.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilDouble">
      <summary>
            Qil node representing a double value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilDouble.#ctor(System.Double)">
      <summary>
            Construct a new QilDouble
            </summary>
      <param name="d">the double value</param>
    </member>
    <member name="P:MS.Internal.Xml.QilDouble.Value">
      <summary>
            Access the double value
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilDuration">
      <summary>
            Qil node representing a duration value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilDuration.#ctor(System.String)">
      <summary>
            Construct a new QilDuration
            </summary>
      <param name="d">the duration value</param>
    </member>
    <member name="P:MS.Internal.Xml.QilDuration.Value">
      <summary>
            Access the duration value
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilException">
      <summary>
            Qil error.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilException.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Construct a Qil exception
            </summary>
      <param name="msg">the base error message</param>
      <param name="line">the corresponding line number in the original query</param>
      <param name="pos">the corresponding line position in the original query</param>
    </member>
    <member name="P:MS.Internal.Xml.QilException.LineNumber">
      <summary>
            The line number in the original query where the error occurred
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilException.LinePosition">
      <summary>
            The line position in the original query where the error occurred
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilException.BaseMessage">
      <summary>
            The base error message (sans line number and position info)
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilFactory">
      <summary>
            Factory methods for constructing Qil nodes.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.#ctor">
      <summary>
            Construct a new QilFactory.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.ToXsdTypeString(MS.Internal.Xml.QilDataType)">
      <summary>
            Convert the QilDataType enumeration into the string representation of the
            corresponding XSD data type.
            </summary>
      <param name="dataType">the Qil data type to convert</param>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetTypes(MS.Internal.Xml.QilNode,System.Int32,System.Int32,MS.Internal.Xml.QilCollectionType,System.Int32,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Apply types to a node.
            </summary>
      <param name="n">the node</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Node(MS.Internal.Xml.QilNodeType,System.Int32,System.Int32,MS.Internal.Xml.QilCollectionType,System.Int32,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Create a new nullary (niladic) node.
            </summary>
      <param name="t">the node type</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
      <returns>a QilNode representing the node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Unary(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,System.Int32,System.Int32,MS.Internal.Xml.QilCollectionType,System.Int32,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a new unary node
            </summary>
      <param name="t">the node type</param>
      <param name="child">the child node</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
      <returns>a QilUnary representing the node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Unary(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilDataType,MS.Internal.Xml.QilXmlNodeType,MS.Internal.Xml.QilCollectionType,MS.Internal.Xml.QilDataType,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a new unary node
            </summary>
      <param name="t">the node type</param>
      <param name="child">the child node</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
      <returns>a QilUnary representing the node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Binary(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,System.Int32,System.Int32,MS.Internal.Xml.QilCollectionType,System.Int32,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a new binary node
            </summary>
      <param name="t">the node type</param>
      <param name="left">the left child node</param>
      <param name="right">the right child node</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
      <returns>a QilBinary representing the node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Binary(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilDataType,MS.Internal.Xml.QilXmlNodeType,MS.Internal.Xml.QilCollectionType,MS.Internal.Xml.QilDataType,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a new binary node
            </summary>
      <param name="t">the node type</param>
      <param name="left">the left child node</param>
      <param name="right">the right child node</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
      <returns>a QilBinary representing the node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Binary(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilDataType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new binary node.  The base type must be a simple scalar.
            </summary>
      <param name="t">the node type</param>
      <param name="dt">the base type</param>
      <param name="left">the left child node</param>
      <param name="right">the right child node</param>
      <returns>
      </returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Ternary(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,System.Int32,System.Int32,MS.Internal.Xml.QilCollectionType,System.Int32,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a new ternary node
            </summary>
      <param name="t">the node type</param>
      <param name="left">the first child node</param>
      <param name="center">the second child node</param>
      <param name="right">the third child node</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
      <returns>a QilTernary representing the node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Boolean(System.Boolean)">
      <summary>
            Construct a new True or False node.
            </summary>
      <param name="b">whether the node is true or false</param>
      <returns>a QilNode representing the boolean literal</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.True">
      <summary>
            Construct a new True node.  Represents the boolean literal "true".
            </summary>
      <returns>a QilNode representing the constant "true"</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.False">
      <summary>
            Construct a new False node.  Represents the boolean literal "false".
            </summary>
      <returns>a QilNode representing the constant "false"</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Nop(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new Nop node.  Represents a "fix-up" node; skip and perform its child.
            </summary>
      <param name="child">the collection</param>
      <returns>a QilUnary representing the nop</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.String(System.String)">
      <summary>
            Construct a new String node.  Represents a string literal.
            </summary>
      <param name="val">the string value</param>
      <returns>a QilString representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Integer(System.Int32)">
      <summary>
            Construct a new Integer node.  Represents an integer numeric literal.
            </summary>
      <param name="val">the numeric value</param>
      <returns>a QilInteger representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Double(System.Double)">
      <summary>
            Construct a new Double node.  Represents a double-precision floating-point numeric literal.
            </summary>
      <param name="val">the numeric value</param>
      <returns>a QilDouble representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Float(System.Single)">
      <summary>
            Construct a new Float node.  Represents a single-precision floating-point numeric literal.
            </summary>
      <param name="val">the numeric value</param>
      <returns>a QilFloat representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Decimal(System.Decimal)">
      <summary>
            Construct a new Decimal node.  Represents a decimal numeric literal.
            </summary>
      <param name="val">the numeric value</param>
      <returns>a QilDecimal representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Date(System.String)">
      <summary>
            Construct a new Date node.  Represents a date literal.
            </summary>
      <param name="val">the date value</param>
      <returns>a QilDate representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Time(System.String)">
      <summary>
            Construct a new Time node.  Represents a time literal.
            </summary>
      <param name="val">the time value</param>
      <returns>a QilTime representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DateTime(System.String)">
      <summary>
            Construct a new DateTime node.  Represents a dateTime literal.
            </summary>
      <param name="val">the dateTime value</param>
      <returns>a QilDateTime representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Duration(System.String)">
      <summary>
            Construct a new Duration node.  Represents a duration literal.
            </summary>
      <param name="val">the duration value</param>
      <returns>a QilDuration representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Uri(System.String)">
      <summary>
            Construct a new Uri node.  Represents a uri literal.
            </summary>
      <param name="val">the uri value</param>
      <returns>a QilString representing the constant value</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.QName(System.String,System.String,System.String)">
      <summary>
            Construct a new QName node.  Represents a QName literal.
            </summary>
      <param name="local">the local part (NCName) of the name</param>
      <param name="uri">the namespace uri part of the name</param>
      <param name="prefix">the namespace prefix part of the name</param>
      <returns>a QilName representing the name</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.QName(System.String,System.String)">
      <summary>
            Construct a new QName node.  Represents a QName literal.
            </summary>
      <param name="local">the local part (NCName) of the name</param>
      <param name="uri">the namespace uri part of the name</param>
      <returns>a QilName representing the name</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.QName(System.String)">
      <summary>
            Construct a new QName node.  Represents a QName literal.
            </summary>
      <param name="local">the local part (NCName) of the name</param>
      <returns>a QilName representing the name</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetIsEmpty(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new is-empty node.  Computes whether a collection is empty.
            </summary>
      <param name="child">the collection</param>
      <returns>a QilUnary representing the is-empty operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetDocOrderDistinct(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new distinct node.  Eliminates duplicates by identity from a nodeset.
            </summary>
      <param name="collection">the node collection</param>
      <returns>a QilUnary representing the distinct operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetDistinct(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new distinct node.  Eliminates duplicates by identity from a nodeset.
            </summary>
      <param name="collection">the node collection</param>
      <returns>a QilUnary representing the distinct operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetDistinctByValue(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new distinct-by-value node.  Eliminates duplicates by value from a collection.
            </summary>
      <param name="iterator">an iterator over the collection</param>
      <param name="condition">a second-order function (in terms of the iterator) that computes the value</param>
      <returns>a QilBinary representing the distinct-by-value operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetIntersection(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new intersection node.  Computes the set-intersection of two collections.
            </summary>
      <param name="left">the left collection</param>
      <param name="right">the right collection</param>
      <returns>a QilBinary representing the intersection</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetDifference(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new difference node.  Computes the set-difference of two collections.
            </summary>
      <param name="left">the left collection</param>
      <param name="right">the right collection</param>
      <returns>a QilBinary representing the difference</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetSubset(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "subset" node.  Selects a subset of an ordered collection.
            </summary>
      <param name="min">the lower bound</param>
      <param name="expr">the collection</param>
      <param name="max">the upper bound</param>
      <returns>a QilTernary representing the range operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SetLength(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "set-length" node.  Computes the size of a collection.
            </summary>
      <param name="child">the collection</param>
      <returns>a QilUnary representing the "set-length" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Any(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "any" node (a.k.a. Some, Exists).  Computes whether the collection is non-empty.
            </summary>
      <param name="child">the collection</param>
      <returns>a QilUnary representing the "any" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.All(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "all" sequence (a.k.a. Every).
            </summary>
      <param name="child">a collection of booleans</param>
      <returns>a QilUnary representing the "all" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Average(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "average" node.  Computes the average value of a collection of numbers.
            </summary>
      <param name="collection">the collection to compute the average of</param>
      <returns>a QilUnary representing the "average" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Sum(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "sum" node.  Computes the sum value of a collection of numbers.
            </summary>
      <param name="collection">the collection to compute the sum of</param>
      <returns>a QilUnary representing the "sum" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Minimum(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "minimum" node.  Computes the minimum value of a collection of numbers.
            </summary>
      <param name="collection">the collection to compute the minimum of</param>
      <returns>a QilUnary representing the "minimum" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Maximum(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "maximum" node.  Computes the minimum value of a collection of numbers.
            </summary>
      <param name="collection">the collection to compute the maximum of</param>
      <returns>a QilUnary representing the "maximum" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Conditional(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "if-then-else" node.  Computes one branch depending on a condition.
            </summary>
      <param name="ifTest">the boolean conditional test</param>
      <param name="trueBranch">the true branch</param>
      <param name="falseBranch">the false branch</param>
      <returns>a QilTernary representing the "if-then-else" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.For(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "for" node.  Iterates over a collection one member at a time (preserving order, if any).
            </summary>
      <param name="binding">the iterator binding</param>
      <returns>a QilIterator representing the for loop</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Let(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "let" node.  Assigns a value to this, defining an iteration of cardinality one (the assignment).
            </summary>
      <param name="binding">the assigned value</param>
      <returns>a QilIterator representing the assignment</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Tuple(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "tuple space" node.  Constructs or selects values for each member of the filtered tuple space.
            </summary>
      <param name="bindings">a list of iterators defining the tuple space</param>
      <param name="filter">the where clause (optional) that filters the space</param>
      <param name="returnClause">the return clause that constructs/selects</param>
      <returns>a QilTuple representing the tuple space</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Sort(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilSortKey)">
      <summary>
            Construct a new "sort" node.  Sorts a collection according to a list of sort-keys.
            </summary>
      <param name="iterator">an iterator over the the expression to sort</param>
      <param name="keys">one or more sort key(s) (expressed as second-order functions of the iterator)</param>
      <returns>a QilBinary representing the sort node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SortKey(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "(ascending) sort key" node.  Computes a sort key.
            </summary>
      <param name="key">the sort key, expressed as a second-order function of the sort iterator</param>
      <returns>a QilSortKey representing the sort key</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SortKey(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "sort key" node.  Computes a sort key.
            </summary>
      <param name="key">the sort key, expressed as a second-order function of the sort iterator</param>
      <returns>a QilSortKey representing the sort key</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DescendingSortKey(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "descending sort key" node.  Computes a sort key.
            </summary>
      <param name="key">the sort key, expressed as a second-order function of the sort iterator</param>
      <returns>a QilSortKey representing the sort key</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DocumentOrder">
      <summary>
            Construct a new document order node (may be used as the key in a SortKey).
            </summary>
      <returns>a QilNode representing the document order</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.NameOf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "name-of" node.  Computes the name of an XmlNode.
            </summary>
      <param name="expr">the expression</param>
      <returns>a QilUnary representing the name-of operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.LocalNameOf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "local-name-of" node.  Computes the local-name part of an XML node.
            </summary>
      <param name="expr">the expression</param>
      <returns>a QilUnary representing the name-of operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.NamespaceUriOf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "namespace-uri-of" node.  Computes the namespace-uri part of an XML node.
            </summary>
      <param name="expr">the expression</param>
      <returns>a QilUnary representing the name-of operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.NodeTypeOf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "nodetype-of" node.  Computes the node type of an XML node.
            </summary>
      <param name="expr">the expression</param>
      <returns>a QilUnary representing the nodetype-of operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.PositionOf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "position-of" node.  Computes the 1-based position within an ordered tuple.
            </summary>
      <param name="expr">the ordered tuple expression</param>
      <returns>a QilUnary representing the position-of operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.And(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "and" node.  Computes the logical conjunction (may short-circuit) of two boolean operands.
            </summary>
      <param name="left">the left boolean operand</param>
      <param name="right">the right boolean operand</param>
      <returns>a QilBinary representing the "and" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Or(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "or" node.  Computes the logical disjunction (may short-circuit) of two boolean operands.
            </summary>
      <param name="left">the left boolean operand</param>
      <param name="right">the right boolean operand</param>
      <returns>a QilBinary representing the "or" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Not(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "not" node.  Computes the logical negation of a boolean operand.
            </summary>
      <param name="child">the boolean operand</param>
      <returns>a QilUnary representing the "not" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Eq(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "equality" node.  Computes whether the two operands are equal.
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>a QilBinary representing the "equality" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Ne(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "inequality" node.  Computes whether the two operands are unequal.
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>a QilBinary representing the "inequality" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Lt(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "less-than" node.  Computes whether the left operand is less than the right operand.
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>a QilBinary representing the "less-than" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Gt(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "greater-than" node.  Computes whether the left operand is greater than the right operand.
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>a QilBinary representing the "greater-than" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Le(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "less-than-equals" node.  Computes whether the left operand is less than or equal to the right operand.
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>a QilBinary representing the "less-than-equals" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Ge(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "greater-than-equals" node.  Computes whether the left operand is greater than or equal to the right operand.
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>a QilBinary representing the "greater-than-equals" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Negate(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new arithmetic "negation" node.  Computes the arithmetic negation of a number.
            </summary>
      <param name="child">the numeric operand</param>
      <returns>a QilUnary representing the "negation" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Plus(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new arithmetic "addition" node.  Computes the arithmetic sum of two numbers.
            </summary>
      <param name="left">the left numeric operand</param>
      <param name="right">the right numeric operand</param>
      <returns>a QilBinary representing the "addition" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Minus(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new arithmetic "subtraction" node.  Computes the arithmetic difference of two numbers.
            </summary>
      <param name="left">the left numeric operand</param>
      <param name="right">the right numeric operand</param>
      <returns>a QilBinary representing the "subtraction" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Multiply(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new arithmetic "multiplication" node.  Computes the product of two numbers.
            </summary>
      <param name="left">the left numeric operand</param>
      <param name="right">the right numeric operand</param>
      <returns>a QilBinary representing the "multiplcation" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Divide(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new arithmetic "division" node.  Computes the floating-point quotient of two numbers.
            </summary>
      <param name="left">the left numeric operand</param>
      <param name="right">the right numeric operand</param>
      <returns>a QilBinary representing the "division" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Modulo(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new arithmetic "modulo" node.  Computes the arithmetic modulus of two numbers.
            </summary>
      <param name="left">the left numeric operand</param>
      <param name="right">the right numeric operand</param>
      <returns>a QilBinary representing the "modulo" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.TypeOf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "type-of" node.  Computes the BaseType of a node at runtime.
            </summary>
      <param name="child">the node to be typed</param>
      <returns>a QilUnary representing the "type-of" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DataType(MS.Internal.Xml.QilDataType)">
      <summary>
            Construct a new "data-type" node.  Represents a QilDataType literal.
            </summary>
      <param name="dt">the data type</param>
      <returns>a QilNode representing the "data type" literal</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Error(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "error" node.  Corresponds to the xf:error function.
            </summary>
      <param name="text">the error's text value</param>
      <returns>a QilUnary representing the error operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathNodeValue(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "XPathNodeValue" node.  Converts an Xml node to string according to the XPath conversion rules.
            </summary>
      <param name="child">the node to convert</param>
      <returns>a QilUnary representing the "XPathNodeValue" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathNumberToString(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "XPathNumberToString" node.  Converts a number to string according to the XPath conversion rules.
            </summary>
      <param name="child">the number to convert</param>
      <returns>a QilUnary representing the "XPathNumberToString" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathStringToNumber(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "XPathStringToNumber" node.  Converts a string to number according to the XPath conversion rules.
            </summary>
      <param name="child">the string to convert</param>
      <returns>a QilUnary representing the "XPathStringToNumber" operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.ElementCtor(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new element constructor node.  Creates a new element.
            </summary>
      <param name="name">the element name</param>
      <param name="content">the element content (attributes, children, etc.)</param>
      <returns>a QilBinary representing the element constructor</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.AttributeCtor(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new attribute constructor node.  Creates a new attribute.
            </summary>
      <param name="name">the attribute name</param>
      <param name="val">the attribute value</param>
      <returns>a QilBinary representing the attribute constructor</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.CommentCtor(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new comment constructor node.  Creates a new comment.
            </summary>
      <param name="content">the comment string</param>
      <returns>a QilString representing the comment constructor</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.PICtor(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new processing-instruction constructor node.  Creates a new p-i.
            </summary>
      <param name="name">the PI name</param>
      <param name="val">the PI content</param>
      <returns>a QilName representing the PI constructor (the content is stored in the uri slot)</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.TextCtor(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new text constructor node.  Creates a new text node.
            </summary>
      <param name="content">the text content</param>
      <returns>a QilUnary representing the text constructor</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.CDATACtor(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new CDATA constructor node.  Creates a new CDATA node.
            </summary>
      <param name="content">the text content</param>
      <returns>a QilUnary representing the CDATA constructor</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DocumentCtor(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new document constructor node.  Creates a new document node.
            </summary>
      <param name="child">the document content</param>
      <returns>a QilUnary representing the document constructor</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.NamespaceDecl(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new namespace decl node.  Creates a new namespace declaration.
            </summary>
      <param name="prefix">the namespace prefix</param>
      <param name="uri">the uri to which it is bound</param>
      <returns>a QilName representing the namespace decl</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.List">
      <summary>
            Construct a new list of expressions.  Creates a new empty list.
            </summary>
      <returns>a QilList representing the list</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.List(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new list of expressions.  Creates a new list containing these members.
            </summary>
      <param name="first">the first expression in the list</param>
      <param name="second">the second expression in the list</param>
      <returns>a QilList representing the list</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.List(System.Collections.IEnumerable)">
      <summary>
            Construct a new list of expresions.  Creates a new list containing these members.
            </summary>
      <param name="args">the list</param>
      <returns>a QilList representing the list</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Range(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a range operator.
            </summary>
      <param name="from">interger from which iteration stars</param>
      <param name="to">interger on which iteration stops</param>
      <returns>a QilBinary representing the set of integer values</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrConcat(System.Collections.IEnumerable)">
      <summary>
            Construct a new string concatenation operator.  Concatenates a list of string values.
            </summary>
      <param name="args">the function arguments</param>
      <returns>a QilList representing the string concatenation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrConcat">
      <summary>
            Construct a new string concatenation operator.  Concatenates a list of string values.
            </summary>
      <returns>a QilList representing the string concatenation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrSubstring(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new substring operator.  Selects a substring from a string.
            </summary>
      <param name="min">the lower bound</param>
      <param name="str">the string to substring</param>
      <param name="max">the upper bound</param>
      <returns>a QilTernary representing the substring</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrSubstring2(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new substring operator.  Selects a substring from a string.
            </summary>
      <param name="str">the string to substring</param>
      <param name="min">the lower bound</param>
      <returns>a QilBinary representing the substring</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrLength(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new string-length node.  Computes the length of a string.
            </summary>
      <param name="str">the string</param>
      <returns>a QilUnary representing the string-length node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrContains(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new string-contains node.  Computes whether a string contains a substring.
            </summary>
      <param name="str">the string</param>
      <param name="sub">the substring pattern</param>
      <returns>a QilBinary representing the string-contains node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrBeginsWith(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new string-begins-with node.  Computes whether one string begins with another.
            </summary>
      <param name="str">the string</param>
      <param name="sub">the substring pattern</param>
      <returns>a QilBinary representing the string-begins-with node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.StrEndsWith(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new string-ends-with node.  Computes whether one string ends with another.
            </summary>
      <param name="str">the string</param>
      <param name="sub">the substring pattern</param>
      <returns>a QilBinary representing the string-ends-with node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Content(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilXmlNodeType)">
      <summary>
            Construct a new content navigation node.  Matches some or all of the content of an XML node.
            </summary>
      <param name="context">the context node</param>
      <param name="nodetype">the node type to match</param>
      <returns>a QilUnary representing the content navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Content(MS.Internal.Xml.QilNode,System.Int32)">
      <summary>
            Construct a new content navigation node.  Matches some or all of the content of an XML node.
            </summary>
      <param name="context">the context node</param>
      <param name="nodetypes">the node types to match</param>
      <returns>a QilUnary representing the content navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Attributes(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new attributes navigation node.  Matches the attribute content of an XML node.
            </summary>
      <param name="context">the context node</param>
      <returns>a QilUnary representing the attributes navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DescendantOrSelf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new // navigation node.\
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the children navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Root(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new root navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing navigation to the XML root</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Dereference(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new dereference navigation node.  Finds the element (if any) in the document with matching id.
            </summary>
      <param name="context">the context nodeset</param>
      <param name="id">the id string to search for</param>
      <returns>a QilUnary representing the dereference node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Data(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new data navigation node.
            </summary>
      <param name="dt">the data type</param>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing navigation to the typed data content</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Parent(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new parent navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the parent node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Self(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new self navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the self node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Function(MS.Internal.Xml.QilIterator[],MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new function definition node.
            </summary>
      <param name="args">the function parameters</param>
      <param name="defn">the function body</param>
      <returns>a QilFunction representing the function definition</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Invoke(MS.Internal.Xml.QilFunction,MS.Internal.Xml.QilNode[])">
      <summary>
            Construct a new function invocation node.
            </summary>
      <param name="func">the function to invoke</param>
      <param name="args">the function parameters</param>
      <returns>a QilInvoke representing the function invocation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.Argument">
      <summary>
            Construct a new function argument node.
            </summary>
      <returns>a QilIterator representing the function argument</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.InvokeEarlyBound(MS.Internal.Xml.QilNode,System.Reflection.MethodInfo,MS.Internal.Xml.QilNode[])">
      <summary>
            Construct a new (early-bound) CLR function invocation node.
            </summary>
      <param name="d">the function pointer to invoke</param>
      <param name="args">the function parameters</param>
      <returns>a QilDelegate representing the function invocation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.InvokeLateBound(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode[])">
      <summary>
            Construct a new (late-bound) CLR function invocation node.
            </summary>
      <param name="name">the function name to invoke</param>
      <param name="args">the function parameters</param>
      <returns>a QilDelegate representing the function invocation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathAncestor(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XPath ancestor navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the XPath ancestor node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathAncestorOrSelf(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XPath ancestor-or-self navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the XPath ancestor-or-self node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathDescendant(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XPath descendant navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the XPath descendant node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathFollowing(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XPath following navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the XPath following node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathFollowingSibling(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XPath following-sibling navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the XPath following-sibling node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathPreceding(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XPath preceding navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the XPath preceding node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XPathPrecedingSibling(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XPath preceding-sibling navigation node.
            </summary>
      <param name="context">the context nodeset</param>
      <returns>a QilUnary representing the XPath preceding-sibling node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XmlContext">
      <summary>
            Construct an XML current context node.
            </summary>
      <returns>a QilNode representing the current XML context</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.RTFCtor(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new result-tree-fragment node.
            </summary>
      <param name="content">the content</param>
      <returns>a QilUnary representing the result-tree-fragment node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryBefore(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "before" node.  Computes the subset of nodes that appear before another.
            </summary>
      <param name="left">the left set</param>
      <param name="right">the right set</param>
      <returns>a QilBinary representing the before operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryAfter(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "after" node.  Computes the subset of nodes that appear after another.
            </summary>
      <param name="left">the left set</param>
      <param name="right">the right set</param>
      <returns>a QilBinary representing the after operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryCast(MS.Internal.Xml.QilDataType,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryCast node.  Convert an expression to another type.
            </summary>
      <param name="castType">the type to cast to</param>
      <param name="expr">the expression to be cast</param>
      <returns>a QilBinary representing the cast operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryAtomize(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryAtomize node.  Convert a sequence* (cardinality = 0 or more)
            to a sequence? (cardinality = 0 or 1), by throwing an error if the sequence has more
            than one item.
            </summary>
      <param name="expr">the expression to be atomized</param>
      <returns>a QilUnary representing the atomize operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryInsertAfter(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryInsertAfter node.  Corresponds to XQuery's INSERT left AFTER right
            </summary>
      <param name="left">the expression to insert</param>
      <param name="right">the location to insert after</param>
      <returns>a QilBinary representing the insert operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryInsertBefore(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryInsertBefore node.  Corresponds to XQuery's INSERT left BEFORE right
            </summary>
      <param name="left">the expression to insert</param>
      <param name="right">the location to insert before</param>
      <returns>a QilBinary representing the insert operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryInsertInto(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryInsertInto node.  Corresponds to XQuery's INSERT left INTO right
            </summary>
      <param name="left">the expression to insert</param>
      <param name="right">the location to insert into</param>
      <returns>a QilBinary representing the insert operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryInsertIntoFirst(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryInsertIntoFirst node.  Corresponds to XQuery's INSERT left INTO right AS FIRST
            </summary>
      <param name="left">the expression to insert</param>
      <param name="right">the location to insert into</param>
      <returns>a QilBinary representing the insert operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryInsertIntoLast(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryInsertIntoLast node.  Corresponds to XQuery's INSERT left INTO right AS LAST
            </summary>
      <param name="left">the expression to insert</param>
      <param name="right">the location to insert into</param>
      <returns>a QilBinary representing the insert operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryDelete(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryDelete node.  Corresponds to XQuery's DELETE expr
            </summary>
      <param name="expr">the expression to delete</param>
      <returns>a QilUnary representing the delete operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryUpdate(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryUpdate node.  Corresponds to XQuery's UPDATE left TO center
            </summary>
      <param name="left">the expression to update</param>
      <param name="center">the value it will become</param>
      <returns>a QilTernary representing the update operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryUpdate(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryUpdate node.  Corresponds to XQuery's UPDATE left TO center AT POSITION right
            </summary>
      <param name="left">the expression to update</param>
      <param name="center">the value it will become</param>
      <param name="right">the optional position to update</param>
      <returns>a QilTernary representing the update operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.XQueryReplace(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new XQueryReplace node.  Corresponds to XQuery's REPLACE left WITH right
            </summary>
      <param name="left">the expression to replace</param>
      <param name="right">the replacement expression</param>
      <returns>a QilBinary representing the replace operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.LoadXML(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a LoadXML node.  Loads an XML document at run-time.
            </summary>
      <param name="uri">the uri to load from (NOTE: We may restrict this to be constant)</param>
      <returns>a QilUnary representing the load XML operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DataSource(MS.Internal.Xml.QilNode,System.Object,System.Int32,System.Int32,MS.Internal.Xml.QilCollectionType,System.Int32,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a new DataSource node. 
            </summary>
      <param name="child">the child node</param>
      <param name="userData">the user data</param>
      <param name="bt">the base type</param>
      <param name="nt">the XmlNode type</param>
      <param name="ct">the collection type</param>
      <param name="mt">the member type</param>
      <param name="xt">the XSD type</param>
      <returns>a QilDataSourceNode representing the node</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DataSource(System.Object)">
      <summary>
            Construct a DataSource node.  Loads a data source at run-time.
            </summary>
      <param name="custom">the description of the datasource </param>
      <returns>a QilUnary representing the load XML operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.ElementNodeType">
      <summary>
            Construct a new element node type node.
            </summary>
      <returns>a QilNode representing the element node type</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.AttributeNodeType">
      <summary>
            Construct a new attribute node type node.
            </summary>
      <returns>a QilNode representing the attribute node type</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.TextNodeType">
      <summary>
            Construct a new text node type node.
            </summary>
      <returns>a QilNode representing the text node type</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.CommentNodeType">
      <summary>
            Construct a new comment node type node.
            </summary>
      <returns>a QilNode representing the comment node type</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.PINodeType">
      <summary>
            Construct a new processing-instruction node type node.
            </summary>
      <returns>a QilNode representing the processing-instruction node type</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.DocumentNodeType">
      <summary>
            Construct a new document node type node.
            </summary>
      <returns>a QilNode representing the document node type</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.NamespaceNodeType">
      <summary>
            Construct a new namespace node type node.
            </summary>
      <returns>a QilNode representing the namespace node type</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLTable(MS.Internal.Xml.QilNode,System.String,System.String[])">
      <summary>
            Construct a SQL table node.  Represents a SQL table.
            </summary>
      <param name="name">the table name</param>
      <param name="keyfields">a list of key-fields column names</param>
      <returns>a QilSQLTable representing the SQL table</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLTable(System.String,System.String)">
      <summary>
            Construct a SQL table node.
            </summary>
      <param name="name">the table name</param>
      <returns>a QilSQLTable representing the SQL table</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLTable(MS.Internal.Xml.QilNode,System.String)">
      <summary>
            Construct a SQL table node.  The argument must be string-typed.
            </summary>
      <param name="name">the table name</param>
      <returns>a QilSQLTable representing the SQL table</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLTable(System.String,System.String,System.String[])">
      <summary>
            Construct a SQL table nod
            </summary>
      <param name="name">the table name</param>
      <param name="keyfields">a list of key-fields column names</param>
      <returns>a QilSQLTable representing the SQL table</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLColumn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode,MS.Internal.Xml.SQLDataType,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a SQL column node.  Selects a SQL column.
            </summary>
      <param name="table">an iterator bound to the table containing this column</param>
      <param name="column">the column name</param>
      <param name="dt">the SQL data type</param>
      <returns>a QilSQLColumn representing the SQL column</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLColumn(MS.Internal.Xml.QilIterator,System.String)">
      <summary>
            Construct a SQL column node.
            </summary>
      <param name="table">an iterator bound to the table containing this column</param>
      <param name="column">the column name</param>
      <returns>a QilSQLColumn representing the SQL column</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLColumn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a SQL column node.
            </summary>
      <param name="table">an iterator bound to the table containing this column</param>
      <param name="column">the column name</param>
      <returns>a QilSQLColumn representing the SQL column</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLColumn(MS.Internal.Xml.QilIterator,System.String,MS.Internal.Xml.SQLDataType)">
      <summary>
            Construct a SQL column node.  The iterator must be bound to a SQLTable.
            </summary>
      <param name="table">an iterator bound to the table containing this column</param>
      <param name="column">the column name</param>
      <param name="dt">the SQL data type</param>
      <returns>a QilSQLColumn representing the SQL column</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLIsNull(MS.Internal.Xml.QilSQLColumn)">
      <summary>
            Construct a SQL IsNull node.  Computes whether a SQL column IS NULL.
            </summary>
      <param name="column">the column to test</param>
      <returns>a QilUnary representing the SQL IsNull operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLTypeOf(MS.Internal.Xml.QilSQLColumn)">
      <summary>
            Construct a SQL type-of node.  Computes the SQL data type of a SQL column.
            </summary>
      <param name="column">the SQL column</param>
      <returns>a QilUnary representing the SQL typeof operation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilFactory.SQLDataType(MS.Internal.Xml.SQLDataType)">
      <summary>
            Construct a SQL data type node.  Represents a SQL data type literal.
            </summary>
      <param name="dt">the data type</param>
      <returns>a QilSQLType representing the SQL data type</returns>
    </member>
    <member name="T:MS.Internal.Xml.QilFloat">
      <summary>
            Qil node representing a float value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilFloat.#ctor(System.Single)">
      <summary>
            Construct a new QilFloat
            </summary>
      <param name="d">the float value</param>
    </member>
    <member name="P:MS.Internal.Xml.QilFloat.Value">
      <summary>
            Access the float value
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilFunction">
      <summary>
            An anonymous Qil function node
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilHelperFactory">
      <summary>
            Additional factory methods for constructing Qil patterns.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.Tuple(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new "tuple space" node with a True where clause.
            </summary>
      <param name="bindings">a list of iterators defining the tuple space</param>
      <param name="returnClause">the return clause that constructs/selects</param>
      <returns>a QilTuple representing the tuple space</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.Tuple(MS.Internal.Xml.QilIterator)">
      <summary>
            Construct a new "tuple space" the trivial one.
            </summary>
      <param name="bindings">an iterators defining the tuple space</param>
      <returns>a QilTuple representing the tuple space</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoChildrenOf(MS.Internal.Xml.QilNode,System.String)">
      <summary>
            Perform the XPath navigation $collection/name
            </summary>
      <param name="collection">the context expression</param>
      <param name="name">the local-name of the child elements to be selected</param>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoChildrenOf(MS.Internal.Xml.QilNode,System.String,System.String)">
      <summary>
            Perform the XPath navigation $collection/qname
            </summary>
      <param name="collection">the context expression</param>
      <param name="namespaceUri">the namespace-uri of the children to be selected</param>
      <param name="localName">the local-name of the children to be selected</param>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoChildrenOf(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Perform the XPath navigation $collection/qname
            </summary>
      <param name="collection">the context expression</param>
      <param name="qname">the qualified name of the child elements to be selected</param>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoAllChildrenOf(MS.Internal.Xml.QilNode)">
      <summary>
            Perform the XPath navigation $collection/*
            </summary>
      <param name="collection">the context expression</param>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoAttributesOf(MS.Internal.Xml.QilNode,System.String)">
      <summary>
            Perform the XPath navigation $collection/@name
            </summary>
      <param name="collection">the context expression</param>
      <param name="name">the local-name of the attributes to be selected</param>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoAttributesOf(MS.Internal.Xml.QilNode,System.String,System.String)">
      <summary>
            Perform the XPath navigation $collection/@qname
            </summary>
      <param name="collection">the context expression</param>
      <param name="namespaceUri">the namespace-uri of the attributes to be selected</param>
      <param name="localName">the local-name of the attributes to be selected</param>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoAttributesOf(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Perform the XPath navigation $collection/@qname
            </summary>
      <param name="collection">the context expression</param>
      <param name="qname">
      </param>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.NavigateIntoAllAttributesOf(MS.Internal.Xml.QilNode)">
      <summary>
            Perform the XPath navigation $collection/@*
            </summary>
      <returns>a QilTuple representing the navigation</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.Conjunct(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Combine two nodes using "and" (constant-folds if either node is true or false).
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>the conjunction of the two operands</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.Disjunct(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Combine two nodes using "or" (constant-folds if either node is true or false).
            </summary>
      <param name="left">the left operand</param>
      <param name="right">the right operand</param>
      <returns>the disjunction of the two operands</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.Not2(MS.Internal.Xml.QilNode)">
      <summary>
            Apply boolean negation to a node (constant-folding if the node is true or false).
            </summary>
      <param name="child">the operand</param>
      <returns>the negation of the operand</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilHelperFactory.SetIsEmpty(MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new is-empty node.  Computes whether a collection is empty.
            </summary>
      <param name="child">the collection</param>
      <returns>a QilUnary representing the is-empty operation</returns>
    </member>
    <member name="T:MS.Internal.Xml.QilInteger">
      <summary>
            Qil node representing a integer value.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilInteger.#ctor(System.Int32)">
      <summary>
            Construct a new QilInteger
            </summary>
      <param name="d">the integer value</param>
    </member>
    <member name="P:MS.Internal.Xml.QilInteger.Value">
      <summary>
            Access the integer value
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilInvoke">
      <summary>
            A function invocation node.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilIterator">
      <summary>
            An iterator bound to an expression
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilIterator.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode)">
      <summary>
            Construct an iterator
            </summary>
      <param name="t">the iterator type</param>
      <param name="b">the expression to which it is bound</param>
    </member>
    <member name="M:MS.Internal.Xml.QilIterator.ValueEquals(MS.Internal.Xml.QilNode)">
      <summary>
            Check for value equality, disregarding (Xml) node identity
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilIterator.DependsOn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <param name="j">the last iterator (not inclusive) to check; null to check all iterators</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="P:MS.Internal.Xml.QilIterator.Name">
      <summary>
            Name of this variable (only set when generating debug info)
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilIterator.Binding">
      <summary>
            Access the iterator binding
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilIterator.Next">
      <summary>
            Access the next iterator
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilIterator.Prev">
      <summary>
            Access the previous iterator
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilIterator.NextNode">
      <summary>
            Access the next iterator
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilList">
      <summary>
            A list of nodes.  (A list of length 1 behaves like a singleton.)
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilList.#ctor">
      <summary>
            Construct a new (empty) QilList
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilList.#ctor(MS.Internal.Xml.QilNodeType)">
      <summary>
            Construct a new (empty) QilList
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilList.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new (single-member) QilList
            </summary>
      <param name="nodeType">the node type</param>
      <param name="first">the first member</param>
    </member>
    <member name="M:MS.Internal.Xml.QilList.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new (two-member) QilList
            </summary>
      <param name="nodeType">the node type</param>
      <param name="first">the first member</param>
      <param name="second">the second member</param>
    </member>
    <member name="M:MS.Internal.Xml.QilList.Add(MS.Internal.Xml.QilNode)">
      <summary>
            Add a member to the list
            </summary>
      <param name="node">the member to add</param>
    </member>
    <member name="M:MS.Internal.Xml.QilList.Add(System.Collections.IEnumerable)">
      <summary>
            Add a members to the list
            </summary>
      <param name="args">a list of arguments to add</param>
    </member>
    <member name="M:MS.Internal.Xml.QilList.GetEnumerator">
      <summary>
            Enumerate over the list
            </summary>
      <returns>an enumerator</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilList.DependsOn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <param name="j">the last iterator (not inclusive) to check; null to check all iterators</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="P:MS.Internal.Xml.QilList.Count">
      <summary>
            Access the list size
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilList.IsEmpty">
      <summary>
            Returns true if the list is empty
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilList.Item(System.Int32)">
      <summary>
            Access the i-th member of the list
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilName">
      <summary>
            A name
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilName.#ctor(System.String,System.String,System.String)">
      <summary>
            Construct a new QilName
            </summary>
      <param name="local">the localname part</param>
      <param name="uri">the namespace uri part</param>
      <param name="prefix">the namespace prefix</param>
    </member>
    <member name="M:MS.Internal.Xml.QilName.GetHashCode">
      <summary>
            To be able to use QilName as a key in hashtable.
            We should probably redefine Equals as well
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilName.Equals(System.Object)">
      <summary>
            To make QilName work with hashtable we should redefine this method
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilName.LocalName">
      <summary>
            Access the (non-qualified) local name
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilName.NamespaceURI">
      <summary>
            Access the namespace uri
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilName.Prefix">
      <summary>
            Access the namespace prefix
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilNodeFinder">
      <summary>
            Helper class to search a Qil graph for all nodes of a particular type.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilNodeType">
      <summary>
            An enumeration of all the possible Qil node types.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Unknown">
      <summary>
            Unknown Qil node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.True">
      <summary>
            True constant.  See <see cref="M:MS.Internal.Xml.QilFactory.True">QilFactory.True</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.False">
      <summary>
            False constant.  See <see cref="M:MS.Internal.Xml.QilFactory.False">QilFactory.False</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.DataSource">
      <summary>
            An arbitrary (possibly virtual) XML data source
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Nop">
      <summary>
            "Fix-up" node type (skip it and perform its operand instead)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Error">
      <summary>
            Corresponds to the xf:error function.  See <see cref="M:MS.Internal.Xml.QilFactory.Error(MS.Internal.Xml.QilNode)">QilFactory.Error</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralString">
      <summary>
            A string literal.  See <see cref="!:QilFactory.LiteralString">QilFactory.LiteralString</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralInteger">
      <summary>
            An integer literal.  See <see cref="!:QilFactory.LiteralInteger">QilFactory.LiteralInteger</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralDouble">
      <summary>
            A double-precision floating-point literal.  See <see cref="!:QilFactory.LiteralDouble">QilFactory.LiteralDouble</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralQName">
      <summary>
            A qualified name literal.  See <see cref="!:QilFactory.LiteralQName">QilFactory.LiteralQName</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralDecimal">
      <summary>
            A decimal literal.  See <see cref="!:QilFactory.LiteralDecimal">QilFactory.LiteralDecimal</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralFloat">
      <summary>
            A single-precision floating-point literal.  See <see cref="!:QilFactory.LiteralFloat">QilFactory.LiteralFloat</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralDuration">
      <summary>
            A Duration literal.  See <see cref="!:QilFactory.LiteralDuration">QilFactory.LiteralDuration</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralDateTime">
      <summary>
            A DateTime literal.  See <see cref="!:QilFactory.LiteralDateTime">QilFactory.LiteralDateTime</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralTime">
      <summary>
            A Time literal.  See <see cref="!:QilFactory.LiteralTime">QilFactory.LiteralTime</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralDate">
      <summary>
            A Date literal.  See <see cref="!:QilFactory.LiteralDate">QilFactory.LiteralDate</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LiteralUri">
      <summary>
            A Uri literal.  See <see cref="!:QilFactory.LiteralUri">QilFactory.LiteralUri</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SetIsEmpty">
      <summary>
            True if a set is empty.  See <see cref="M:MS.Internal.Xml.QilFactory.SetIsEmpty(MS.Internal.Xml.QilNode)">QilFactory.SetIsEmpty</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SetDocOrderDistinct">
      <summary>
            Remove duplicates (by identity) from a nodeset and sorts it by document order.  See <see cref="M:MS.Internal.Xml.QilFactory.SetDocOrderDistinct(MS.Internal.Xml.QilNode)">QilFactory.SetDocOrderDistinct</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SetDistinct">
      <summary>
            Remove duplicates (by identity) from a collection, preserving collection order.  See <see cref="M:MS.Internal.Xml.QilFactory.SetDistinct(MS.Internal.Xml.QilNode)">QilFactory.SetDistinct</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SetDistinctByValue">
      <summary>
            Remove duplicates  (by value) from a collection.  See <see cref="M:MS.Internal.Xml.QilFactory.SetDistinctByValue(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode)">QilFactory.SetDistinctByValue</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SetIntersection">
      <summary>
            Compute the intersection of one set with another.  See <see cref="M:MS.Internal.Xml.QilFactory.SetIntersection(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">QilFactory.SetIntersection</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SetDifference">
      <summary>
            Compute the (asymmetric) difference of one set with another.  See <see cref="M:MS.Internal.Xml.QilFactory.SetDifference(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">QilFactory.SetDifference</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SetLength">
      <summary>
            Compute the size of a set.  See <see cref="M:MS.Internal.Xml.QilFactory.SetLength(MS.Internal.Xml.QilNode)">QilFactory.SetLength</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Average">
      <summary>
            Compute the average value of a collection.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Sum">
      <summary>
            Compute the sum of a collection.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Minimum">
      <summary>
            Compute the minimum value in a collection.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Maximum">
      <summary>
            Compute the maximum value in a collection.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Conditional">
      <summary>
            If-then-else test.  QilTernary(Left=IfTest, Center=TrueBranch, Right=FalseBranch) : TypeOf(Center)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.For">
      <summary>
            A for loop iterator (FOR $i IN expr).  QilIterator(Binding) : TypeOf(Binding)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Let">
      <summary>
            An assignment iterator (LET $i := expr).  QilIterator(Binding) : TypeOf(Binding)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Tuple">
      <summary>
            An unordered tuple space.  QilTuple(Iterator, Where, Return) : QilDataType.List
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Sort">
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Ascending">
      <summary>
            Ascending sort key (used only by Sort).  See <see cref="M:MS.Internal.Xml.QilFactory.SortKey(MS.Internal.Xml.QilNode)">QilFactory.Ascending</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Descending">
      <summary>
            Descending sort key (used only by Sort).  See <see cref="M:MS.Internal.Xml.QilFactory.SortKey(MS.Internal.Xml.QilNode)">QilFactory.Descending</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.DocumentOrder">
      <summary>
            A DocumentOrder sort key.(used only by Sort).  See <see cref="M:MS.Internal.Xml.QilFactory.DocumentOrder">QilFactory.DocumentOrder</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.NameOf">
      <summary>
            Name of an expression.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.LocalNameOf">
      <summary>
            The local name of an expression.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.NamespaceUriOf">
      <summary>
            The namespace uri of an expression.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.NodeTypeOf">
      <summary>
            The node type of an expression.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.PositionOf">
      <summary>
            The position within a collection.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.And">
      <summary>
            Compute the conjunction of two booleans. See <see cref="M:MS.Internal.Xml.QilFactory.And(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">QilFactory.And</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Or">
      <summary>
            Compute the disjunction of two booleans. See <see cref="M:MS.Internal.Xml.QilFactory.Or(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">QilFactory.Or</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Not">
      <summary>
            Compute the negation of a boolean. See <see cref="M:MS.Internal.Xml.QilFactory.Not(MS.Internal.Xml.QilNode)">QilFactory.Not</see></summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Ne">
      <summary>
            True if the argument values are not equal.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Eq">
      <summary>
            True if the argument values are equal.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Gt">
      <summary>
            greater-than.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Ge">
      <summary>
            greater-than-or-equals.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Lt">
      <summary>
            less-than.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Le">
      <summary>
            less-than or equals.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Negate">
      <summary>
            arithmetic negation.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Plus">
      <summary>
            arithmetic addition.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Minus">
      <summary>
            arithmetic subtraction.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Multiply">
      <summary>
            arithmetic multiplcation.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Divide">
      <summary>
            arithmetic division.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Modulo">
      <summary>
            arithmetic modulo.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.TypeOf">
      <summary>
            dynamic type accessor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.DataType">
      <summary>
            data type literal.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathNodeValue">
      <summary>
            Value of the node in XPath data model.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathNumberToString">
      <summary>
            Converts number to string.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathStringToNumber">
      <summary>
            Parse string as number.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.ElementCtor">
      <summary>
            element constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.AttributeCtor">
      <summary>
            attribute constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.CommentCtor">
      <summary>
            comment constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.PICtor">
      <summary>
            processing-instruction constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.TextCtor">
      <summary>
            text constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.CDATACtor">
      <summary>
            CDATA constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.DocumentCtor">
      <summary>
            document node constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.NamespaceDecl">
      <summary>
            namespace decl constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.List">
      <summary>
            list constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Range">
      <summary>
            range constructor.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.StrConcat">
      <summary>
            Concatenate a list of strings.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.StrSubstring">
      <summary>
            Compute the substring of a string (from one position to another).
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.StrSubstring2">
      <summary>
            Compute the substring of a string (from a position to the end).
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.StrLength">
      <summary>
            Compute the length of a string.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.StrContains">
      <summary>
            True if one string contains the other.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.StrBeginsWith">
      <summary>
            True if one string begins with the other.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.StrEndsWith">
      <summary>
            True if one string ends with the other.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Content">
      <summary>
            navigate to all immediate child nodes (all types; use XmlNodeType to select particular types)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.DescendantOrSelf">
      <summary>
            navigate to all descendant nodes or self node
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Root">
      <summary>
            navigate to the document root
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Deref">
      <summary>
            navigate to a node by id (id lookup)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Data">
      <summary>
            navigate to the typed data content of a node
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Parent">
      <summary>
            navigate to the parent (optimized out)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Self">
      <summary>
            navigate to this node (optimized out)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.ProjectInclude">
      <summary>
            project a node (including matching content)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.ProjectExclude">
      <summary>
            project a node (excluding matching content)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Function">
      <summary>
            define a Qil function
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.Invoke">
      <summary>
            invoke a Qil function definition
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.InvokeEarlyBound">
      <summary>
            invoke a CLR function by methodinfo
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.InvokeLateBound">
      <summary>
            invoke a CLR function by name
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathAncestor">
      <summary>
            ancestor axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathAncestorOrSelf">
      <summary>
            ancestor-or-self axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathDescendant">
      <summary>
            descendant axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathFollowing">
      <summary>
            following axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathFollowingSibling">
      <summary>
            following-sibling axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathNamespace">
      <summary>
            namespace axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathPreceding">
      <summary>
            preceding axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XPathPrecedingSibling">
      <summary>
            preceding-sibling axis
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XmlContext">
      <summary>
            current XML context
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.RTFCtor">
      <summary>
            Construct a result-tree-fragment.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XQueryBefore">
      <summary>
            XQuery before
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XQueryAfter">
      <summary>
            XQuery after
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XQueryCast">
      <summary>
            dynamic type casting.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.XQueryAtomize">
      <summary>
            atomization (sequence* to sequence?)
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.ElementNodeType">
      <summary>
            element node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.AttributeNodeType">
      <summary>
            attribute node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.CommentNodeType">
      <summary>
            comment node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.TextNodeType">
      <summary>
            text node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.CDATANodeType">
      <summary>
            text node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.PINodeType">
      <summary>
            processing-instruction node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.DocumentNodeType">
      <summary>
            document node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.NamespaceNodeType">
      <summary>
            namespace node type
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SQLTable">
      <summary>
            a SQL table
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SQLColumn">
      <summary>
            a SQL column
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SQLIsNull">
      <summary>
            column operator
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SQLTypeOf">
      <summary>
            column operator
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilNodeType.SQLDataType">
      <summary>
            SQL type literal
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilOptimizer">
      <summary>
            Optimization/normalization engine for Qil
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilOptimizer.Optimization">
      <summary>
            Optimization types
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilSortKey">
      <summary>
            A Qil node for sorting.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilSortKey.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new QilSortKey
            </summary>
      <param name="t">the node type (ascending or descending)</param>
      <param name="key">the key expression</param>
    </member>
    <member name="P:MS.Internal.Xml.QilSortKey.IsDescending">
      <summary>
            True if sorting in descending order
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSortKey.Key">
      <summary>
            Access the key expression
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSortKey.Next">
      <summary>
            Access the next sort key
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSortKey.NextNode">
      <summary>
            Access the next sort key
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilSQLColumn">
      <summary>
            A SQL column
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLColumn.#ctor(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode,MS.Internal.Xml.SQLDataType,System.Xml.Schema.XmlSchemaType)">
      <summary>
            Construct a new SQL column
            </summary>
      <param name="i">the corresponding table</param>
      <param name="name">the column name</param>
      <param name="dt">the SQL type of the column</param>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLColumn.#ctor(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new SQL column
            </summary>
      <param name="i">the corresponding table</param>
      <param name="name">the column name</param>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLColumn.GetHashCode">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLColumn.Equals(System.Object)">
      <summary>
      </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSQLColumn.Name">
      <summary>
            Access the column name
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSQLColumn.Iterator">
      <summary>
            Access the table iterator
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:MS.Internal.Xml.QilSQLColumn.SQLDataType" -->
    <member name="T:MS.Internal.Xml.QilSQLTable">
      <summary>
            A SQL table
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLTable.#ctor(MS.Internal.Xml.QilNode,System.String,System.String[])">
      <summary>
            Construct a new SQL table
            </summary>
      <param name="name">the table name</param>
      <param name="keyfields">the key columns of the table</param>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLTable.#ctor(MS.Internal.Xml.QilNode,System.String)">
      <summary>
            Construct a new SQL table
            </summary>
      <param name="name">the table name</param>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLTable.GetHashCode">
      <summary>
      </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLTable.Equals(System.Object)">
      <summary>
      </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSQLTable.Name">
      <summary>
            Access the table name
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSQLTable.DataSourceKey">
      <summary>
            Access the dataSourceKey field
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilSQLTable.KeyFields">
      <summary>
            Access the key fields
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilSQLType">
      <summary>
            a SQL type node
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilSQLType.#ctor(MS.Internal.Xml.SQLDataType)">
      <summary>
            Construct a SQL type node
            </summary>
      <param name="dt">the SQL data type</param>
    </member>
    <member name="P:MS.Internal.Xml.QilSQLType.SQLDataType">
      <summary>
            Access the column SQL data type
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilString">
      <summary>
            A node with only a string.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilString.#ctor(MS.Internal.Xml.QilNodeType,System.String)">
      <summary>
            Construct a new QilString
            </summary>
      <param name="t">the node type</param>
      <param name="v">the string value</param>
    </member>
    <member name="P:MS.Internal.Xml.QilString.Value">
      <summary>
            Access the string value
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilTernary">
      <summary>
            A Qil node with three children.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilTernary.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new QilTernary
            </summary>
      <param name="t">the node type</param>
      <param name="n0">the left child expression</param>
      <param name="n1">the middle child expression</param>
      <param name="n2">the right child expression</param>
    </member>
    <member name="M:MS.Internal.Xml.QilTernary.DependsOn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <param name="j">the last iterator (not inclusive) to check; null to check all iterators</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="P:MS.Internal.Xml.QilTernary.Left">
      <summary>
            Access the left child expression
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilTernary.Center">
      <summary>
            Access the middle child expression
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilTernary.Right">
      <summary>
            Access the right child expression
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilToXQuery">
      <summary>
            Convert Qil into an XQuery with equivalent meaning.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilToXQuery.XQueryNamespaceUri">
      <summary>
            The special uri used for the XQuery functions-and-operators namespace.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilToXQuery.XmlSchemaNamespaceUri">
      <summary>
            The special uri used for the XSD namespace.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilToXQuery.SqlxmlNamespaceUri">
      <summary>
            The special uri used for the SQLXML namespace.
            </summary>
    </member>
    <member name="F:MS.Internal.Xml.QilToXQuery.MicrosoftNamespaceUri">
      <summary>
            The special uri used for the Microsoft namespace.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilToXQuery.#ctor(MS.Internal.Xml.Qil,MS.Internal.Xml.XQueryWriter)">
      <summary>
            Construct a QilToXQuery.
            <param name="q">the Qil tree to Visit</param><param name="w">an XQueryWriter to write the output</param></summary>
    </member>
    <member name="M:MS.Internal.Xml.QilToXQuery.ToXQuery">
      <summary>
            Perform the conversion
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilToXQuery.SetPreferredPrefix(System.String,System.String)">
      <summary>
            Indicate a preference for this prefix with this namespace uri
            </summary>
      <param name="prefix">the prefix</param>
      <param name="uri">the namespace uri</param>
    </member>
    <member name="M:MS.Internal.Xml.QilToXQuery.PrefixForUri(System.String)">
      <summary>
            lookup or generate a prefix for a uri
            </summary>
      <param name="uri">the namespace uri</param>
      <returns>a unique prefix</returns>
    </member>
    <member name="M:MS.Internal.Xml.QilToXQuery.PrefixForUri(System.String,System.String)">
      <summary>
            Lookup or generate a prefix for a uri
            </summary>
      <param name="uri">the namespace uri</param>
      <param name="preferredPrefix">(optionally) a desired prefix to use (if the namespace doesn't already have one)</param>
      <returns>a unique prefix</returns>
    </member>
    <member name="T:MS.Internal.Xml.QilTuple">
      <summary>
            The core of Qil.  A filtered tuple space
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilTuple.#ctor(MS.Internal.Xml.QilNodeType,MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a tuple
            </summary>
      <param name="t">the tuple type</param>
      <param name="tuples">the iterators that create the tuple space</param>
      <param name="wh">a boolean condition that filters the tuple space</param>
      <param name="ret">the results of the tuple</param>
    </member>
    <member name="M:MS.Internal.Xml.QilTuple.DependsOn(MS.Internal.Xml.QilIterator,MS.Internal.Xml.QilIterator)">
      <summary>
            Determine whether this node depends on any iterator in the list.
            </summary>
      <param name="i">the iterator with which to begin</param>
      <param name="j">the last iterator (not inclusive) to check; null to check all iterators</param>
      <returns>true if this node depends on one of the iterators</returns>
    </member>
    <member name="P:MS.Internal.Xml.QilTuple.For">
      <summary>
            A list of iterators that construct the tuple space.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilTuple.Where">
      <summary>
            A boolean condition that filters the tuple space.
            Roughly equivalent to SQL's "WHERE" clause.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilTuple.Return">
      <summary>
            The constructed result.
            Roughly equivalent to SQL's "SELECT" clause.
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilTuple.LastTuple">
      <summary>
            Traverse the Return clauses to find the last Tuple returned.
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilTypeNode">
      <summary>
            a Qil type node
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilTypeNode.#ctor(MS.Internal.Xml.QilDataType)">
      <summary>
            Construct a Qil type node
            </summary>
      <param name="dt">the Qil data type</param>
    </member>
    <member name="P:MS.Internal.Xml.QilTypeNode.QilDataType">
      <summary>
            Access the Qil data type
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilValidationVisitor">
      <summary>A class that validates Qil graphs.</summary>
    </member>
    <member name="T:MS.Internal.Xml.QilVisitorToXml">
      <summary>
            An example of QilVisitor.  Prints the Qil tree as XML.
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.#ctor(System.Xml.XmlTextWriter)">
      <summary>
            Construct a QilVisitorToXml.
            </summary>
      <param name="w">an XmlTextWriter to write the output</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.ToXml(MS.Internal.Xml.Qil)">
      <summary>
            Serialize a Qil graph as XML.
            </summary>
      <param name="q">the Qil graph</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.WriteStartElement(MS.Internal.Xml.Qil)">
      <summary>
            Start the top element for the graph.
            </summary>
      <param name="q">the Qil graph</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.WriteEndElement(MS.Internal.Xml.Qil)">
      <summary>
            End the top element for the graph.
            </summary>
      <param name="q">the Qil graph</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.WriteStartElement(MS.Internal.Xml.QilNode)">
      <summary>
            Start an element for a node
            </summary>
      <param name="n">the node</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.WriteStartElement(MS.Internal.Xml.QilNode,System.Boolean)">
      <summary>
            Start an element for a node
            </summary>
      <param name="n">the node</param>
      <param name="fSpecialCaseReferences">if true, write references using RefTo instead of their actual nodetype</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.WriteEndElement(MS.Internal.Xml.QilNode)">
      <summary>
            End an element for a node
            </summary>
      <param name="n">the node</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.WriteAttributes(MS.Internal.Xml.QilNode)">
      <summary>
            Write all attributes for a node
            </summary>
      <param name="n">the node</param>
    </member>
    <member name="M:MS.Internal.Xml.QilVisitorToXml.WriteAnnotations(MS.Internal.Xml.QilNode)">
      <summary>
            Write all annotations for a node
            </summary>
      <param name="n">the node</param>
    </member>
    <member name="P:MS.Internal.Xml.QilVisitorToXml.PrintAnnotations">
      <summary>
            Include annotations in the output (as processing-instructions)
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilVisitorToXml.PrintTypeInfo">
      <summary>
            Include type info in the output (as attributes)
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QilVisitorToXml.PrintLineInfo">
      <summary>
            Include source line info in the output (as attributes)
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QilXmlReader">
      <summary>
            Read the output of 
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.QueryUnit">
      <summary>
            A main query and an associated function library
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.QueryUnit.#ctor(MS.Internal.Xml.Qil,MS.Internal.Xml.Qil[])">
      <summary>
            Construct a new QueryUnit
            </summary>
      <param name="main">the main query</param>
      <param name="lib">the (optional) function library</param>
    </member>
    <member name="M:MS.Internal.Xml.QueryUnit.Function(System.Int32)">
      <summary>
            Access a function in the function library
            </summary>
      <param name="i">the function index</param>
      <returns>the corresponding Qil</returns>
    </member>
    <member name="M:MS.Internal.Xml.QueryUnit.SetFunction(System.Int32,MS.Internal.Xml.Qil)">
      <summary>
            Set a function definition in the function library
            </summary>
      <param name="i">the function index</param>
      <param name="value">the corresponding Qil</param>
    </member>
    <member name="P:MS.Internal.Xml.QueryUnit.MainQuery">
      <summary>
            Access the main query
            </summary>
    </member>
    <member name="P:MS.Internal.Xml.QueryUnit.FunctionLibrary">
      <summary>
            Access the function library
            </summary>
    </member>
    <member name="T:MS.Internal.Xml.SubstitutionList">
      <summary>
            Data structure for use in CloneAndReplace
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.SubstitutionList.#ctor(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Construct a new SubstitutionList with the first node and its replacement
            </summary>
      <param name="first">the first node to find</param>
      <param name="replacement">its replacement</param>
    </member>
    <member name="M:MS.Internal.Xml.SubstitutionList.AddSubstitutionPair(MS.Internal.Xml.QilNode,MS.Internal.Xml.QilNode)">
      <summary>
            Add a substituion pair
            </summary>
      <param name="find">a node to be replaced</param>
      <param name="replace">its replacement</param>
    </member>
    <member name="M:MS.Internal.Xml.SubstitutionList.RemoveSubstitutionPair(MS.Internal.Xml.QilNode)">
      <summary>
            Remove a substituion pair
            </summary>
      <param name="n">the node to find</param>
    </member>
    <member name="M:MS.Internal.Xml.SubstitutionList.RemoveLastSubstitutionPair">
      <summary>
            Remove the last a substituion pair
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.SubstitutionList.RemoveLastNSubstitutionPairs(System.Int32)">
      <summary>
            Remove the last N substitution pairs
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.SubstitutionList.FindReplacement(MS.Internal.Xml.QilNode)">
      <summary>
            Find the replacement for a node
            </summary>
      <param name="n">the node to replace</param>
      <returns>null if no replacement is found</returns>
    </member>
    <member name="T:MS.Internal.Xml.XQueryWriter">
      <summary>
            A helper class for generating valid XQuery (avoiding substitution errors, etc.)
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Construct a new XQueryWriter
            </summary>
      <param name="w">the writer to be wrapped</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteNamespaceDecl(System.String,System.String)">
      <summary>
            Write a namespace decl in the query prolog.
            </summary>
      <param name="prefix">the namespace prefix</param>
      <param name="uri">the namespace uri</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDefaultElementNamespaceDecl(System.String)">
      <summary>
            Write the default element namespace decl in the query prolog (DefaultNamespaceDecl).
            </summary>
      <param name="uri">the default namespace uri</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDefaultFunctionNamespaceDecl(System.String)">
      <summary>
            Write the default function namespace decl in the query prolog (DefaultNamespaceDecl).
            </summary>
      <param name="uri">the default namespace uri</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteSchemaImport(System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema StringLiteral)
            </summary>
      <param name="s">the string literal</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteSchemaImport(System.String,System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema StringLiteral AtKeyword StringLiteral)
            </summary>
      <param name="s">the string literal</param>
      <param name="atLocation">the location following the at keyword</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteNamespaceSchemaImport(System.String,System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema NamespaceDecl)
            </summary>
      <param name="prefix">the prefix for the namespace decl</param>
      <param name="uri">the uri for the namespace decl</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteNamespaceSchemaImport(System.String,System.String,System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema NamespaceDecl AtKeyword StringLiteral)
            </summary>
      <param name="prefix">the prefix for the namespace decl</param>
      <param name="uri">the uri for the namespace decl</param>
      <param name="atLocation">the location following the at keyword</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDefaultElementSchemaImport(System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema DefaultNamespaceDecl)
            </summary>
      <param name="uri">the uri for the element default namespace decl</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDefaultElementSchemaImport(System.String,System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema DefaultNamespaceDecl AtKeyword StringLiteral)
            </summary>
      <param name="uri">the uri for the element default namespace decl</param>
      <param name="atLocation">the location following the at keyword</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDefaultFunctionSchemaImport(System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema DefaultNamespaceDecl)
            </summary>
      <param name="uri">the uri for the function default namespace decl</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDefaultFunctionSchemaImport(System.String,System.String)">
      <summary>
            Write a schema import (SchemaImport := Schema DefaultNamespaceDecl AtKeyword StringLiteral)
            </summary>
      <param name="uri">the uri for the function default namespace decl</param>
      <param name="atLocation">the location following the at keyword</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteStartFunctionDefinition(System.String)">
      <summary>
            Write a function definition
            </summary>
      <param name="localName">the local-name part of the function name</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteStartFunctionDefinition(System.String,System.String)">
      <summary>
            Write a function definition
            </summary>
      <param name="localName">the local-name part of the function name</param>
      <param name="namespaceUri">the (optional) namespace-uri part of the function name</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteFunctionParameter(MS.Internal.Xml.XQueryWriter.SequenceType,System.String)">
      <summary>
            Write a function parameter
            </summary>
      <param name="st">the (optional) parameter type</param>
      <param name="var">the parameter name</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteStartFunctionBody(MS.Internal.Xml.XQueryWriter.SequenceType)">
      <summary>
            Start the body of a function definition
            </summary>
      <param name="returnType">the (optional) return type of the function</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteSequenceType(MS.Internal.Xml.XQueryWriter.SequenceType)">
      <summary>
            Write a sequence type (SequenceType)
            </summary>
      <param name="st">the value to write</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteEndFunctionDefinition">
      <summary>
            End a function definition
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteStartFunctionInvocation(System.String,System.String)">
      <summary>
            Start a function invocation
            </summary>
      <param name="uri">the (optional) namespace-uri part of the function name</param>
      <param name="local">the local-name part of the function name</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteEndFunctionInvocation">
      <summary>
            End a function invocation
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteComment(System.String)">
      <summary>
            End an XQuery comment
            </summary>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteUriLiteral(System.String)">
      <summary>
            Write a URI literal
            </summary>
      <param name="uri">the uri to write</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteStringLiteral(System.String)">
      <summary>
            Write a string literal (StringLiteral)
            </summary>
      <param name="s">the value to write</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteIntegerLiteral(System.Int32)">
      <summary>
            Write an integer literal (IntegerLiteral)
            </summary>
      <param name="i">the value to write</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDoubleLiteral(System.Double)">
      <summary>
            Write a double literal (DoubleLiteral)
            </summary>
      <param name="d">the value to write</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteDecimalLiteral(System.Double)">
      <summary>
            Write a decimal literal (DecimalLiteral)
            </summary>
      <param name="d">the value to write</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteQName(System.String)">
      <summary>
            Write a qname
            </summary>
      <param name="qname">the qname string</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteQName(System.String,System.String)">
      <summary>
            Write a QName
            </summary>
      <param name="local">the local-name part</param>
      <param name="uri">the namespace-uri part</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteNCName(System.String)">
      <summary>
            Write an NCName
            </summary>
      <param name="ncname">the ncname string</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteNCName(System.String,System.Boolean)">
      <summary>
            Write an NCName
            </summary>
      <param name="ncname">the ncname string</param>
      <param name="encodeKeyword">true if names that are keywords should be prefixed with a colon</param>
    </member>
    <member name="M:MS.Internal.Xml.XQueryWriter.WriteAnyString(System.String)">
      <summary>
            Write any string value as an XQuery string literal.
            </summary>
      <param name="s">the string to write</param>
    </member>
    <member name="T:MS.Internal.Xml.XQueryWriter.SequenceType">
      <summary>
            Helper class used to indicate a SequenceType
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:System.Xml.Query.Xslt.Isolator" -->
    <!-- Badly formed XML comment ignored for member "T:System.Xml.Query.Xslt.ParameterIsolator" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlChangeTrackingService.AcceptChanges" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlChangeTrackingService.RejectChanges" -->
    <member name="T:System.Xml.IXmlInfosetChangeNavigator">
    </member>
    <member name="M:System.Xml.IXmlInfosetChangeNavigator.AcceptChange">
    </member>
    <member name="M:System.Xml.IXmlInfosetChangeNavigator.RejectChange">
    </member>
    <member name="M:System.Xml.IXmlInfosetChangeNavigator.SelectChanges(System.Xml.XmlChangeFilter)">
    </member>
    <member name="M:System.Xml.IXmlInfosetChangeNavigator.SelectChanges">
    </member>
    <member name="M:System.Xml.IXmlInfosetChangeNavigator.CreateXmlEditor">
    </member>
    <member name="P:System.Xml.IXmlInfosetChangeNavigator.OriginalValue">
    </member>
    <member name="P:System.Xml.IXmlInfosetChangeNavigator.NodeChangeType">
    </member>
    <member name="T:System.Xml.XmlInfosetChangedEventAction">
      <summary>    
            Events could be post or pre event.
            </summary>
    </member>
    <member name="T:System.Xml.XmlInfosetChangedEventArgs">
      <summary>
      </summary>
    </member>
    <member name="T:System.Xml.XmlInfosetDocument">
      <summary>
            XDocument follows the XPath/XQuery data model.  All nodes in the tree reference the document,
            and the document references the root node of the tree.  All namespaces are stored out-of-line,
            in an Element --&gt; In-Scope-Namespaces map.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetDocument.#ctor(System.Xml.XmlNameTable,System.Boolean)">
      <summary>
            Create a new document from the specified reader.  All names should be atomized using "qnameTable".
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetDocument.CreateXmlInfosetNavigator">
      <summary>
            Create a navigator positioned on the root node of the document.
            The tree navigated will be current view that is it will not include
            any deleted nodes.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetDocument.CreateXmlInfosetChangeNavigator">
      <summary>
            Creates and returns XmlChangeNavigator. It will be
            positioned on the root node to start with. The tree 
            navigated in this case will be merged tree which will
            include the deleted nodes whose actions havent been commited.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetDocument.CreateXmlInfosetEditor">
      <summary>
            Creates and returns an XmlEditor. The editor returned
            will be positioned on root node. The tree navigated will
            be current view that is it will not include any deleted nodes.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlInfosetDocument.AcceptChanges" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlInfosetDocument.RejectChanges" -->
    <member name="M:System.Xml.XmlInfosetDocument.HasChanges">
      <summary>
            returns a boolean - true indicating that there are pending changes on the cache. and false
            indicating otherwise.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetDocument.HasChanges(System.Xml.XmlChangeFilter)">
      <summary>
            returns a boolean - true indicating that there are pending changes on the cache. and false
            indicating otherwise.
            </summary>
    </member>
    <member name="M:System.Xml.XmlInfosetDocument.IsValidNavigator(System.Xml.XmlInfosetNavigator,System.Boolean)">
      <summary>
            is used to check if the passed in is part of a deleted subtree
            the second parameter is used to identify a node that is permanently deleted.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:System.Xml.XmlInfosetDocument.Writer" -->
    <member name="P:System.Xml.XmlInfosetDocument.NameTable">
      <summary>
            Return the name table used to atomize all name parts (local name, namespace uri, prefix).
            </summary>
    </member>
    <member name="P:System.Xml.XmlInfosetDocument.DefaultRoot">
      <summary>
            Returns a bool value indicating whether the cache has a default root.
            </summary>
    </member>
    <member name="P:System.Xml.XmlInfosetDocument.AcceptChangesOnLoad">
      <summary>
            whether the load will keep the changes pending or accepts them.
            </summary>
    </member>
    <member name="P:System.Xml.XmlInfosetDocument.SerializeAsXmlDiffgram">
      <summary>
            whether the cache will be serialized as diffgram or not.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.ItemInserted">
      <summary>
            event that the user can plug into to listen for any post-insert operation event.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.ItemRemoved">
      <summary>
            event that the user can plug into to listen for any post-removal operation event.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.ItemChanged">
      <summary>
            event that the user can plug into to listen for any post-update operation event.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.ItemInserting">
      <summary>
            event that the user can plug into to listen for any pre-insertion operation event.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.ItemRemoving">
      <summary>
            event that the user can plug into to listen for any pre-removal operation event.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.ItemChanging">
      <summary>
            event that the user can plug into to listen for any pre-update operation event.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.RejectingChange">
      <summary>
            event that the user can plug into to listen for any pre-reject operation event.
            </summary>
    </member>
    <member name="E:System.Xml.XmlInfosetDocument.ChangeRejected">
      <summary>
            event that the user can plug into to listen for any post-reject operation event.
            </summary>
    </member>
    <member name="T:System.Xml.XmlInfosetChangeNavigator">
    </member>
    <member name="M:System.Xml.XmlInfosetChangeNavigator.AcceptChange">
    </member>
    <member name="M:System.Xml.XmlInfosetChangeNavigator.RejectChange">
    </member>
    <member name="M:System.Xml.XmlInfosetChangeNavigator.SelectChanges(System.Xml.XmlChangeFilter)">
    </member>
    <member name="M:System.Xml.XmlInfosetChangeNavigator.SelectChanges">
    </member>
    <member name="M:System.Xml.XmlInfosetChangeNavigator.CreateXmlEditor">
    </member>
    <member name="P:System.Xml.XmlInfosetChangeNavigator.OriginalValue">
    </member>
    <member name="P:System.Xml.XmlInfosetChangeNavigator.NodeChangeType">
    </member>
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XmlCacheChangeNavigator.MoveToFirstAttribute" -->
    <member name="T:System.Xml.XmlChangeFilter">
      <summary>
            Enumeration of changes that can be done a Node.  Top level inserted is where user inserts a whole sub tree and 
            only the root element will be marked as TopLevel inserted. This is just cleaner for user when going 
            through the changed nodes. 
            </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangeType">
      <summary>
            Enumeration of changes that can be done a Node.  Top level inserted is where user inserts a whole sub tree and 
            only the root element will be marked as TopLevel inserted. This is just cleaner for user when going 
            through the changed nodes. 
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XNodeNavigationHelper.HasContentChild(System.Xml.XNode)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XNodeNavigationHelper.HasAnotherContentChild(System.Xml.XNode,System.Xml.XNode)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XNodeNavigationHelper.HasAnotherElementChild(System.Xml.XNode,System.Xml.XNode)" -->
    <!-- Badly formed XML comment ignored for member "M:System.Xml.XNodeChangeNavigationHelper.HasContentChild(System.Xml.XmlCacheEditor)" -->
    <member name="T:System.Data.Mapping.Binding">
      <summary>
            Summary description for Binding.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.Condition">
      <summary>
            Summary description for Condition.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.DataSource">
      <summary>
            Summary description for DataSource.
            </summary>
    </member>
    <member name="T:System.Data.Trinity.ExtendedProperty">
      <summary>
            Summary description for ExtendedProperty.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.Field">
      <summary>
            Summary description for Field.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.FieldJoin">
      <summary>
            Summary description for FieldJoin.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.FieldMap">
      <summary>
            Summary description for FieldMap.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.Map">
      <summary>
            Summary description for Map.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.MappingParameter">
      <summary>
            Summary description for MappingParameter.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.MappingSchema">
      <summary>
            This class holds the collections of datasources, mappings and mapping parameters.
            </summary>
    </member>
    <member name="M:System.Data.Mapping.MappingSchema.#ctor">
      <summary>
            Create intial object of MappingSchema. This object contain only default values and empty collections
            </summary>
    </member>
    <member name="M:System.Data.Mapping.MappingSchema.#ctor(System.String,System.Data.Mapping.DomainLoader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
            Create and populate a MappingSchema object from a file.
            </summary>
      <param name="schemaLocation">
      </param>
    </member>
    <member name="M:System.Data.Mapping.MappingSchema.#ctor(System.Xml.IXmlInfosetReader,System.Data.Mapping.DomainLoader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
            Create and populate a MappingSchema object from an XmlInfosetReader.
            </summary>
      <param name="reader">
      </param>
    </member>
    <member name="M:System.Data.Mapping.MappingSchema.#ctor(System.Xml.IXmlInfosetReader,System.Data.Mapping.DomainLoader)">
      <summary>
            Create and populate a MappingSchema object from an XmlInfosetReader.
            </summary>
      <param name="reader">
      </param>
    </member>
    <member name="T:System.Data.Mapping.Relationship">
      <summary>
            Summary description for Relationship.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.RelationshipMap">
      <summary>
            Summary description for RelationshipMap.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.StoredProcedureMap">
      <summary>
            Summary description for StoredProcedureMap.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.Variable">
      <summary>
            Summary description for Variable.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.DomainLoader">
      <summary>
            Summary description for DomainLoader.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.BindingCollection">
      <summary>
            Summary description for BindingCollection.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.ConditionCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.Condition" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.Add(System.Data.Mapping.Condition)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.Condition" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.ConditionCollection" /> .</para>
      </summary>
      <param name="condition">The <see cref="!:System.Data.Trinity.Condition" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.AddRange(System.Data.Mapping.Condition[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.ConditionCollection" />.</para>
      </summary>
      <param name="conditionArray">
               An array of type <see cref="!:System.Data.Trinity.Condition" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.AddRange(System.Data.Mapping.ConditionCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.ConditionCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="conditionCollection">
               A <see cref="!:System.Data.Trinity.ConditionCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.Contains(System.Data.Mapping.Condition)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.ConditionCollection" /> contains the specified <see cref="!:System.Data.Trinity.Condition" />.</para>
      </summary>
      <param name="condition">The <see cref="!:System.Data.Trinity.Condition" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.Condition" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.CopyTo(System.Data.Mapping.Condition[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.ConditionCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.ConditionCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.ConditionCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.IndexOf(System.Data.Mapping.Condition)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.Condition" /> in 
                  the <see cref="!:System.Data.Trinity.ConditionCollection" /> .</para>
      </summary>
      <param name="condition">The <see cref="!:System.Data.Trinity.Condition" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.Condition" /> of <paramref name="condition" /> in the 
            <see cref="!:System.Data.Trinity.ConditionCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.Insert(System.Int32,System.Data.Mapping.Condition)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.Condition" /> into the <see cref="!:System.Data.Trinity.ConditionCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="condition" /> should be inserted.</param>
      <param name=" condition">The <see cref="!:System.Data.Trinity.Condition" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.ConditionCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.ConditionCollection.Remove(System.Data.Mapping.Condition)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.Condition" /> from the 
               <see cref="!:System.Data.Trinity.ConditionCollection" /> .</para>
      </summary>
      <param name="condition">The <see cref="!:System.Data.Trinity.Condition" /> to remove from the <see cref="!:System.Data.Trinity.ConditionCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="condition" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.ConditionCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Condition" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.DataSourceCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.DataSource" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.Add(System.Data.Mapping.DataSource)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.DataSource" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.DataSourceCollection" /> .</para>
      </summary>
      <param name="dataSource">The <see cref="!:System.Data.Trinity.DataSource" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.AddRange(System.Data.Mapping.DataSource[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.DataSourceCollection" />.</para>
      </summary>
      <param name="dataSourceArray">
               An array of type <see cref="!:System.Data.Trinity.DataSource" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.AddRange(System.Data.Mapping.DataSourceCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.DataSourceCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="dataSourceCollection">
               A <see cref="!:System.Data.Trinity.DataSourceCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.Contains(System.Data.Mapping.DataSource)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.DataSourceCollection" /> contains the specified <see cref="!:System.Data.Trinity.DataSource" />.</para>
      </summary>
      <param name="dataSource">The <see cref="!:System.Data.Trinity.DataSource" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.DataSource" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.CopyTo(System.Data.Mapping.DataSource[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.DataSourceCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.DataSourceCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.DataSourceCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.IndexOf(System.Data.Mapping.DataSource)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.DataSource" /> in 
                  the <see cref="!:System.Data.Trinity.DataSourceCollection" /> .</para>
      </summary>
      <param name="dataSource">The <see cref="!:System.Data.Trinity.DataSource" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.DataSource" /> of <paramref name="dataSource" /> in the 
            <see cref="!:System.Data.Trinity.DataSourceCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.Insert(System.Int32,System.Data.Mapping.DataSource)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.DataSource" /> into the <see cref="!:System.Data.Trinity.DataSourceCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="dataSource" /> should be inserted.</param>
      <param name=" dataSource">The <see cref="!:System.Data.Trinity.DataSource" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.DataSourceCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.DataSourceCollection.Remove(System.Data.Mapping.DataSource)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.DataSource" /> from the 
               <see cref="!:System.Data.Trinity.DataSourceCollection" /> .</para>
      </summary>
      <param name="dataSource">The <see cref="!:System.Data.Trinity.DataSource" /> to remove from the <see cref="!:System.Data.Trinity.DataSourceCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSource" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.DataSourceCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.DataSource" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Trinity.ExtendedPropertyCollection">
      <summary>
            Summary description for ExtendedPropertyCollection.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.FieldCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.Field" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.FieldCollection.Contains(System.Data.Mapping.Field)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.FieldCollection" /> contains the specified <see cref="!:System.Data.Trinity.Field" />.</para>
      </summary>
      <param name="field">The <see cref="!:System.Data.Trinity.Field" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.Field" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldCollection.CopyTo(System.Data.Mapping.Field[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.FieldCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.FieldCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.FieldCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.FieldCollection.IndexOf(System.Data.Mapping.Field)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.Field" /> in 
                  the <see cref="!:System.Data.Trinity.FieldCollection" /> .</para>
      </summary>
      <param name="field">The <see cref="!:System.Data.Trinity.Field" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.Field" /> of <paramref name="value" /> in the 
            <see cref="!:System.Data.Trinity.FieldCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.FieldCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="P:System.Data.Mapping.FieldCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Field" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Data.Mapping.FieldCollection.Item(System.String)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Field" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.FieldJoinCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.FieldJoin" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.Add(System.Data.Mapping.FieldJoin)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.FieldJoin" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.FieldJoinCollection" /> .</para>
      </summary>
      <param name="fieldJoin">The <see cref="!:System.Data.Trinity.FieldJoin" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.AddRange(System.Data.Mapping.FieldJoin[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.FieldJoinCollection" />.</para>
      </summary>
      <param name="fieldJoinArray">
               An array of type <see cref="!:System.Data.Trinity.FieldJoin" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.AddRange(System.Data.Mapping.FieldJoinCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.FieldJoinCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="fieldJoinCollection">
               A <see cref="!:System.Data.Trinity.FieldJoinCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.Contains(System.Data.Mapping.FieldJoin)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.FieldJoinCollection" /> contains the specified <see cref="!:System.Data.Trinity.FieldJoin" />.</para>
      </summary>
      <param name="fieldJoin">The <see cref="!:System.Data.Trinity.FieldJoin" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.FieldJoin" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.CopyTo(System.Data.Mapping.FieldJoin[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.FieldJoinCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.FieldJoinCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.FieldJoinCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.IndexOf(System.Data.Mapping.FieldJoin)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.FieldJoin" /> in 
                  the <see cref="!:System.Data.Trinity.FieldJoinCollection" /> .</para>
      </summary>
      <param name="fieldJoin">The <see cref="!:System.Data.Trinity.FieldJoin" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.FieldJoin" /> of <paramref name="fieldJoin" /> in the 
            <see cref="!:System.Data.Trinity.FieldJoinCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.Insert(System.Int32,System.Data.Mapping.FieldJoin)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.FieldJoin" /> into the <see cref="!:System.Data.Trinity.FieldJoinCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="fieldJoin" /> should be inserted.</param>
      <param name=" fieldJoin">The <see cref="!:System.Data.Trinity.FieldJoin" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.FieldJoinCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldJoinCollection.Remove(System.Data.Mapping.FieldJoin)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.FieldJoin" /> from the 
               <see cref="!:System.Data.Trinity.FieldJoinCollection" /> .</para>
      </summary>
      <param name="fieldJoin">The <see cref="!:System.Data.Trinity.FieldJoin" /> to remove from the <see cref="!:System.Data.Trinity.FieldJoinCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldJoin" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.FieldJoinCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.FieldJoin" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.FieldMapCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.FieldMap" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.Add(System.Data.Mapping.FieldMap)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.FieldMap" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.FieldMapCollection" /> .</para>
      </summary>
      <param name="fieldMap">The <see cref="!:System.Data.Trinity.FieldMap" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.AddRange(System.Data.Mapping.FieldMap[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.FieldMapCollection" />.</para>
      </summary>
      <param name="fieldMapArray">
               An array of type <see cref="!:System.Data.Trinity.FieldMap" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.AddRange(System.Data.Mapping.FieldMapCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.FieldMapCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="fieldMapCollection">
               A <see cref="!:System.Data.Trinity.FieldMapCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.Contains(System.Data.Mapping.FieldMap)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.FieldMapCollection" /> contains the specified <see cref="!:System.Data.Trinity.FieldMap" />.</para>
      </summary>
      <param name="fieldMap">The <see cref="!:System.Data.Trinity.FieldMap" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.FieldMap" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.CopyTo(System.Data.Mapping.FieldMap[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.FieldMapCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.FieldMapCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.FieldMapCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.IndexOf(System.Data.Mapping.FieldMap)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.FieldMap" /> in 
                  the <see cref="!:System.Data.Trinity.FieldMapCollection" /> .</para>
      </summary>
      <param name="fieldMap">The <see cref="!:System.Data.Trinity.FieldMap" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.FieldMap" /> of <paramref name="fieldMap" /> in the 
            <see cref="!:System.Data.Trinity.FieldMapCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.Insert(System.Int32,System.Data.Mapping.FieldMap)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.FieldMap" /> into the <see cref="!:System.Data.Trinity.FieldMapCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="fieldMap" /> should be inserted.</param>
      <param name=" fieldMap">The <see cref="!:System.Data.Trinity.FieldMap" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.FieldMapCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.FieldMapCollection.Remove(System.Data.Mapping.FieldMap)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.FieldMap" /> from the 
               <see cref="!:System.Data.Trinity.FieldMapCollection" /> .</para>
      </summary>
      <param name="fieldMap">The <see cref="!:System.Data.Trinity.FieldMap" /> to remove from the <see cref="!:System.Data.Trinity.FieldMapCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldMap" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.FieldMapCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.FieldMap" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.MapCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.Map" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.Add(System.Data.Mapping.Map)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.Map" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.MapCollection" /> .</para>
      </summary>
      <param name="map">The <see cref="!:System.Data.Trinity.Map" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.AddRange(System.Data.Mapping.Map[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.MapCollection" />.</para>
      </summary>
      <param name="mapArray">
               An array of type <see cref="!:System.Data.Trinity.Map" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.AddRange(System.Data.Mapping.MapCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.MapCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="mapCollection">
               A <see cref="!:System.Data.Trinity.MapCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.Contains(System.Data.Mapping.Map)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.MapCollection" /> contains the specified <see cref="!:System.Data.Trinity.Map" />.</para>
      </summary>
      <param name="map">The <see cref="!:System.Data.Trinity.Map" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.Map" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.CopyTo(System.Data.Mapping.Map[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.MapCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.MapCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.MapCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.IndexOf(System.Data.Mapping.Map)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.Map" /> in 
                  the <see cref="!:System.Data.Trinity.MapCollection" /> .</para>
      </summary>
      <param name="map">The <see cref="!:System.Data.Trinity.Map" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.Map" /> of <paramref name="map" /> in the 
            <see cref="!:System.Data.Trinity.MapCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.Insert(System.Int32,System.Data.Mapping.Map)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.Map" /> into the <see cref="!:System.Data.Trinity.MapCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="map" /> should be inserted.</param>
      <param name=" map">The <see cref="!:System.Data.Trinity.Map" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.MapCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.MapCollection.Remove(System.Data.Mapping.Map)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.Map" /> from the 
               <see cref="!:System.Data.Trinity.MapCollection" /> .</para>
      </summary>
      <param name="map">The <see cref="!:System.Data.Trinity.Map" /> to remove from the <see cref="!:System.Data.Trinity.MapCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="map" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.MapCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Map" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.MappingParameterCollection">
      <summary>
            Summary description for MappingParameterCollection.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.RelationshipCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.Relationship" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.Add(System.Data.Mapping.Relationship)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.Relationship" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</para>
      </summary>
      <param name="relationship">The <see cref="!:System.Data.Trinity.Relationship" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.AddRange(System.Data.Mapping.Relationship[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.RelationshipCollection" />.</para>
      </summary>
      <param name="relationshipArray">
               An array of type <see cref="!:System.Data.Trinity.Relationship" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.AddRange(System.Data.Mapping.RelationshipCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.RelationshipCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="relationshipCollection">
               A <see cref="!:System.Data.Trinity.RelationshipCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.Contains(System.Data.Mapping.Relationship)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.RelationshipCollection" /> contains the specified <see cref="!:System.Data.Trinity.Relationship" />.</para>
      </summary>
      <param name="relationship">The <see cref="!:System.Data.Trinity.Relationship" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.Relationship" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.CopyTo(System.Data.Mapping.Relationship[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.RelationshipCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.RelationshipCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.IndexOf(System.Data.Mapping.Relationship)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.Relationship" /> in 
                  the <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</para>
      </summary>
      <param name="relationship">The <see cref="!:System.Data.Trinity.Relationship" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.Relationship" /> of <paramref name="value" /> in the 
            <see cref="!:System.Data.Trinity.RelationshipCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.Insert(System.Int32,System.Data.Mapping.Relationship)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.Relationship" /> into the <see cref="!:System.Data.Trinity.RelationshipCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="value" /> should be inserted.</param>
      <param name="relationship">The <see cref="!:System.Data.Trinity.Relationship" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.Remove(System.Data.Mapping.Relationship)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.Relationship" /> from the 
               <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</para>
      </summary>
      <param name="relationship">The <see cref="!:System.Data.Trinity.Relationship" /> to remove from the <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not found in the Collection. </exception>
    </member>
    <member name="M:System.Data.Mapping.RelationshipCollection.Remove(System.String)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.Relationship" /> from the 
               <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</para>
      </summary>
      <param name="name">The name to remove from the <see cref="!:System.Data.Trinity.RelationshipCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.RelationshipCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Relationship" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Data.Mapping.RelationshipCollection.Item(System.String)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Relationship" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.RelationshipMapCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.RelationshipMap" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.Add(System.Data.Mapping.RelationshipMap)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.RelationshipMap" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> .</para>
      </summary>
      <param name="relationshipMap">The <see cref="!:System.Data.Trinity.RelationshipMap" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.AddRange(System.Data.Mapping.RelationshipMap[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.RelationshipMapCollection" />.</para>
      </summary>
      <param name="relationshipMapArray">
               An array of type <see cref="!:System.Data.Trinity.RelationshipMap" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.AddRange(System.Data.Mapping.RelationshipMapCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="relationshipMapCollection">
               A <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.Contains(System.Data.Mapping.RelationshipMap)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> contains the specified <see cref="!:System.Data.Trinity.RelationshipMap" />.</para>
      </summary>
      <param name="relationshipMap">The <see cref="!:System.Data.Trinity.RelationshipMap" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.RelationshipMap" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.CopyTo(System.Data.Mapping.RelationshipMap[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.IndexOf(System.Data.Mapping.RelationshipMap)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.RelationshipMap" /> in 
                  the <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> .</para>
      </summary>
      <param name="relationshipMap">The <see cref="!:System.Data.Trinity.RelationshipMap" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.RelationshipMap" /> of <paramref name="relationshipMap" /> in the 
            <see cref="!:System.Data.Trinity.RelationshipMapCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.Insert(System.Int32,System.Data.Mapping.RelationshipMap)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.RelationshipMap" /> into the <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="relationshipMap" /> should be inserted.</param>
      <param name=" relationshipMap">The <see cref="!:System.Data.Trinity.RelationshipMap" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.RelationshipMapCollection.Remove(System.Data.Mapping.RelationshipMap)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.RelationshipMap" /> from the 
               <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> .</para>
      </summary>
      <param name="relationshipMap">The <see cref="!:System.Data.Trinity.RelationshipMap" /> to remove from the <see cref="!:System.Data.Trinity.RelationshipMapCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipMap" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.RelationshipMapCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.RelationshipMap" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.StoredProcedureMapCollection">
      <summary>
            Summary description for StoredProcedureMapCollection.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.VariableCollection">
      <summary>
        <para>
                  A collection that stores <see cref="!:System.Data.Trinity.Variable" /> objects.
               </para>
      </summary>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.Add(System.Data.Mapping.Variable)">
      <summary>
        <para>Adds a <see cref="!:System.Data.Trinity.Variable" /> with the specified value to the 
               <see cref="!:System.Data.Trinity.VariableCollection" /> .</para>
      </summary>
      <param name="variable">The <see cref="!:System.Data.Trinity.Variable" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.AddRange(System.Data.Mapping.Variable[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="!:System.Data.Trinity.VariableCollection" />.</para>
      </summary>
      <param name="variableArray">
               An array of type <see cref="!:System.Data.Trinity.Variable" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.AddRange(System.Data.Mapping.VariableCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="!:System.Data.Trinity.VariableCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="variableCollection">
               A <see cref="!:System.Data.Trinity.VariableCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.Contains(System.Data.Mapping.Variable)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="!:System.Data.Trinity.VariableCollection" /> contains the specified <see cref="!:System.Data.Trinity.Variable" />.</para>
      </summary>
      <param name="variable">The <see cref="!:System.Data.Trinity.Variable" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="!:System.Data.Trinity.Variable" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.CopyTo(System.Data.Mapping.Variable[],System.Int32)">
      <summary>
        <para>Copies the <see cref="!:System.Data.Trinity.VariableCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="!:System.Data.Trinity.VariableCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="array" /> is multidimensional.</para>
        <para>-or-</para>
        <para>The number of elements in the <see cref="!:System.Data.Trinity.VariableCollection" /> is greater than the available space between <paramref name="arrayIndex" /> and the end of <paramref name="array" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.IndexOf(System.Data.Mapping.Variable)">
      <summary>
        <para>Returns the index of a <see cref="!:System.Data.Trinity.Variable" /> in 
                  the <see cref="!:System.Data.Trinity.VariableCollection" /> .</para>
      </summary>
      <param name="variable">The <see cref="!:System.Data.Trinity.Variable" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="!:System.Data.Trinity.Variable" /> of <paramref name="value" /> in the 
            <see cref="!:System.Data.Trinity.VariableCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.Insert(System.Int32,System.Data.Mapping.Variable)">
      <summary>
        <para>Inserts a <see cref="!:System.Data.Trinity.Variable" /> into the <see cref="!:System.Data.Trinity.VariableCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="value" /> should be inserted.</param>
      <param name="variable">The <see cref="!:System.Data.Trinity.Variable" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="!:System.Data.Trinity.VariableCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.Remove(System.Data.Mapping.Variable)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.Variable" /> from the 
               <see cref="!:System.Data.Trinity.VariableCollection" /> .</para>
      </summary>
      <param name="variable">The <see cref="!:System.Data.Trinity.Variable" /> to remove from the <see cref="!:System.Data.Trinity.VariableCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not found in the Collection. </exception>
    </member>
    <member name="M:System.Data.Mapping.VariableCollection.Remove(System.String)">
      <summary>
        <para> Removes a specific <see cref="!:System.Data.Trinity.Variable" /> from the 
               <see cref="!:System.Data.Trinity.VariableCollection" /> .</para>
      </summary>
      <param name="name">The name to remove from the <see cref="!:System.Data.Trinity.VariableCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not found in the Collection. </exception>
    </member>
    <member name="P:System.Data.Mapping.VariableCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Variable" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Data.Mapping.VariableCollection.Item(System.String)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="!:System.Data.Trinity.Variable" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="T:System.Data.Mapping.IDomainConstraint">
      <summary>
            Summary description for IDomainConstraint.
            </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainConstraint.Name">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainConstraint.FromDomainStructure">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainConstraint.ToDomainStructure">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainConstraint.DomainSchema">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainConstraint.FieldJoins">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainConstraint.CascadeDelete">
      <summary>
      </summary>
    </member>
    <member name="T:System.Data.Mapping.IDomainField">
      <summary>
            Summary description for IDomainField.
            </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainField.Name">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainField.DomainStructure">
      <summary>
      </summary>
    </member>
    <member name="T:System.Data.Mapping.IDomainFieldJoin">
      <summary>
            Summary description for IDomainFieldJoin.
            </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainFieldJoin.FromDomainField">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainFieldJoin.ToDomainField">
      <summary>
      </summary>
    </member>
    <member name="T:System.Data.Mapping.IDomainSchema">
      <summary>
            Represents a collection of objects that can be individually accessed by an XmlQualifiedName index.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.IDomainStructure">
      <summary>
            Summary description for IDomainStructure.
            </summary>
    </member>
    <member name="M:System.Data.Mapping.IDomainStructure.GetDomainField(System.String)">
      <summary>
      </summary>
      <param name="select">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Data.Mapping.IDomainStructure.Select">
      <summary>
      </summary>
    </member>
    <member name="P:System.Data.Mapping.IDomainStructure.DomainSchema">
      <summary>
      </summary>
    </member>
    <member name="T:System.Data.Mapping.IDomainFieldJoinCollection">
      <summary>
            Summary description for IDomainFieldJoinCollection.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.Xml.XmlSchemaDefinition">
      <summary>
            Summary description for XmlSchemaDefinition.
            </summary>
    </member>
    <member name="T:System.Data.Mapping.Xml.XmlSchemaExtension">
      <summary>
            Represents an Extension on XmlSchema nodes.
            </summary>
    </member>
  </members>
</doc>